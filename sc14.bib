


@Article{DeSterck:2006:AMG,
  author = 	 {Hans De Sterck and Ulrike Meier Yang and Jeffery Heys},
  title = 	 {Reducing complexity in parallel algebraic multigrid preconditioners},
  journal = 	 {SIAM Journal on Matrix Analysis and Applications},
  year = 	 2006,
  volume = 	 27,
  pages = 	 {1019-1039},
  note = 	 {Also available as LLNL technical report UCRL-JRNL-206780.}}

@Article{henson:2002:AMG,
  author = 	 {Van Emden Henson and Ulrike Meier Yang},
  title = 	 {{BoomerAMG: A parallel algebraic multigrid solver and preconditioner}},
  journal = 	 {{Appl. Num. Math.}},
  year = 	 2002,
  volume = 	 41,
  pages = 	 {155-177},
  note = 	 {Also available as LLNL technical report UCRL-JC-141495.}}

@INPROCEEDINGS{Ho:2008:scalable,
author={Ho, J.C.Y. and Cho-Li Wang and Lau, F. C M},
booktitle={Parallel and Distributed Processing, 2008. IPDPS 2008. IEEE International Symposium on},
title={Scalable group-based checkpoint/restart for large-scale message-passing systems},
year={2008},
month={April},
pages={1-12},
keywords={checkpointing;message passing;software fault tolerance;MPI;fault tolerance;large-scale message-passing systems;message logging;parallel computers;scalable group-based checkpoint-restart;system-level checkpointing;Application software;Checkpointing;Computer science;Concurrent computing;Costs;Failure analysis;Fault tolerance;Fault tolerant systems;Large-scale systems;Scalability},
doi={10.1109/IPDPS.2008.4536302},
ISSN={1530-2075},}

@techreport{ Levy:2014:sim-validate,
        author      = {Levy, Scott and Topp, Bryan and Ferreira, Kurt B. and
                       Arnold, Dorian and Widener, Patrick and Hoefler, Torsten},
        title       = {Using Simulation to Evaluate the Performance of Resilience
                       Strategies and Process Failures},
        month       = Jan.,
        institution = {Sandia National Laboratories},
        year        = {2014},
        type        = {Technical Report},
        number = {SAND2014-0688}
}

@techreport{ xxxLevy:2014:sim-validate,
        title      = {Blinded for review process}
}

@inproceedings{ Bouguerra:2009:FCM,
author =        {Bouguerra, Mohamed-Slim and Gautier, Thierry and Trystram, Denis and Vincent,
                Jean-Marc},
title =         {A Flexible Checkpoint/Restart Model in Distributed Systems},
booktitle =     {Proceedings of the 8th International Conference on Parallel Processing and
                 Applied Mathematics: Part I},
series =        {PPAM'09},
year =          {2010},
isbn =          {3-642-14389-X, 978-3-642-14389-2},
location =      {Wroclaw, Poland},
pages =         {206--215},
numpages =      {10},
url =           {http://dl.acm.org/citation.cfm?id=1882792.1882818},
acmid =         {1882818},
publisher =     {Springer-Verlag},
address =       {Berlin, Heidelberg},
keywords =      {checkpointing, fault tolerance, reliability modeling},
} 

@inproceedings{hoefler-netgauge-hpcc07,
        author={T. Hoefler and T. Mehlan and A. Lumsdaine and W. Rehm},
        title={{Netgauge: A Network Performance Measurement Framework}},
        year={2007},
        month={Sep.},
        pages={659-671},
        volume={4782},
        booktitle={Proceedings of High Performance Computing and Communications,
                   HPCC'07},
        location={Houston, USA},
        publisher={Springer},
        isbn={978-3-540-75443-5},
        source={http://www.unixer.de/~htor/publications/},
}

@Misc{netgauge-web,
  author =       {Netgauge - A Network Performance Measurement Toolkit},
  howpublished = {\url{http://htor.inf.ethz.ch/research/netgauge/}},
  note =         {Retrieved 16 Jan 2014.}
}

@Misc{trace-repository,
  title        = {Trace Repository},
  howpublished = {\url{http://htor.inf.ethz.ch:8888/}},
  note =         {Retrieved 16 Jan 2014.}
}

@Misc{snl-exact,
  author =       {{Center for Exascale Simulation of Combustion in Turbulence (ExaCT)}},
  howpublished = {\url{http://exactcodesign.org/}},
  note =         {Retrieved 16 Jan 2014.}
}


@Misc{lanl-exmatex,
  author =       {{Exascale Co-Design Center for Materials in Extreme Environments (ExMatEx)}},
  howpublished = {\url{http://exmatex.lanl.gov/}},
  note =         {Retrieved 16 Jan 2014.}
}

@Misc{anl-cesar,
  author =       {{Center for Exascale Simulation of Advanced Reactors (CESAR)}},
  howpublished = {\url{https://cesar.mcs.anl.gov/}},
  note =         {Retrieved 16 Jan 2014.}
}

@Misc{argonne-cesar-proxy-apps,
  author =       {{CESAR, Argonne National Laboratory}},
  title =        {{The CESAR Proxy-apps}},
  howpublished = {\url{https://cesar.mcs.anl.gov/content/software}},
  note =         {Retrieved 10 June 2013.}
}

@Misc{argonne-cesar-neutronics,
    author	= {{Argonne National Laboratory}},
    title	= {Proxy-Apps for Neutronics},
    howpublished = {\url{https://cesar.mcs.anl.gov/content/software/neutronics}},
      note =  {Retrieved 17 Jan 2014.}
}


@inproceedings{Prisacari:2013:Optimal,
 author = {Prisacari, Bogdan and Rodriguez, German and Minkenberg, Cyriel and Hoefler, Torsten},
 title = {Bandwidth-optimal All-to-all Exchanges in Fat Tree Networks},
 booktitle = {Proceedings of the 27th International ACM International Conference on Supercomputing},
 series = {ICS '13},
 year = {2013},
 isbn = {978-1-4503-2130-3},
 location = {Eugene, Oregon, USA},
 pages = {139--148},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2464996.2465434},
 doi = {10.1145/2464996.2465434},
 acmid = {2465434},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {all-to-all, bandwidth optimality, fat tree networks},
} 

@article{       Gibson:07:Failure,
                Author = {G Gibson and B Schroeder and J Digney},
                Journal = {{CTW}atch Quarterly},
                Title = {Failure Tolerance in Petascale Computers},
                Volume = {3},
                Year = {2007}
}

@article{Bartok:2010:Gaussian,
        title={Gaussian approximation potentials: the accuracy of quantum mechanics, without the
                  electrons},
        author={Bart{\'o}k, A.P. and Payne, M.C. and Kondor, R. and Cs{\'a}nyi, G.},
        journal={Physical review letters},
        volume={104},
        number={13},
        pages={136403},
        year={2010},
        publisher={APS}
}


@incollection{Bland:12:ULFM,
  year		= {2012},
  isbn		= {978-3-642-33517-4},
  booktitle	= {Recent Advances in the Message Passing Interface},
  volume	= {7490},
  series	= {Lecture Notes in Computer Science},
  editor	= {Tr\"aff, Jesper Larsson and Benkner, Siegfried and
		   Dongarra, Jack J.},
  title		= {An Evaluation of User-Level Failure Mitigation Support in
		   MPI},
  publisher	= {Springer Berlin Heidelberg},
  author	= {Bland, Wesley and Bouteiller, Aurelien and
		   Herault, Thomas and Hursey, Joshua and Bosilca, George and
		   Dongarra, Jack J.},
  pages		= {193-203}
}

@InProceedings{Widener:2013:Asking,
  author = 	 {Patrick Widener and Kurt Ferreira and Scott Levy and Patrick G. Bridges and Dorian Arnold and Ron Brightwell},
  title = 	 {Asking the right questions: benchmarking fault-tolerant extreme-scale systems},
  booktitle = {Proc. 6th Workshop on Resiliency in High Performance Computing},
  year = 	 2013,
  month = 	 {August},
  address = 	 {Aachen, Germany},
  note = 	 {{in conjunction with Euro-Par 2013}}}

@InProceedings{xxxWidener:2013:Asking,
  title = 	 {Blinded for review process}
}

@INPROCEEDINGS{ Alvisi:99:Analysis, 
        author={Alvisi, L. and Elnozahy, E. and Rao, S. and Husain, S.A. and de Mel, A.}, 
        booktitle={Fault-Tolerant Computing, 1999. Digest of Papers. Twenty-Ninth Annual
                International Symposium on}, 
        title={An analysis of communication induced checkpointing}, 
        year={1999}, 
        pages={242-249}, 
        keywords={distributed programming;protocols;system recovery;CIC;CIC protocols;distributed
                computation;independent checkpoints;Analytical models;Checkpointing;Computational
                        modeling;Electrical capacitance
                        tomography;Protocols;Prototypes;Scalability;Virtual prototyping}, 
        doi={10.1109/FTCS.1999.781058}, 
        ISSN={0731-3071},
}

@InProceedings{ Bronevetsky:09:Compiler,
  author        = "Greg Bronevetsky and Daniel Marques and Keshav Pingali and Sally McKee
                   and Radu Rugina",
  title         = "Compiler-enhanced incremental checkpointing for OpenMP
                   applications",
  booktitle     = "IEEE International Symposium on Parallel\&Distributed
                   Processing",
  year          = "2009",
  isbn          = "978-1-4244-3751-1",
  pages         = "1--12",
  numpages      = "12"
}

@article{ Ibtesham:12:Compression,
  author        = {Dewan Ibtesham and Dorian Arnold and Patrick G. Bridges and
                   Kurt B. Ferreira and Ron Brightwell},
  title         = {On the Viability of Compression for Reducing the Overheads of
                   Checkpoint/Restart-Based Fault Tolerance},
  journal       = {2012 41st International Conference on Parallel Processing},
  volume        = {0},
  issn          = {0190-3918},
  year          = {2012},
  pages         = {148-157},
  doi           = {http://doi.ieeecomputersociety.org/10.1109/ICPP.2012.45},
  publisher     = {IEEE Computer Society},
  address = {Los Alamitos, CA, USA},
}

@InProceedings{ Moody:10:SCR,
  title         = "Design, Modeling, and Evaluation of a Scalable Multi-level Checkpointing
                   System",
  booktitle     = "ACM/IEEE International Conference for High Performance
                   Computing, Networking, Storage and Analysis (SC '10)",
  author        = "Adam Moody and Greg Bronevetsky and Kathryn Mohror and
                   Bronis R. de Supinski",
  pages         = "1--11",
  year          = "2010",
  isbn          = "978-1-4244-7559-9",
  acmid         = "1884666",
  numpages      = "11"
}

@inproceedings{ Dong:2009:Leveraging,
  author        = {Dong, Xiangyu and Muralimanohar, Naveen and Jouppi, Norm and
                   Kaufmann, Richard and Xie, Yuan},
  title         = {Leveraging 3D PCRAM technologies to reduce checkpoint overhead for
                   future exascale systems},
  booktitle     = {Proceedings of the Conference on High Performance Computing
                   Networking, Storage and Analysis},
  series        = {SC '09},
  year          = {2009},
  isbn          = {978-1-60558-744-8},
  location      = {Portland, Oregon},
  pages         = {57:1--57:12},
  articleno     = {57},
  numpages      = {12},
  acmid         = {1654117},
  publisher     = {ACM},
  address       = {New York, NY, USA},
} 

@inproceedings{ Kannan:2013:Optimizing,
  author        = {Kannan, Sudarsun and Gavrilovska, Ada and Schwan, Karsten and
                   Milojicic, Dejan },
  title         = {Optimizing Checkpoints Using NVM as Virtual Memory},
  booktitle     = {Proceedings of the nternational Parallel and
                   Distributed Processing Symposium},
  series        = {IPDPS '13},
  year          = {2013},
  location      = {Boston, Mass., USA},
  publisher     = {ACM},
  address = {New York, NY,USA},
} 

@inproceedings{ Riesen:2012:Alleviating,
  author        = {Riesen, Rolf and Ferreira, Kurt and Da Silva, Dilma and Lemarinier, Pierre and
                   Arnold, Dorian and Bridges, Patrick G.},
  title         = {Alleviating scalability issues of checkpointing protocols},
  booktitle     = {Proceedings of the International Conference on High Performance Computing,
                   Networking, Storage and Analysis},
  series        = {SC '12},
  year          = {2012},
  isbn          = {978-1-4673-0804-5},
  location      = {Salt Lake City, Utah},
  pages         = {18:1--18:11},
  articleno     = {18},
  numpages      = {11},
  url           = {http://dl.acm.org/citation.cfm?id=2388996.2389021},
  acmid         = {2389021},
  publisher     = {{IEEE} Computer Society Press},
  address       = {Los Alamitos, CA, {USA}},
} 

@article{Ibtesham12Compression,
        author = {Dewan Ibtesham and Dorian Arnold and Patrick G. Bridges and Kurt B. Ferreira and
                Ron Brightwell},
        title = {On the Viability of Compression for Reducing the Overheads of
                Checkpoint/Restart-Based Fault Tolerance},
        journal ={2012 41st International Conference on Parallel Processing},
        volume = {0},
        issn = {0190-3918},
        year = {2012},
        pages = {148-157},
        doi = {http://doi.ieeecomputersociety.org/10.1109/ICPP.2012.45},
        publisher = {IEEE Computer Society},
        address = {Los Alamitos, CA, USA},
}

@inproceedings{ Hoefler:2007:Netgauge,
  author        = {T. Hoefler and T. Mehlan and A. Lumsdaine and W. Rehm},
  title         = {{Netgauge: A Network Performance Measurement Framework}},
  year          = {2007},
  month         = {Sep.},
  pages         = {659-671},
  volume        = {4782},
  booktitle     = {Proceedings of High Performance Computing and Communications,
                   {HPCC'07}},
  location      = {Houston, USA},
  publisher     = {Springer},
  isbn          = {978-3-540-75443-5},
  source        = {http://www.unixer.de/~htor/publications/},
}

@misc{          Netgauge-website,
  author        = {{T. Hoefler}},
  title         = {Netgauge - A Network Performance Measurement Toolkit},
  month         = {Apr.~10},
  year          = {2013},
  howpublished = {\url{http://www.unixer.de/research/netgauge/}},
}

@inproceedings{ Hoefler:2010:LogGOPsim,
  author        = {T. Hoefler and T. Schneider and A. Lumsdaine},
  title         = {{LogGOPSim - Simulating Large-Scale Applications in the LogGOPS Model}},
  year          = {2010},
  month         = {Jun.},
  pages         = {597--604},
  booktitle     = {Proceedings of the 19th ACM International Symposium on High
                   Performance Distributed Computing},
  location      = {Chicago, Illinois},
  publisher     = {ACM},
  isbn          = {978-1-60558-942-8},
  source        = {\url{http://www.unixer.de/~htor/publications/}},
}

@inproceedings{ xxxHoefler:2010:LogGOPsim,
  title         = {Blinded for review process}
}

@inproceedings{ xxxHoefler:2010:Goal,
  title         = {Blinded for review process}
}

@inproceedings{ Hoefler:2010:Characterizing,
  author        = {T. Hoefler and T. Schneider and A. Lumsdaine},
  title         = {{Characterizing the Influence of System Noise on Large-Scale Applications by
                    Simulation}},
  year          = {2010},
  month         = {Nov.},
  booktitle     = {International Conference for High Performance Computing, Networking,
                   Storage and Analysis (SC'10)},
  source        = {\url{http://www.unixer.de/~htor/publications/}},
}

@inproceedings{ xxxHoefler:2010:Characterizing,
  title         = {Blinded for review process}
}

@misc{          LogGOPsim-website,
  author        = {{T. Hoefler}},
  title         = {{LogGOPSim - A LogGOPS (LogP, LogGP, LogGPS) Simulator and Simulation Framework}},
  month         = {Apr.~10},
  year          = {2013},
  howpublished = {\url{http://www.unixer.de/research/LogGOPSim/}},
}

@misc{          LAMMPS_web,
  title         = {{LAMMPS} Molecular Dynamics Simulator},
  author        = {{Sandia National Laboratory}},
  month         = {Apr.~10},
  howpublished  = {\url{http://lammps.sandia.gov}},
  year          = {2013},
}

@inproceedings{ Guermouche:2012:HydEE,
  author        = {Amina Guermouche and Thomas Ropars and Marc Snir and
                   Franck Cappello},
  title         = {Hyd{EE}: Failure Containment without Event Logging for Large
                   Scale Send-Deterministic MPI Applications},
  booktitle     = {IPDPS},
  year          = {2012},
  pages         = {1216-1227},
  ee            = {http://doi.ieeecomputersociety.org/10.1109/IPDPS.2012.111},
  crossref      = {DBLP:conf/ipps/2012},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/ipps/2012,
  title         = {26th IEEE International Parallel and Distributed Processing
                   Symposium, IPDPS 2012, Shanghai, China, May 21-25, 2012},
  booktitle     = {IPDPS},
  publisher     = {IEEE Computer Society},
  year          = {2012},
  isbn          = {978-1-4673-0975-2},
  ee            = {http://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=6266782},
  bibsource     = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{ Ropars:2011:On,
  author        = {Thomas Ropars and Amina Guermouche and
                   Bora U\c{c}ar and Esteban Meneses and
                   Laxmikant V. Kal{\'e} and Franck Cappello},
  title         = {On the Use of Cluster-Based Partial Message Logging to Improve
                   Fault Tolerance for MPI HPC Applications},
  booktitle     = {Euro-Par (1)},
  year          = {2011},
  pages         = {567-578},
  ee            = {http://dx.doi.org/10.1007/978-3-642-23400-2_53},
  crossref      = {DBLP:conf/europar/2011-1},
  bibsource     = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/europar/2011-1,
  editor        = {Emmanuel Jeannot and Raymond Namyst and Jean Roman},
  title         = {Euro-Par 2011 Parallel Processing - 17th International Conference,
                   Euro-Par 2011, Bordeaux, France, August 29 - September 2,
                   2011, Proceedings, Part I},
  booktitle     = {Euro-Par (1)},
  publisher     = {Springer},
  series        = {Lecture Notes in Computer Science},
  volume        = {6852},
  year          = {2011},
  isbn          = {978-3-642-23399-9},
  ee            = {http://dx.doi.org/10.1007/978-3-642-23400-2},
  bibsource     = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{ Sridharan:2012:Study,
  author        = {Sridharan, Vilas and Liberty, Dean},
  title         = {A study of DRAM failures in the field},
  booktitle     = {Proceedings of the International Conference on High Performance Computing,
                   Networking, Storage and Analysis},
  series        = {SC '12},
  year          = {2012},
  isbn          = {978-1-4673-0804-5},
  location      = {Salt Lake City, Utah},
  pages         = {76:1--76:11},
  articleno     = {76},
  numpages      = {11},
  url           = {http://dl.acm.org/citation.cfm?id=2388996.2389100},
  acmid         = {2389100},
  publisher     = {IEEE Computer Society Press},
  address       = {Los Alamitos, CA, USA},
  keywords      = {DRAM, hard error, memory, reliability, single-event upset, soft
                   error},
} 

@Misc{ ElytraPbzip2,
        author = "Jeff Gilchrist Elytra",
        title = "Parallel Data Compression With Bzip2",
	howpublished = {\url{http://http://gilchrist.ca/jeff/papers/Parallel_BZIP2.pdf}},
}

@Misc{		  mpC,
    author	= {{ATS Software}},
    title	= {mp{C} {W}orkshop},
    note	= {http://www.atssoft.com/products/mpcworkshop.htm},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

Electronic{ Barney:11:Introduction,
	author = "Blaise Barney",
	title = "Introduction to Livermore Computing Resources",
	month = "August",
	year = "2011",
	url = "http://computing.llnl.gov/tutorials/lc_resources"
}
@InProceedings{	  Abawajy04FaultDetectionArchitecture,
    author	= {J.H. Abawajy},
    title	= {Fault Detection Service Architecture for Grid Computing
		  Systems},
    booktitle	= {Resource Management and Scheduling Techniques for Cluster
		  and Grid Computing Systems Workshop in conjunction with the
		  2004 International Conference on Computational Science and
		  its Applications (ICCSA 2004)},
    month	= {May},
    year	= {2004},
    pages	= {107--115},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Abawajy04FaultDetectionArchitecture.pdf}
		  ,
    abstract	= {The ability to tolerate failures while effectively
		  exploiting the grid computing resources in an scalable and
		  transparent manner must be an integral part of grid
		  computing infrastructure. Hence, fault-detection service is
		  a necessary prerequisite to fault tolerance and fault
		  recovery in grid computing. To this end, we present an
		  scalable fault detection service architecture. The proposed
		  fault-detection system provides services that monitors user
		  applications, grid middlewares and the dynamically changing
		  state of a collection of distributed resources. It reports
		  summaries of this information to the appropriate agents on
		  demand or instantaneously in the event of failures.},
    file	= {Abawajy04FaultDetectionArchitecture.pdf:Abawajy04FaultDetectionArchitecture.pdf:PDF}
		  ,
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  Fx2,
    author	= {{Absoft}},
    title	= {{Fx2 Debugging Solution for Fortran, C/C++ Compilers}},
    url		= {http://www.absoft.com/Products/Debuggers/fx2/fx2_debugger.html}
		  ,
    note	= {http://www.absoft.com/Products/Debuggers/fx2/fx2\\\\\\\\\_debugger.html}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Agbaria99Starfish,
    author	= {Adnan Agbaria and Roy Friedman},
    title	= {Starfish: Fault-Tolerant Dynamic {MPI} Programs on
		  Clusters of Workstations},
    booktitle	= {8th IEEE International Symposium on High Performance
		  Distributed Computing},
    month	= {August},
    year	= {1999},
    address	= {Redondo Beach, CA},
    category	= {Fault Tolerance and Fault Tolerant MPI},
    date	= {3-6},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Aguilera97Heartbeat,
    author	= {Marcos K. Aguilera and Wei Chen and Sam Toueg},
    title	= {Heartbeat: A Timeout-free Failure Detector for Quiescent
		  Reliable Communication},
    booktitle	= {11th International Workshop on Distributed Algorithms (WDA
		  '97)},
    month	= {September},
    year	= {1997},
    pages	= {126--140},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Aguilera97Heartbeat.pdf}
		  ,
    abstract	= {We study the problem of achieving reliable communication
		  with quiescent algorithms (i.e. algorithms that eventually
		  stop sending messages) in asynchronous systems with process
		  crashes and lossy links. We first show that it is
		  impossible to solve this problem without failure detectors.
		  We then show how to solve it using a new failure detector,
		  called heartbeat. In contrast to previous failure detectors
		  that have been used to circumvent impossibility results,
		  the heartbeat failure detector is implementable, and its
		  implementation does not use timeouts. These results have
		  wide applicability: they can be used to transform many
		  existing algorithms that tolerate only process crashes into
		  quiescent algorithms that tolerate both process crashes and
		  message losses. This can be applied to consensus, atomic
		  broadcast, k-set agreement, atomic commitment, etc. The
		  heartbeat failure detector is novel: besides being
		  implementable without timeouts, it does not output lists of
		  suspects as typical failure detectors do. If we restrict
		  failure detectors to output only lists of suspects,
		  quiescent reliable communication requires , which is not
		  implementable. Combined with the results of this paper,
		  this shows that traditional failure detectors that output
		  only lists of suspects have fundamental limitations.},
    file	= {Aguilera97Heartbeat.pdf:Aguilera97Heartbeat.pdf:PDF},
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@misc{Ahern2011Scientific,
  title={{Scientific discovery at the exascale: report from the DOE ASCR 2011 workshop on exascale data management, analysis, and visualization}},
  author={Ahern, Sean and Shoshani, Arie and Ma, Kwan-Liu and Choudhary, Alok and Critchlow, Terence and Klasky, Scott and Pascucci, Valerio and Ahrens, Jim and Bethel, Wes and Childs, Hank and others},
  year={2011}
}

@InProceedings{	  Ahn02ScalableAnalysis,
    author	= {Dong H. Ahn and Jeffrey S. Vetter},
    title	= {{Scalable Analysis Techniques for Microprocessor
		  Performance Counter Metrics}},
    booktitle	= {SC '02},
    year	= {2002},
    address	= {Baltimore, MD},
    pages	= {1--16},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Ahn:07:2-step,
    author	= {Ahn, Jinho},
    title	= {2-step algorithm for enhancing effectiveness of
		  sender-based message logging},
    booktitle	= {SpringSim '07: Proceedings of the 2007 spring simulation
		  multiconference},
    year	= {2007},
    pages	= {429--434},
    url		= {http://portal.acm.org/citation.cfm?id=1404748},
    annote	= {This paper is hard to read because of its poor English.
		  The idea behind message logging is to be able to replay
		  messages since the last checkpoint. This allows failed
		  processes to restart from the last checkpoint and catch up
		  to the processes that did not fail. For this to work,
		  messages must be logged by the sender or the receiver.
		  Receiver logging has high overhead, since the messages must
		  be sent to stable storage in case the receiver fails.
		  
		  Sender-based message logging is more efficient, but
		  requires local, volatile storage. A protocol is needed to
		  inform the sender when it no longer needs to retain old
		  messages (garbage collection). An algorithm is also needed
		  to send logged messages to stable storage when local
		  storage on the send side becomes scarce. This paper
		  describes such an algorithm. See
		  also~\cite{Jiang:07:Optimistic}.},
    abstract	= {Sender-based message logging allows each message to be
		  logged in the volatile storage of its corresponding sender.
		  This behavior avoids logging messages on the stable storage
		  and results in lower failure-free overhead than
		  receiver-based message logging. However, in the message
		  logging approach, each process should keep in its limited
		  volatile storage the log information of its sent messages
		  for recovering their receivers. In this paper, we propose a
		  2-step algorithm to efficiently remove logged messages from
		  the volatile storage while ensuring the consistent recovery
		  of the system in case of process failures. As the first
		  step, the algorithm eliminates useless log information in
		  the volatile storage with no extra message and forced
		  checkpoint. But, even if the step has been performed, the
		  more empty buffer space for logging messages in future may
		  be required. In this case, the second step forces the
		  useful log information to become useless by maintaining a
		  vector to record the size of the information for every
		  other process. This behavior incurs fewer additional
		  messages and forced checkpoints than existing algorithms.},
    isbn	= {1-56555-313-6},
    location	= {Norfolk, Virginia}
}

@InProceedings{	  Ahn08LaunchMON,
    author	= {Dong H. Ahn and Dorian C. Arnold and Bronis R. de Supinski
		  and Gregory L. Lee and Barton P. Miller and Martin Schulz},
    title	= {{Overcoming Scalability Challenges for Tool Daemon
		  Launching}},
    booktitle	= {37th International Conference on Parallel Processing},
    year	= {2008},
    address	= {Washington, DC, USA},
    pages	= {578--585},
    publisher	= {IEEE Computer Society},
    series	= {ICPP '08},
    url		= {http://dx.doi.org/10.1109/ICPP.2008.63},
    abstract	= {Many tools that target parallel and distributed
		  environments must co-locate a set of daemons with the
		  distributed processes of the target application. However,
		  efficient and portable deployment of these daemons on large
		  scale systems is an unsolved problem. We overcome this gap
		  with LaunchMON, a scalable, robust, portable, secure, and
		  general purpose infrastructure for launching tool daemons.
		  Its API allows tool builders to identify all processes of a
		  target job, launch daemons on the relevant nodes and
		  control daemon interaction. Our results show that LaunchMON
		  scales to very large daemon counts and substantially
		  enhances performance over existing ad hoc mechanisms.},
    acmid	= {1442464},
    doi		= {http://dx.doi.org/10.1109/ICPP.2008.63},
    isbn	= {978-0-7695-3374-2},
    keywords	= {API, ad hoc mechanisms, daemon interaction control,
		  daemons portable deployment, distributed environments,
		  distributed processes, large scale systems, parallel
		  environments, tool daemon launching, application program
		  interfaces, large-scale systems, parallel processing,
		  software tools},
    numpages	= {8},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Kiswany08stdchk,
    author	= {S. Al-Kiswany and M. Ripeanu and S.S. Vazhkudai and A.
		  Gharaibeh},
    title	= {stdchk: A Checkpoint Storage System for Desktop Grid
		  Computing},
    booktitle	= {Distributed Computing Systems, 2008. ICDCS '08. The 28th
		  International Conference on},
    month	= {june},
    year	= {2008},
    volume	= {},
    number	= {},
    pages	= {613--624},
    issn	= {1063-6927},
    keywords	= {checkpointing, checkpoint storage system, data management,
		  desktop grid computing, fault tolerance, grid computing,
		  scavenged disk space, software fault tolerance, stdchk,
		  storage management, traditional file system},
    doi		= {10.1109/ICDCS.2008.19}
}

@Article{	  Alexandrov97LogGP,
    author	= {Albert Alexandrov and Mihai F. Ionescu and Klaus E.
		  Schauser and Chris Scheiman},
    title	= {LogGP: Incorporating Long Messages into the LogP Model for
		  Parallel Computation},
    journal	= {Journal of Parallel and Distributed Computing},
    year	= {1997},
    volume	= {44},
    number	= {1},
    pages	= {71--79},
    url		= {citeseer.ist.psu.edu/alexandrov95loggp.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Almeida96Timing,
    author	= {Carlos Almeida and Paulo Verissimo},
    title	= {Timing Failure Detection and Real-time Group Communication
		  in Real-time Systems},
    booktitle	= {8th Euromicro Workshop on Real-Time Systems},
    month	= {June},
    year	= {1996},
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Alsberg76Resilience,
    author	= {Peter A. Alsberg and John D. Day},
    title	= {A Principle for Resilient Sharing of Distributed
		  Resources},
    booktitle	= {2nd International Conference on Software Engineering (ICSE
		  '76)},
    year	= {1976},
    address	= {San Francisco, CA},
    pages	= {562--570},
    publisher	= {IEEE Computer Society Press},
    owner	= {darnold},
    paddress	= {Los Alamitos, CA},
    timestamp	= {2011.06.26}
}

@Article{	  Alvisi:98:Message,
    author	= {Alvisi, Lorenzo and Marzullo, Keith},
    title	= {Message Logging: Pessimistic, Optimistic, Causal, and
		  Optimal},
    journal	= {IEEE Trans. Softw. Eng.},
    month	= feb,
    year	= {1998},
    volume	= {24},
    number	= {2},
    pages	= {149--159},
    abstract	= {Message-logging protocols are an integral part of a
		  popular technique for implementing processes that can
		  recover from crash failures. All message-logging protocols
		  require that, when recovery is complete, there be no orphan
		  processes, which are surviving processes whose states are
		  inconsistent with the recovered state of a crashed process.
		  We give a precise specification of the consistency property
		  ``no orphan processes.'' From this specification, we
		  describe how different existing classes of message-logging
		  protocols (namely optimistic, pessimistic, and a class that
		  we call causal) implement this property. We then propose a
		  set of metrics to evaluate the performance of
		  message-logging protocols, and characterize the protocols
		  that are optimal with respect to these metrics. Finally,
		  starting from a protocol that relies on causal delivery
		  order, we show how to derive optimal causal protocols that
		  tolerate f overlapping failures and recoveries for a
		  parameter $f : 1 \leq f \leq n$.},
    issue_date	= {February 1998},
    issn	= {0098-5589},
    numpages	= {11},
    doi		= {10.1109/32.666828},
    acmid	= {631222}
}

@inproceedings{alvisi99cic,
  title={An analysis of communication induced checkpointing},
  author={Alvisi, Lorenzo and Elnozahy, Elmootazbellah and Rao, Sriram and Husain, Syed Amir and De Mel, Asanka},
  booktitle={Fault-Tolerant Computing, 1999. Digest of Papers. Twenty-Ninth Annual International Symposium on},
  pages={242--249},
  year={1999},
  organization={IEEE}
}


@InProceedings{	  Alvisi01WrappingServerSideTCP,
    author	= {Lorenzo Alvisi and Thomas C. Bressoud and Ayman El-Khashab
		  and Keith Marzullo and Dmitrii Zagorodnov},
    title	= {Wrapping Server-Side TCP to Mask Connection Failures},
    booktitle	= {IEEE INFOCOM},
    month	= {April},
    year	= {2001},
    address	= {Anchorage, Alaska},
    pages	= {329--337},
    url		= {citeseer.ist.psu.edu/article/alvisi01wrapping.html},
    file	= {Alvisi01WrappingServerSideTCP.pdf:Alvisi01WrappingServerSideTCP.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  Amarasinghe:09:Exascale,
    author	= {Saman Amarasinghe and et al.},
    editor	= {Vivek Sarkar},
    title	= {ExaScale Software Study: Software Challenges in Extreme
		  Scale Systems},
    month	= sep,
    year	= {2009},
    howpublished = {\url{http://users.ece.gatech.edu/mrichard/ExascaleComputingStudyReports/ECSS%20report%20101909.pdf}}
		  ,
    day		= {28}
}

@InProceedings{	  Aminian:06:Coordinated,
    author	= {Aminian, Mehdi and Akbari, Mohammad K. and Javadi,
		  Bahman},
    title	= {Coordinated checkpoint from message payload in pessimistic
		  sender-based message logging},
    booktitle	= {Proceedings of the 20th international conference on
		  Parallel and distributed processing},
    year	= {2006},
    address	= {Washington, DC, USA},
    pages	= {312--312},
    publisher	= {IEEE Computer Society},
    series	= {IPDPS'06},
    abstract	= {Execution of MPI applications on Clusters and Grid
		  deployments suffers from node and network failure that
		  motivates the use of fault tolerant MPI implementations.
		  Two category techniques have been introduced to make these
		  systems fault-tolerant. The first one is checkpointbased
		  technique and the other one is called log-based recovery
		  protocol. Sender-based pessimistic logging which falls in
		  the second category is harnessing from huge amount of
		  messages payloads which must be kept in volatile memory. In
		  this paper we present a Coordinated Checkpoint from Message
		  Payload (CCMP) to reduce the aforementioned overhead. The
		  proposed method was examined by MPICH-V2, a public domain
		  platform implementing pessimistic logging with
		  uncoordinated checkpoint. Experimental results demonstrated
		  the reduction of run-time for NPB benchmarks in both
		  faultfree and faulty environments.},
    isbn	= {1-4244-0054-6},
    location	= {Rhodes Island, Greece},
    numpages	= {1},
    acmid	= {1898845}
}

@InProceedings{	  Amir03ReliableCommunication,
    author	= {Yair Amir and Claudiu Danilov},
    title	= {Reliable Communication in Overlay Networks},
    booktitle	= {International Conference on Dependable Systems and
		  Networks (DSN03)},
    month	= {June},
    year	= {2003},
    address	= {San Francisco CA},
    pages	= {511--520},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Andersen2001RON,
    author	= {David G. Andersen and Hari Balakrishnan and M. Frans
		  Kaashoek and Robert Morris},
    title	= {Resilient Overlay Networks},
    journal	= {18th ACM Symposium on Operating Systems Principles (SOSP
		  '01)},
    month	= {October},
    year	= {2001},
    address	= {Banff, Alberta, Canada},
    pages	= {131--145},
    publisher	= {ACM Press},
    dates	= {21--24},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Anderson97ClusterMonitoring,
    author	= {Eric Anderson and David A. Patterson},
    title	= {Extensible, Scalable Monitoring for Clusters of
		  Computers},
    booktitle	= {11th Systems Administration Conference (LISA 97)},
    month	= {October},
    year	= {1997},
    address	= {San Diego, CA},
    pages	= {9--16},
    dates	= {26-31},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Andrews91ProcessInteraction,
    author	= {Gregory R. Andrews},
    title	= {Paradigms for process interaction in distributed
		  programs},
    journal	= {ACM Computing Surveys},
    year	= {1991},
    volume	= {23},
    pages	= {49--90},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Armstrong92Multicast,
    author	= {Susan M. Armstrong and Alan O. Freier and Keith A.
		  Marzullo},
    title	= {Multicast Transport Protocol},
    month	= {February},
    year	= {1992},
    number	= {1301},
    institution	= {RFC},
    organization = {Internet RFC},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Arnold06TBONs,
    author	= {Dorian C. Arnold and Gary D. Pack and Barton P. Miller},
    title	= {Tree-based Computing for Scalable Applications},
    booktitle	= {11th International Workshop on High-Level Parallel
		  Programming Models and Supportive Environments},
    month	= {April},
    year	= {2006},
    address	= {Rhodes, Greece},
    dates	= {25},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Arnold07STAT,
    author	= {Dorian C. Arnold and Dong H. Ahn and Bronis R. de Supinski
		  and Gregory Lee and Barton P. Miller and Martin Schulz},
    title	= {Stack Trace Analysis for Large Scale Applications},
    booktitle	= {21st IEEE International Parallel \& Distributed Processing
		  Symposium (IPDPS '07)},
    month	= {March},
    year	= {2007},
    address	= {Long Beach, CA},
    date	= {26--30},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@PhDThesis{	  Arnold08ScalableReliability,
    author	= {Dorian C. Arnold},
    title	= {Scalable Reliability for Tree-based Overlay Networks},
    year	= {2008},
    school	= {The University Of Wisconsin Madison}
}

@InProceedings{	  Aron99EfficientSupportPHTTP,
    author	= {Mohit Aron and Peter Druschel and Willy Zwaenepoel},
    title	= {Efficient Support for P-HTTP in Cluster-Based Web
		  Servers},
    booktitle	= {Second Usenix Symposium on Mobile and Location-dependent
		  Computing},
    year	= {1999},
    pages	= {185--198},
    url		= {citeseer.ist.psu.edu/aron99efficient.html},
    file	= {Aron99EfficientSupportPHTTP.pdf:Aron99EfficientSupportPHTTP.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Atwood96Xpress,
    author	= {J. William Atwood and Octavian Catrina and John Fenton and
		  W. Timothy Strayer},
    title	= {Reliable Multicasting in the Xpress Transport Protocol},
    booktitle	= {21st Local Computer Networks},
    month	= {October},
    year	= {1996},
    address	= {Minneapolis, MN},
    pages	= {202--211},
    url		= {citeseer.nj.nec.com/atwood96reliable.html},
    dates	= {13-16},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Atwood04Classification,
    author	= {J.W. Atwood},
    title	= {A Classification of Reliable Multicast Protocols},
    journal	= {IEEE Network},
    month	= {May--June},
    year	= {2004},
    volume	= {18},
    number	= {3},
    pages	= {24--34},
    abstract	= {The range of user requirements on multicast protocols is
		  so wide that no single protocol will ever satisfy them. The
		  set of multicast protocols can be classified using the user
		  requirements, and the architectures, mechanisms,
		  communications patterns, and policies used to satisfy these
		  requirements. We provide such a classification, and
		  illustrate it with several example protocols chosen to
		  cover the range of features described.},
    file	= {Atwood04Classification.pdf:Atwood04Classification.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Aulwes04LA-MPI,
    author	= {R.T. Aulwes and D.J. Daniel and N.N. Desai and R.L. Graham
		  and L.D. Risinger and M.A. Taylor and T.S. Woodall and M.W.
		  Sukalski},
    title	= {Architecture of {LA-MPI}, a Network-fault-tolerant {MPI}},
    booktitle	= {18th International Parallel and Distributed Processing
		  Symposium},
    month	= {April},
    year	= {2004},
    pages	= {15--24},
    abstract	= {We discuss the unique architectural elements of the Los
		  Alamos Message Passing Interface (LA-MPI), a
		  high-performance, network-fault-tolerant, thread-safe MPI
		  library. LA-MPI is designed for use on terascale clusters
		  which are inherently unreliable due to their sheer number
		  of system components and tradeoffs between cost and
		  performance. We examine in detail the design concepts used
		  to implement LA-MPI. These include reliability features,
		  such as applicationlevel checksumming, message
		  retransmission, and automatic message re-routing. Other key
		  performance enhancing features, such as concurrent message
		  routing over multiple, diverse network adapters and
		  protocols, and communication-speci c optimizations (e.g.,
		  shared memory) are examined.},
    dates	= {26-30},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  CMS,
    author	= {Paul Avery and Ian Foster},
    title	= {GriPhyN Annual Report for 2001 -- 2002},
    month	= {June},
    year	= {2002},
    address	= {Available at http://www.griphyn.org},
    number	= {2002-22},
    institution	= {GriPhyN},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Avizienis01Fundamental,
    author	= {Algirdas Avizienis and Jean-Clause Laprie and Brian
		  Randell},
    title	= {Fundamental Concepts of Dependability},
    month	= {April},
    year	= {2001},
    number	= {010028},
    institution	= {University of CA, Los Angeles},
    url		= {http://citeseer.nj.nec.com/avizienis01fundamental.html},
    department	= {Computer Science Department},
    owner	= {darnold},
    summary	= {notes/Avizienis01Fundamental.txt},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Badrinath00Gathercast,
    author	= {B.R. Badrinath and Pradeep Sudame},
    title	= {Gathercast: the Design and Implementation of a
		  Programmable Aggregation Mechanism for the Internet},
    booktitle	= {9th International Conference on Computer Communications
		  and Networks},
    month	= {October},
    year	= {2000},
    address	= {Las Vegas, NV},
    pages	= {206--213},
    dates	= {16-18},
    file	= {Badrinath00Gathercast.pdf:Badrinath00Gathercast.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Baek04BufferManagement,
    author	= {Sinsuk Baek and J.-F. Paris},
    title	= {A Buffer Management Scheme for Tree-based Reliable
		  Multicast using Infrequent Acknowledgments},
    booktitle	= {23rd IEEE International Performance Computing and
		  Communications Conference},
    month	= {April},
    year	= {2004},
    pages	= {13--20},
    date	= {15--17},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Baker72Gossips,
    author	= {Brenda Baker and Robert Shostaky},
    title	= {Gossips and Telephones},
    journal	= {Discrete Mathematics},
    year	= {1972},
    volume	= {2},
    pages	= {191--193},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bakre95IndirectTCP,
    author	= {Ajay V. Bakre and B. R. Badrinath},
    title	= {Handoff and Systems Support for Indirect TCP/IP},
    booktitle	= {2nd Symposium on Mobile and Location-Independent Computing
		  (MLICS '95) },
    year	= {1995},
    address	= {Berkeley, CA},
    pages	= {11--24},
    publisher	= {USENIX Association},
    isbn	= {1-880446-69-3},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Balazinska05Borealis,
    author	= {Magdalena Balazinska and Hari Balakrishnan and Samuel
		  Madden and Michael Stonebraker},
    title	= {Fault-tolerance in the Borealis Distributed Stream
		  Processing System},
    booktitle	= {SIGMOD International Conference on Management of Data},
    month	= {June},
    year	= {2005},
    address	= {Baltimore, MD},
    pages	= {13--24},
    date	= {14--16},
    doi		= {http://doi.acm.org/10.1145/1066157.1066160},
    isbn	= {1-59593-060-4},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Balle02Ladebug,
    author	= {Susanne M. Balle and Bevin R. Brett and Chih-Ping Chen and
		  David LaFrance-Linden},
    title	= {A New Approach to Parallel Debugger Architecture},
    booktitle	= {Applied Parallel Computing. Advanced Scientific Computing:
		  6th International Conference, PARA 2002},
    month	= {June},
    year	= {2002},
    address	= {Espoo, Finland},
    note	= {Published as Lecture Notes in Computer Science 2367, J.
		  Fagerholm et al (Eds), Springer, Heidelberg, Germany,
		  August 2002, pp. 139-149.},
    dates	= {15-18},
    file	= {Balle02Ygdrasil.pdf:Balle02Ygdrasil.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Balle04Ladebug,
    author	= {Susanne M. Balle and Bevin R. Brett and Chih-Ping Chen and
		  David LaFrance-Linden},
    title	= {{Extending a Traditional Debugger to Debug Massively
		  Parallel Applications}},
    journal	= {Journal of Parallel and Distributed Computing},
    year	= {2004},
    address	= {Orlando, FL, USA},
    volume	= {64},
    number	= {5},
    pages	= {617--628},
    publisher	= {Academic Press, Inc.},
    doi		= {http://dx.doi.org/10.1016/j.jpdc.2004.03.012},
    issn	= {0743-7315},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InBook{	  Balle06Ygdrasil,
    author	= {Susanne M. Balle and John Bishop and David LaFrance-Linden
		  and Howard Rifkin},
    title	= {Applied Parallel Computing},
    month	= {February},
    year	= {2006},
    volume	= {3732/2006},
    pages	= {207--216},
    publisher	= {Springer},
    series	= {Lecture Notes in Computer Science},
    chapter	= {2},
    article	= {Ygdrasil: Aggregator Network Toolkit for Large Scale
		  Systems and the Grid},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Banatre:96:Architecture,
    author	= {Ban\^{a}tre, M. and Gefflaut, A. and Joubert, P. and
		  Morin, C. and Lee, P.A.},
    title	= {An architecture for tolerating processor failures in
		  shared-memory multiprocessors},
    journal	= {Computers, IEEE Transactions on},
    month	= oct,
    year	= {1996},
    volume	= {45},
    number	= {10},
    pages	= {1101--1115},
    abstract	= {This paper focuses on the problem of fault tolerance in
		  shared memory multiprocessors, and describes an
		  architecture designed for transparently tolerating
		  processor failures. The Recoverable Shared Memory (RSM) is
		  the novel component of this architecture, providing a
		  hardware supported backward error recovery mechanism which
		  minimizes the propagation of recovery when a processor
		  fails. The RSM permits a shared memory multiprocessor to be
		  constructed using standard caches and cache coherence
		  protocols, and does not require any changes to be made to
		  applications software. The performance of the recovery
		  scheme supported by the RSM is evaluated and compared with
		  other schemes that have been proposed for fault tolerant
		  shared memory multiprocessors. The performance study has
		  been conducted by simulation using address traces collected
		  from real parallel applications},
    keywords	= {address traces;cache coherence protocols;fault
		  tolerance;hardware supported backward error recovery
		  mechanism;processor failures toleration;recoverable shared
		  memory;shared-memory multiprocessors;simulation;fault
		  tolerant computing;memory protocols;performance
		  evaluation;shared memory systems;},
    doi		= {10.1109/12.543705},
    issn	= {0018-9340}
}

@InProceedings{	  Banerjee02NICE,
    author	= {Suman Banerjee and Bobby Bhattacharjee and Christopher
		  Kommareddy},
    title	= {Scalable application layer multicast},
    booktitle	= {SIGCOMM '02: Proceedings of the 2002 conference on
		  Applications, technologies, architectures, and protocols
		  for computer communications},
    year	= {2002},
    address	= {New York, NY, USA},
    pages	= {205--217},
    publisher	= {ACM},
    doi		= {http://doi.acm.org/10.1145/633025.633045},
    isbn	= {1-58113-570-X},
    location	= {Pittsburgh, Pennsylvania, USA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

_markedentry = "[darnold]",
	issn = "0018-9448",
	owner = "darnold",
	timestamp = "2011.06.27"
}
@InBook{	  Barbara01ID-DataMining,
    editor	= {Daniel Barbara},
    title	= {Special Section on Data Mining for Intrusion Detection and
		  Threat Analysis},
    month	= {December},
    year	= {2001},
    address	= {New York, NY},
    volume	= {30(4)},
    pages	= {4--64},
    publisher	= {ACM Press},
    series	= {ACM SIGMOD Record},
    issn	= {0163-5808},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Barborak:93:consensus,
    author	= {Barborak, Michael and Dahbura, Anton and Malek, Miroslaw},
    title	= {The consensus problem in fault-tolerant computing},
    journal	= {ACM Comput. Surv.},
    year	= {1993},
    volume	= {25},
    number	= {2},
    pages	= {171--220},
    annote	= {We are hoping that a RAS system will tell us when a
		  component has failed and we need to do something to
		  recover. This paper explains what the RAS system must do,
		  or ourselves in some situations. It is also a nice paper in
		  the sense that it gives clear definitions for the different
		  types of faults. We need these when we describe what our
		  system can, or cannot, handle.},
    abstract	= {The consensus problem is concerned with the agreement on a
		  system status by the fault-free segment of a processor
		  population in spite of the possible inadvertent or even
		  malicious spread of disinformation by the faulty segment of
		  that population. The resulting protocols are useful
		  throughout fault-tolerant parallel and distributed systems
		  and will impact the design of decision systems to come.
		  This paper surveys research on the consensus problem,
		  compares approaches, outlines applications, and suggests
		  directions for future work.},
    issn	= {0360-0300},
    doi		= {http://doi.acm.org/10.1145/152610.152612}
}

@InProceedings{	  Barham04Magpie,
    author	= {Paul T. Barham and Austin Donnelly and Rebecca Isaacs and
		  Richard Mortier},
    title	= {{Using Magpie for Request Extraction and Workload
		  Modelling}},
    booktitle	= {OSDI},
    year	= {2004},
    pages	= {259--272},
    bibsource	= {DBLP, http://dblp.uni-trier.de},
    ee		= {http://www.usenix.org/events/osdi04/tech/barham.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bartlett81NonStopKernel,
    author	= {Joel F. Bartlett},
    title	= {A NonStop Kernel},
    booktitle	= {Eighth ACM Symposium on Operating Systems Principles (SOSP
		  '81)},
    year	= {1981},
    address	= {Pacific Grove, CA},
    pages	= {22--29},
    publisher	= {ACM},
    doi		= {http://doi.acm.org/10.1145/800216.806587},
    isbn	= {0-89791-062-1},
    owner	= {darnold},
    paddress	= {New York, NY, USA},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bartlett:81:NonStop,
    author	= {Bartlett, Joel F.},
    title	= {A NonStop kernel},
    booktitle	= {SOSP '81: Proceedings of the eighth ACM symposium on
		  Operating systems principles},
    year	= {1981},
    pages	= {22--29},
    annote	= {Describes the hardware and software of the Tandem system.
		  The hardware helps ensure the fail-stop model and provides
		  mechanisms for fault detection. The system software makes
		  use of these machine characteristics and enables error
		  recovery. Processes are duplicated and mechanisms are in
		  place for the primary process to carry out externally
		  visible events. I/O for example or messages to other
		  processes. The backup process receives all the necessary
		  information from the primary process so it can take over if
		  necessary. The system assists in making sure that requests
		  are retried if necessary but not duplicated.
		  
		  It seems users must explicitly write these process pairs.
		  However, applications written in COBOL do not have (cannot
		  have?) backup processes.},
    abstract	= {The Tandem NonStop System is a fault-tolerant [1],
		  expandable, and distributed computer system designed
		  expressly for online transaction processing. This paper
		  describes the key primitives of the kernel of the operating
		  system. The first section describes the basic hardware
		  building blocks and introduces their software analogs:
		  processes and messages. Using these primitives, a mechanism
		  that allows fault-tolerant resource access, the
		  process-pair, is described. The paper concludes with some
		  observations on this type of system structure and on actual
		  use of the system.},
    isbn	= {0-89791-062-1},
    location	= {Pacific Grove, California, United States},
    doi		= {http://doi.acm.org/10.1145/800216.806587}
}

@InProceedings{	  Bartlett86Tandem,
    author	= {Joel Bartlett and Jim Gray and Bob Horst},
    editor	= {A. Avizienis},
    title	= {Fault Tolerance in Tandem Computer Systems},
    booktitle	= {Symposium on the Evolution of Fault-Tolerant Computing},
    month	= {June},
    year	= {1986},
    address	= {Baden, Austria},
    publisher	= {Springer Verlag},
    abstract	= {Tandem builds single-fault-tolerant computer systems. At
		  the hardware level, the system is designed as a loosely
		  coupled multi-processor with fail-fast modules connected
		  via dual paths. It is designed for online diagnosis and
		  maintenance. A range of CPUs may be inter-connected via a
		  hierarchical fault-tolerant local network. A variety of
		  peripherals needed for online transaction processing are
		  attached via dual ported controllers. A novel disc
		  subsystem allows a choice between low cost-per-megabyte and
		  low cost-per-access. System software provides processes and
		  messages as the basic structuring mechanism. Processes
		  provide software modularity and fault isolation. Process
		  pairs tolerate hardware and transient software failures.
		  Applications are structured as requesting processes making
		  remote procedure calls to server processes. Process server
		  classes utilize multi-processors. The resulting process
		  abstractions provide a distributed system which can utilize
		  thousands of processors. High-level networking protocols
		  such as SNA, OSI, and a proprietary network are built atop
		  this base. A relational database provides distributed data
		  and distributed transactions. An application generator
		  allows users to develop fault-tolerant applications as
		  though the system were a conventional computer. The
		  resulting system has price/performance competitive with
		  conventional systems.},
    file	= {Bartlett86Tandem.pdf:Bartlett86Tandem.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Basso00PRISM,
    author	= {A. Basso and C. Cranor and R. Gopalakrishnan and M. Green
		  and C. Kalmanek and D. Shur and S. Sibal and C. Sreenan and
		  J van der Merwe},
    title	= {PRISM, an IP-based Architecture for Broadband Access to TV
		  and Other Streaming Media},
    booktitle	= {IEEE International Workshop on Network and Operating
		  System Support for Digital Audio and Video (NOSSDAV 2000)},
    month	= {June},
    year	= {2000},
    address	= {Chapel Hill, NC},
    dates	= {26-28},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Batchu01MPIFT,
    author	= {Rajanikanth Batchu and Jothi Neelamegam and Zhenqian Cui
		  and Murali Beddhu and Anthony Skjellum and Yoginder S.
		  Dandassand Manoj Apte},
    title	= {{MPI/FT}: Architecture and Taxonomies for Fault-Tolerant,
		  Message-Passing Middleware for Performance-Portable
		  Parallel Computing,},
    booktitle	= {International Symposium on Cluster Computing and the
		  Grid},
    year	= {2001},
    address	= {Brisbane, Australia},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bent09PLFS,
    author	= {John Bent and Garth Gibson and Gary Grider and Ben
		  McClelland and Paul Nowoczynski and James Nunez and Milo
		  Polte and Meghan Wingate},
    title	= {PLFS: a checkpoint filesystem for parallel applications},
    booktitle	= {Conference on High Performance Computing Networking,
		  Storage and Analysis (SC '09)},
    year	= {2009},
    pages	= {21:1--21:12},
    url		= {http://doi.acm.org/10.1145/1654059.1654081},
    isbn	= {978-1-60558-744-8},
    location	= {Portland, Oregon},
    articleno	= {21},
    numpages	= {12},
    doi		= {http://doi.acm.org/10.1145/1654059.1654081},
    acmid	= {1654081},
    keywords	= {check-pointing, high performance computing, parallel
		  computing, parallel file systems and IO}
}

@InProceedings{	  Bentley76DivideAndConquer,
    author	= {Jon Louis Bentley and Michael Ian Shamos},
    title	= {Divide-and-conquer in Multidimensional Space},
    booktitle	= {ACM Symposium on Theory of Computing (STOC '76)},
    year	= {1976},
    address	= {Hershey, PA},
    pages	= {220--230},
    publisher	= {ACM},
    doi		= {http://doi.acm.org/10.1145/800113.803652},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@techreport{		  Kogge:08:Exascale,
    author	= {Keren Bergman and others},
    editor	= {Peter Kogge},
    title	= {ExaScale Computing Study: Technology Challenges in
		  Achieving Exascale Systems},
    month	= sep,
    institution = {Defense Advanced Research Projects Agency Information
      Processing Techniques Office (DARPA IPTO)},
    year	= {2008},
    day		= {28}
}

@Article{	  Beynon02,
    author	= {Michael Beynon and Chialin Chang and Umit Catalyurek and
		  Tahsin Kurc and Alan Sussman and Henrique Andrade and
		  Renato Ferreira and Joel Saltz},
    title	= {Processing Large-Scale Multidimensional Data in Parallel
		  and Distributed Environments},
    journal	= {Parallel Computing},
    month	= {May},
    year	= {2002},
    volume	= {28},
    number	= {5},
    pages	= {827--859},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bhargava88IndependentCheckpointing,
    author	= {Bharat Bhargava and Shy-Renn Lian},
    title	= {Independent Checkpointing and Concurrent Rollback for
		  Recovery--An Optimistic Approach},
    booktitle	= {Symposium on Reliable Distributed Systems},
    year	= {1988},
    pages	= {3--12},
    file	= {Bhargava88IndependentCheckpointing.pdf:Bhargava88IndependentCheckpointing.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Bhattacharjee00Bistro,
    author	= {Samrat Bhattacharjee and William C. Cheng and Cheng-Fu
		  Chou and Leana Golubchik and Samir Khuller},
    title	= {Bistro: a Framework for Building Scalable Wide-area Upload
		  Applications},
    journal	= {SIGMETRICS Performance Evaluation Review},
    year	= {2000},
    volume	= {28},
    number	= {2},
    pages	= {29--35},
    publisher	= {ACM Press},
    file	= {Bhattarchajee00Bistro.pdf:/afs/cs.wisc.edu/u/d/a/darnold/shared/research/Bibliography/pdfs/Bhattarchajee00Bistro.pdf:PDF}
		  ,
    issn	= {0163-5999},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bhola02ExactlyOnce,
    author	= {S. Bhola and R. Strom and S. Bagchi and Y. Zhao and J.
		  Auerbach},
    title	= {Exactly-once Delivery in a Content-based Publish-Subscribe
		  System},
    booktitle	= {Dependable Systems and Networks (DSN'02)},
    month	= {June},
    year	= {2002},
    pages	= {7--16},
    abstract	= {This paper presents a general knowledge model for
		  propagating information in a content-based
		  publish-subscribe system. The model is used to derive an
		  efficient and scalable protocol for exactly-once delivery
		  to large numbers (tens of thousands per broker) of
		  content-based subscribers in either publisher order or
		  uniform total order. Our protocol allows intermediate
		  content filtering at each hop, but requires persistent
		  storage only at the publishing site. It is tolerant of
		  message drops, message reorderings, node failures, and link
		  failures, and maintains only soft state at intermediate
		  nodes. We evaluate the performance of our implementation
		  both under failure-free conditions and with fault
		  injection.},
    file	= {Bhola02ExactlyOnce.pdf:Bhola02ExactlyOnce.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Birman91CausalAtomicMulticast,
    author	= {Kenneth Birman and Andre Schiper and Pat Stephenson},
    title	= {Lightweight Causal and Atomic Group Multicast},
    journal	= {ACM Transactions on Computer Systems},
    month	= {August},
    year	= {1991},
    volume	= {9},
    number	= {3},
    pages	= {272--314},
    owner	= {darnold},
    summary	= {notes/Birman91CausalAtomicMulticast.txt},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Birman00HorusandEnsemble,
    author	= {Ken Birman and Robert Constable and Mark Hayden and
		  Christopher Kreitz and Ohad Rodeh and Robbert van Renesse
		  and Werner Vogels},
    title	= {The Horus and Ensemble Projects: Accomplishments and
		  Limitations},
    booktitle	= {DARPA Information Survivability Conference \& Exposition
		  (DISCEX '00)},
    month	= {January},
    year	= {2000},
    address	= {Hilton Head, SC},
    dates	= {25--27},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Birrell82Grapevine,
    author	= {Andrew D. Birrell and Roy Levin and Michael D. Schroeder
		  and Roger M. Needham},
    title	= {Grapevine: An Exercise in Distributed Computing},
    journal	= {Communications of the ACM},
    year	= {1982},
    address	= {New York, NY},
    volume	= {25},
    number	= {4},
    pages	= {260--274},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/358468.358487},
    issn	= {0001-0782},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Bitton83ParallelDatabase,
    author	= {Dina Bitton and David DeWitt {Haran Boral} and W. Kevin
		  Wilkinson},
    title	= {Parallel Algorithms for the Execution of Relational
		  Database Operations},
    journal	= {ACM Transactions on Database Systems},
    year	= {1983},
    volume	= {8},
    number	= {3},
    pages	= {324--353},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Blackmon01CCSM,
    author	= {M. B. Blackmon and B. Boville and F. Bryan and R.
		  Dickinson and P. Gent and J. Kiehl and R. Moritz and D.
		  Randall and J. Shukla and S. Solomon and G. Bonan and S.
		  Doney and I. Fung and J. Hack and E. Hunke and J. Hurrell},
    title	= {{The Community Climate System Model}},
    journal	= {Bulletin of the American Meteorological Society},
    year	= {2001},
    volume	= {82},
    number	= {11},
    pages	= {2357--2376},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Bloom70HashCoding,
    author	= {Burton H. Bloom},
    title	= {Space/Time Trade-offs in Hash Coding with Allowable
		  Errors},
    journal	= {Communications of the ACM},
    year	= {1970},
    address	= {New York, NY},
    volume	= {13},
    number	= {7},
    pages	= {422--426},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/362686.362692},
    issn	= {0001-0782},
    keywords	= {bloom filters},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Blough:00:FIMD-MPI,
    author	= {Douglas M. Blough and Peng Liu},
    title	= {FIMD-MPI: A Tool for Injecting Faults into {MPI}
		  Applications},
    journal	= {Parallel and Distributed Processing Symposium,
		  International},
    year	= {2000},
    volume	= {0},
    pages	= {241},
    annote	= {An infrastructure that can inject various types of faults.
		  An application must be recompiled to use this
		  infrastructure, although they could probably have used the
		  MPI profiling interface. A configuration file specifies the
		  types and number of faults to inject at run time.},
    abstract	= {Parallel computing is seeing increasing use in critical
		  applications. The need therefore arises to test the
		  robustness of parallel applications in the presence of
		  exceptional conditions, or faults.
		  Communication-software-based fault injection is an
		  extremely flexible approach to robustness testing in
		  message-passing parallel computers. A fault injection
		  methodology and tool that use this approach are presented.
		  The tool, known as FIMD-MPI, allows injection of faults
		  into {MPI}-based applications. The structure and operation
		  of FIMD-MPI are described and the use of the tool is
		  illustrated on an example fault-tolerant MPI application},
    issn	= {1530-2075},
    doi		= {http://doi.ieeecomputersociety.org/10.1109/IPDPS.2000.845991}
		  
}

@InProceedings{Bohm11Xsim,
  title={{xSim}: The extreme-scale simulator},
  author={Bohm, S and Engelmann, Christian},
  booktitle={High Performance Computing and Simulation (HPCS), 2011 International Conference on},
  pages={280--286},
  year={2011},
  organization={IEEE}
}

@InProceedings{	  Bollo99ProbabilisticFailureDetection,
    author	= {Roger Bollo and Jean-Pierre Le Narzul and Michel Raynal
		  and Frederic Tronel},
    title	= {Probabilistic Analysis of a Group Failure Detection
		  Protocol},
    booktitle	= {Fourth International Workshop on Object-Oriented Real-Time
		  Dependable Systems},
    year	= {1999},
    pages	= {156},
    publisher	= {IEEE Computer Society},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Bollo99ProbabilisticFailureDetection.pdf}
		  ,
    abstract	= {A group membership failure (in short, a group failure)
		  occurs when one of the group members crashes. A group
		  failure detection protocol has to inform all the
		  non-crashed members of the group that this group entity has
		  crashed. Ideally, such a protocol should be live (if a
		  process crashes, then the group failure has to be detected)
		  and safe (if a group failure is claimed, then at least one
		  process has crashed).Unreliable asynchronous distributed
		  systems are characterized by the impossibility for a
		  process to get an accurate view of the system state.
		  Consequently, the design of a group failure detection
		  protocol that is both safe and live is a problem that can
		  not be solved in all runs of an asynchronous distributed
		  system.This paper analyses a group failure detection
		  protocol whose design naturally ensures its liveness. We
		  show that by tuning appropriately some of its
		  duration-related parameters, the safety property can be
		  guaranteed with a probability as close to $1$ as desired.
		  This analysis shows that, in real distributed systems, it
		  is possible to achieve failure detection with a negligible
		  probability of wrong suspicions.},
    file	= {Bollo99ProbabalisticFailureDetection.pdf:/afs/cs.wisc.edu/u/d/a/darnold/shared/research/Bibliography/pdfs/Bollo99ProbabalisticFailureDetection.pdf:PDF}
		  ,
    isbn	= {0-7695-0101-X},
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bondavalli90FailureClassification,
    author	= {Andrea Bondavalli and Luca Simoncini},
    title	= {Failure Classification with respect to Detection},
    booktitle	= {2nd. IEEE Workshop on Future Trends in Distributed
		  Computing Systems},
    year	= {1990},
    pages	= {47--53},
    institution	= {Universita' di Reggio Calabria, Reggio Calabria, Italy},
    owner	= {darnold},
    summary	= {notes/Bondavalli90FailureClassification.txt},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Borg83MessageSystem,
    author	= {Anita Borg and Jim Baumbach and Sam Glazer},
    title	= {A Message System Supporting Fault Tolerance},
    booktitle	= {9th ACM Symposium on Operating System Principles},
    month	= {October},
    year	= {1983},
    address	= {Bretton Woods, NH},
    pages	= {90--99},
    dates	= {10--13},
    file	= {Borg83MessageSystem.pdf:Borg83MessageSystem.pdf:PDF},
    owner	= {darnold},
    summary	= {notes/Borg83FaultTolerantMessageSystem.txt},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Borg:83:Message,
    author	= {Borg, Anita and Baumbach, Jim and Glazer, Sam},
    title	= {A message system supporting fault tolerance},
    booktitle	= {Ninth ACM Symposium on Operating Systems Principles},
    year	= {1983},
    pages	= {90--99},
    abstract	= {A simple and general design uses message-based
		  communication to provide software tolerance of single-point
		  hardware failures. By delivering all interprocess messages
		  to inactive backups for both the sender and the
		  destination, both backups are kept in a state in which they
		  can take over for their primaries. An implementation for
		  the Auragen 4000 series of M68000-based systems is
		  described. The operating system, AurosTM, is a distributed
		  version of UNIX*. Major goals have been transparency of
		  fault tolerance and efficient execution in the absence of
		  failure.},
    isbn	= {0-89791-115-6},
    location	= {Bretton Woods, New Hampshire, United States},
    numpages	= {10},
    doi		= {10.1145/800217.806617},
    acmid	= {806617}
}

@InProceedings{	  Bosilca:02:MPICH-V,
    author	= {George Bosilca and Aurelien Bouteiller and Franck Cappello
		  and Samir Djilali and Gilles Fedak and Cecile Germain and
		  Thomas Herault and Pierre Lemarinier and Oleg Lodygensky
		  and Frederic Magniette and Vincent Neri and Anton
		  Selikhov},
    title	= {{MPICH-V}: Toward a Scalable Fault Tolerant MPI for
		  Volatile Nodes},
    booktitle	= {Conference on High Performance Networking and Computing
		  (SC2002)},
    month	= {november},
    year	= {2002},
    address	= {Baltimore, MD},
    pages	= {1--18},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{Boteanu:10:Simulator,
  title={Simulator for fault tolerance in large scale distributed systems},
  author={Boteanu, Adrian and Dobre, Ciprian and Pop, Florin and Cristea, Valentin},
  booktitle={Intelligent Computer Communication and Processing (ICCP)},
  pages={443--450},
  year={2010},
  organization={IEEE}
}

@InProceedings{	  Bougeret:11:Checkpointing,
    author	= {Marin Bougeret and Henri Casanova and Mika{\"e}l Rabie and
		  Yves Robert and Fr{\'e}d{\'e}ric Vivien},
    title	= {Checkpointing strategies for parallel jobs},
    year	= {2011},
    pages	= {33},
    crossref	= {conf:sc:2011},
    ee		= {http://doi.acm.org/10.1145/2063384.2063428},
    bibsource	= {DBLP, http://dblp.uni-trier.de}
}

@InCollection{Bouguerra:2010:model,
  title     ={A flexible checkpoint/restart model in distributed systems},
  author    ={Bouguerra, Mohamed-Slim and Gautier, Thierry and Trystram, Denis and Vincent, Jean-Marc},
  booktitle ={Parallel Processing and Applied Mathematics},
  pages     ={206--215},
  year      ={2010},
  publisher ={Springer}
}

@InProceedings{	  Bouteiller:03:Coordinated,
    author	= {Bouteiller, A. and Lemarinier, P. and Krawezik, K. and
		  Capello, F.},
    title	= {Coordinated checkpoint versus message log for fault
		  tolerant {MPI}},
    booktitle	= {IEEE International Conference on Cluster Computing},
    year	= {2003},
    volume	= {},
    number	= {},
    pages	= {242--250},
    abstract	= {MPI is one of the most adopted programming models for
		  large clusters and grid deployments. However, these systems
		  often suffer from network or node failures. This raises the
		  issue of selecting a fault tolerance approach for MPI.
		  Automatic and transparent ones are based on either
		  coordinated checkpointing or message logging associated
		  with uncoordinated checkpoint. There are many protocols,
		  implementations and optimizations for these approaches but
		  few results about their comparison. Coordinated checkpoint
		  has the advantage of a very low overhead on fault free
		  executions. In contrary a message logging protocol
		  systematically adds a significant message transfer penalty.
		  The drawbacks of coordinated checkpoint come from its
		  synchronization cost at checkpoint and restart times. In
		  this paper we implement, evaluate and compare the two kinds
		  of protocols with a special emphasis on their respective
		  performance according to fault frequency. The main
		  conclusion (under our experimental conditions) is that
		  message logging becomes relevant for a large scale cluster
		  from one fault every hour for applications with large
		  dataset.},
    keywords	= {PC clusters; coordinated checkpoint; coordinated
		  checkpointing; fault free executions; fault frequency;
		  fault tolerant MPI; grid computing; message log; message
		  logging protocol; message transfer penalty; network
		  failures; node failures; performance evaluation;
		  programming models; restart times; synchronization cost;
		  distributed programming; fault tolerant computing; grid
		  computing; message passing; performance evaluation; system
		  recovery; workstation clusters;},
    doi		= {10.1109/CLUSTR.2003.1253321}
}

@InProceedings{	  Bouteiller:03:MPICH-V2,
    author	= {Bouteiller, Aur{\'e}lien and Cappello, Franck and Herault,
		  Thomas and Krawezik, G{\'e}raud and Lemarinier, Pierre and
		  Magniette, Fr{\'e}d{\'e}ric},
    title	= {{MPICH-V2}: a Fault Tolerant {MPI} for Volatile Nodes
		  based on Pessimistic Sender Based Message Logging},
    booktitle	= {Proceedings of the 2003 ACM/IEEE conference on
		  Supercomputing},
    year	= {2003},
    address	= {New York, NY, USA},
    publisher	= {ACM},
    isbn	= {1-58113-695-1},
    doi		= {10.1145/1048935.1050176}
}

@InProceedings{	  Bouteiller:09:Reasons,
    author	= {Bouteiller, Aurelien and Ropars, Thomas and Bosilca,
		  George and Morin, Christine and Dongarra, Jack},
    title	= {Reasons for a pessimistic or optimistic message logging
		  protocol in {MPI} uncoordinated failure recovery},
    booktitle	= {IEEE International Conference on Cluster Computing},
    month	= sep,
    year	= {2009},
    volume	= {},
    number	= {},
    abstract	= {With the growing scale of high performance computing
		  platforms, fault tolerance has become a major issue. Among
		  the various approaches for providing fault tolerance to MPI
		  applications, message logging has been proved to tolerate
		  higher failure rate. However, this advantage comes at the
		  expense of a higher overhead on communications, due to
		  latency intrusive logging of events to a stable storage.
		  Previous work proposed and evaluated several protocols
		  relaxing the synchronicity of event logging to moderate
		  this overhead. Recently, the model of message logging has
		  been refined to better match the reality of high
		  performance network cards, where message receptions are
		  decomposed in multiple interdependent events. According to
		  this new model, deterministic and non-deterministic events
		  are clearly discriminated, reducing the overhead induced by
		  message logging. In this paper we compare, experimentally,
		  a pessimistic and an optimistic message logging protocol,
		  using this new model and implemented in the Open MPI
		  library. Although pessimistic and optimistic message
		  logging are, respectively, the most and less synchronous
		  message logging paradigms, experiments show that most of
		  the time their performance is comparable.},
    keywords	= {MPI failure recovery;Open MPI library;fault tolerance;high
		  performance computing;high performance network
		  cards;message logging protocol;message passing
		  interface;fault tolerant computing;libraries;message
		  passing;parallel machines;protocols;},
    doi		= {10.1109/CLUSTR.2009.5289157},
    issn	= {1552-5244}
}

@Article{	  Bouteiller:10:Redesigning,
    author	= {Bouteiller, Aurelien and Bosilca, George and Dongarra,
		  Jack},
    title	= {Redesigning the message logging model for high
		  performance},
    journal	= {Concurrency and Computation: Practice and Experience},
    year	= {2010},
    volume	= {22},
    number	= {16},
    pages	= {2196--2211},
    abstract	= {Over the past decade the number of processors used in high
		  performance computing has increased to hundreds of
		  thousands. As a direct consequence, and while the
		  computational power follows the trend, the mean time
		  between failures (MTBF) has suffered and is now being
		  counted in hours. In order to circumvent this limitation, a
		  number of fault-tolerant algorithms as well as execution
		  environments have been developed using the message passing
		  paradigm. Among them, message logging has been proved to
		  achieve a better overall performance when the MTBF is low,
		  mainly due to a faster failure recovery. However, message
		  logging suffers from a high overhead when no failure
		  occurs. Therefore, in this paper we discuss a refinement of
		  the message logging model intended to improve the
		  failure-free message logging performance. The proposed
		  approach simultaneously removes useless memory copies and
		  reduces the number of logged events. We present the
		  implementation of a pessimistic message logging protocol in
		  Open MPI and compare it with the previous reference
		  implementation MPICH-V2. The results outline a several
		  order of magnitude improvement on the performance and a
		  zero overhead for most messages.},
    issn	= {1532-0634},
    doi		= {10.1002/cpe.1589},
    keywords	= {high performance computing, fault tolerance, message
		  logging, uncoordinated checkpoint}
}

@InProceedings{	  Bouteiller:11:Correlated,
    author	= {Bouteiller, Aurelien and Herault, Thomas and Bosilca,
		  George and Dongarra, Jack J.},
    title	= {Correlated set coordination in fault tolerant message
		  logging protocols},
    booktitle	= {17th International Conference on Parallel Processing},
    year	= {2011},
    pages	= {51--64},
    abstract	= {Based on our current expectation for the exascale systems,
		  composed of hundred of thousands of many-core nodes, the
		  mean time between failures will become small, even under
		  the most optimistic assumptions. One of the most scalable
		  checkpoint restart techniques, the message logging
		  approach, is the most challenged when the number of cores
		  per node increases, due to the high overhead of saving the
		  message payload. Fortunately, for two processes on the same
		  node, the failure probability is correlated, meaning that
		  coordinated recovery is free. In this paper, we propose an
		  intermediate approach that uses coordination between
		  correlated processes, but retains the scalability advantage
		  of message logging between independent ones. The algorithm
		  still belongs to the family of event logging protocols, but
		  eliminates the need for costly payload logging between
		  coordinated processes.},
    isbn	= {978-3-642-23396-8},
    location	= {Bordeaux, France},
    numpages	= {14},
    acmid	= {2033415}
}

@InProceedings{	  Bradski98FaceTracking,
    author	= {G.R. Bradski},
    title	= {Real Time Face and Object Tracking as a Component of a
		  Perceptual User Interface},
    booktitle	= {IEEE Workshop on Applications of Computer Vision},
    year	= {1998},
    address	= {Princeton, NJ, USA},
    pages	= {214--219},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bressoud:95:Hypervisor,
    author	= {Bressoud, T. C. and Schneider, F. B.},
    title	= {Hypervisor-based fault tolerance},
    booktitle	= {SOSP '95: Proceedings of the fifteenth ACM symposium on
		  Operating systems principles},
    year	= {1995},
    address	= {New York, NY, USA},
    pages	= {1--11},
    publisher	= {ACM},
    isbn	= {0-89791-715-4},
    location	= {Copper Mountain, Colorado, United States}
}

@InProceedings{	  Briatico84Recovery,
    author	= {Daniele Briatico and Augusto Ciufoletti and Luca
		  Simoncini.},
    title	= {A Distributed Domino-effect Free Recovery Algorithm},
    booktitle	= {4th IEEE Symposium on Reliability in Distributed Software
		  and Database Systems},
    month	= {October},
    year	= {1984},
    address	= {Silver Spring, MD},
    pages	= {207--215},
    dates	= {15--17},
    keywords	= {Fault-Tolerance, Checkpointing},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@inproceedings{   Bridges2012Cooperative,
  title={{Cooperative application/OS DRAM fault recovery}},
  author={Bridges, Patrick G and Hoemmen, Mark and Ferreira, Kurt B and Heroux, Michael A and Soltero, Philip and Brightwell, Ron},
  booktitle={Euro-Par 2011: Parallel Processing Workshops},
  pages={241--250},
  year={2012},
  organization={Springer}
}

@Article{	  Brightwell:06:SeaStar,
    author	= { Ron Brightwell and Trammell Hudson and Kevin T. Pedretti
		  and Keith D. Underwood },
    title	= { {SeaStar} {Interconnect}: {Balanced} Bandwidth for
		  Scalable Performance },
    journal	= { IEEE Micro },
    month	= { May/June },
    year	= { 2006 },
    volume	= { 26 },
    number	= { 3 }
}

@Article{	  Brightwell:06:Implications,
    author	= {Brightwell, Ron and Goudy, Sue P. and Rodrigues, Arun and
		  Underwood, Keith D.},
    title	= {Implications of application usage characteristics for
		  collective communication offload},
    journal	= {Int. J. High Perform. Comput. Netw.},
    year	= {2006},
    address	= {Inderscience Publishers, Geneva, SWITZERLAND},
    volume	= {4},
    number	= {3/4},
    pages	= {104--116},
    publisher	= {Inderscience Publishers},
    issn	= {1740-0562},
    doi		= {http://dx.doi.org/10.1504/IJHPCN.2006.010633}
}

@InProceedings{	  Brightwell:10:Transparent,
    author	= {Ron Brightwell and Kurt B. Ferreira and Rolf Riesen},
    title	= {Transparent Redundant Computing with MPI},
    booktitle	= {EuroMPI},
    year	= {2010},
    pages	= {208-218},
    crossref	= {conf/EuroMPI/2010}
}

@TechReport{	  Brim08GroupFileOperations,
    author	= {Michael J. Brim and Barton P. Miller},
    title	= {Group File Operations for Scalable Tools and Middleware},
    year	= {2008},
    number	= {UW-CS 1638},
    institution	= {University of Wisconsin},
    department	= {Computer Sciences},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Brim10MRNet,
    author	= {Michael J. Brim and Luiz DeRose and Barton P. Miller and
		  Ramya Olichandran and Philip C. Roth},
    title	= {MRNet: A Scalable Infrastructure for the Development of
		  Parallel Tools and Applications},
    booktitle	= {Cray User's Group},
    month	= {May},
    year	= {2010},
    location	= {Edinburgh, Scotland},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Bronevetsky:06:Recent,
    author	= {Bronevetsky, G. and Fernandes, R. and Marques, D. and
		  Pingali, K. and Stodghill, P.},
    title	= {Recent advances in checkpoint/recovery systems},
    booktitle	= {Parallel and Distributed Processing Symposium, 2006. IPDPS
		  2006. 20th International},
    month	= apr,
    year	= {2006},
    volume	= {},
    number	= {},
    annote	= {Referenced by~\shortciteN{Maloney:09:Survey} for the
		  examples of rand() and MPI to explain that both
		  system-level and application-level CPR are needed to assure
		  correctness. The seed is not exposed to the application by
		  the POSIX API. It can be set, but not read for
		  check-pointing. In MPI, the rank to physical node ID (e.g.,
		  IP addresses) maps have no meaning to the system (kernel).
		  Upon recovery they would be restored, even though new maps
		  may be needed.},
    abstract	= {Checkpoint and recovery (CPR) systems have many uses in
		  high-performance computing. Because of this, many
		  developers have implemented it, by hand, into their
		  applications. One of the uses of check-pointing is to help
		  mitigate the effects of interruptions in computational
		  service (both planned and unplanned) In fact, some
		  supercomputing centers expect their users to use
		  checkpointing as a matter of policy. And yet, few centers
		  provide fully automatic checkpointing systems for their
		  high-end production machines. The paper is a status report
		  on our work on the family of C3 systems for (almost) fully
		  automatic checkpointing for scientific applications. To
		  date, we have shown that our techniques can be used for
		  checkpointing sequential, MPI and OpenMP applications
		  written in C, Fortran, and several other languages. A novel
		  aspect of our work is that we have not built a single
		  checkpointing system, rather, we have developed a
		  methodology and a set of techniques that have enabled us to
		  develop a number of systems, each meeting different design
		  goals and efficiency requirements},
    keywords	= {checkpointing, message passing, parallel machines, OpenMP,
		  checkpointing system, computational service, high-end
		  production machine, high-performance computing, message
		  passing interface, recovery system, sequential application,
		  supercomputing center},
    doi		= {http://dx.doi.org/10.1109/IPDPS.2006.1639575},
    issn	= {}
}

@InProceedings{	  Bronevetsky:08:Compiler,
    author	= {Bronevetsky, Greg and Marques, Daniel J. and Pingali,
		  Keshav K. and Rugina, Radu and McKee, Sally A.},
    title	= {Compiler-enhanced incremental checkpointing for OpenMP
		  applications},
    booktitle	= {PPoPP '08: Proceedings of the 13th ACM SIGPLAN Symposium
		  on Principles and practice of parallel programming},
    year	= {2008},
    address	= {New York, NY, USA},
    pages	= {275--276},
    publisher	= {ACM},
    isbn	= {978-1-59593-795-7},
    location	= {Salt Lake City, UT, USA},
    doi		= {http://doi.acm.org/10.1145/1345206.1345253}
}

@InProceedings{	  Bronevetsky09Compiler,
    author	= {Greg Bronevetsky and Daniel Marques and Keshav Pingali and
		  Sally McKee and Radu Rugina},
    title	= {Compiler-enhanced incremental checkpointing for OpenMP
		  applications},
    booktitle	= {IEEE International Symposium on Parallel\&Distributed
		  Processing},
    year	= {2009},
    pages	= {1--12},
    url		= {http://portal.acm.org/citation.cfm?id=1586640.1587642},
    isbn	= {978-1-4244-3751-1},
    numpages	= {12},
    doi		= {10.1109/IPDPS.2009.5160999},
    acmid	= {1587642}
}

@Article{	  Buck00Dyninst,
    author	= {Bryan Buck and Jeffrey K. Hollingsworth},
    title	= {{An {API} for Runtime Code Patching}},
    journal	= {The International Journal of High Performance Computing
		  Applications},
    month	= {Winter},
    year	= {2000},
    volume	= {14},
    number	= {4},
    pages	= {317--329},
    url		= {citeseer.ist.psu.edu/buck00api.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Budhiraja92PrimaryBackupProtocols,
    author	= {Navin Budhiraja and Keith Marzullo and Fred B. Schneider
		  and Sam Toueg},
    title	= {Primary-Backup Protocols: Lower Bounds and Optimal
		  Implementations},
    booktitle	= {Third IFIP Conference on Dependable Computing for Critical
		  Applications},
    month	= {September},
    year	= {1992},
    address	= {Mondello, Sicily},
    pages	= {321--343},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  302438,
    author	= {Navin Budhiraja and Keith Marzullo and Fred B. Schneider
		  and Sam Toueg},
    title	= {The primary-backup approach},
    year	= {1993},
    address	= {New York, NY, USA},
    pages	= {199--216},
    publisher	= {ACM Press/Addison-Wesley Publishing Co.},
    book	= {Distributed systems (2nd Ed.)},
    isbn	= {0-201-62427-3},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Buntinas:08:Blocking,
    author	= {Darius Buntinas and Camille Coti and Thomas Herault and
		  Pierre Lemarinier and Laurence Pilard and Ala Rezmerita and
		  Eric Rodriguez and Franck Cappello},
    title	= {Blocking vs. non-blocking coordinated checkpointing for
		  large-scale fault tolerant {MPI} protocols},
    journal	= {Future Generation Computer Systems},
    year	= {2008},
    volume	= {24},
    number	= {1},
    pages	= {73--84},
    note	= {},
    abstract	= {A long-term trend in high-performance computing is the
		  increasing number of nodes in parallel computing platforms,
		  which entails a higher failure probability. Fault tolerant
		  programming environments should be used to guarantee the
		  safe execution of critical applications. Research in fault
		  tolerant MPIs has led to the development of several fault
		  tolerant MPI environments. Different approaches are being
		  proposed using a variety of fault tolerant message passing
		  protocols based on coordinated checkpointing or message
		  logging. The most popular approach is with coordinated
		  checkpointing. In the literature, two different concepts of
		  coordinated checkpointing have been proposed: blocking and
		  non-blocking. However they have never been compared
		  quantitatively, and their respective scalabilities remain
		  unknown. The contribution of this paper is to provide the
		  first comparison between these two approaches and a study
		  of their scalabilities. We have implemented the two
		  approaches within the MPICH environments and evaluate their
		  performance using the NAS parallel benchmarks.},
    issn	= {0167-739X},
    doi		= {10.1016/j.future.2007.02.002}
}

@InProceedings{	  Burns97EfficientDistributedBackup,
    author	= {Randal C. Burns and Darrell D. E. Long},
    title	= {Efficient Distributed Backup with Delta Compression},
    booktitle	= {Fifth workshop on I/O in Parallel and Distributed Systems
		  (IOPADS '97)},
    year	= {1997},
    address	= {San Jose, CA},
    pages	= {27--36},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Burns98InPlaceReconstruction,
    author	= {Randal C. Burns and Darrell D. E. Long},
    title	= {In-place Reconstruction of Delta Compressed Files},
    booktitle	= {Seventeenth annual ACM symposium on Principles of
		  distributed computing (PODC '98)},
    year	= {1998},
    address	= {Puerto Vallarta, Mexico},
    pages	= {267--275},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

_markedentry = "[darnold]",
	owner = "darnold",
	timestamp = "2011.06.27"
}
@Article{	  Buyya00PARMON,
    author	= {Rajkumar Buyya},
    title	= {PARMON: A Portable and Scalable Monitoring System for
		  Clusters},
    journal	= {International Journal of Software: Practice and
		  Experience},
    month	= {June},
    year	= {2000},
    volume	= {30},
    number	= {7},
    pages	= {723--739},
    publisher	= {John Wiley \& Sons, Inc},
    file	= {Buyya00parmon.pdf:/afs/cs.wisc.edu/u/d/a/darnold/shared/research/Bibliography/pdfs/Buyya00parmon.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  RedStorm,
    author	= { William J. Camp and James L. Tomkins },
    title	= { Thor's Hammer: The First Version of the {Red Storm} {MPP}
		  Architecture },
    booktitle	= { In Proceedings of the SC 2002 Conference on High
		  Performance Networking and Computing},
    month	= { November },
    year	= { 2002 },
    address	= { Baltimore, MD }
}

@InProceedings{	  Cao02JavaMulticast,
    author	= {J. Cao and P. Leung and A. Chan},
    title	= {A Scalable and Reliable Multicast Communication Service in
		  Java},
    booktitle	= {International Parallel and Distributed Processing
		  Symposium (IPDPS 2002)},
    month	= {April},
    year	= {2002},
    pages	= {116--123},
    abstract	= {This paper describes a scalable and reliable multicast
		  communication service for developing distributed
		  applications in Java. The service is based on MPDT, a
		  dual-token logical ring-based multicast protocol proposed
		  by us. MPDT ensures total ordering of multicast message
		  deliver and is resilient to network faults and node
		  crashes. We describe the implementation of MPDT in Java and
		  report the results of the performance evaluation. We also
		  discuss extension of MPDT to support multiple tokens.},
    date	= {15--19},
    file	= {Cao02JavaMulticast.pdf:Cao02JavaMulticast.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Cappello:09:Fault,
    author	= {Franck Cappello},
    title	= {Fault Tolerance in Petascale/ Exascale Systems: Current
		  Knowledge, Challenges and Research Opportunities},
    journal	= {IJHPCA},
    year	= {2009},
    volume	= {23},
    number	= {3},
    pages	= {212-226},
    ee		= {\url{http://dx.doi.org/10.1177/1094342009106189}},
    bibsource	= {DBLP, http://dblp.uni-trier.de}
}

@InProceedings{Cappello2010communication,
  title={On communication determinism in parallel {HPC} applications},
  author={Cappello, Franck and Guermouche, Amina and Snir, Marc},
  booktitle={Computer Communications and Networks (ICCCN), 2010 Proceedings of 19th International Conference on},
  pages={1--8},
  year={2010},
  organization={IEEE}
}
@Article{	  Casas95MPVM,
    author	= {Jeremy Casas and Dan L. Clark and Ravi Konuru and Steve W.
		  Otto and Robert M. Prouty and Jonathan Walpole},
    title	= {MPVM: A Migration Transparent Version of PVM},
    journal	= {Computing Systems},
    month	= {Spring},
    year	= {1995},
    volume	= {8},
    number	= {2},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Castro:02:Practical,
    author	= {Miguel Castro and Barbara Liskov},
    title	= {Practical Byzantine Fault Tolerance and Proactive
		  Recovery},
    journal	= {ACM Transactions on Computer Systems (TOCS)},
    month	= nov,
    year	= {2002},
    volume	= {20},
    number	= {4},
    pages	= {398--461}
}

@InProceedings{	  chakravorty:fault,
    author	= {Sayantan Chakravorty and Laxmikant V. Kal\'{e}},
    title	= {A Fault Tolerant Protocol for Massively Parallel Systems},
    booktitle	= {Proceedings of the International Parallel and Distributed
		  Processing Symposium},
    month	= {April},
    year	= {2004},
    address	= {Santa Fe, NM USA},
    publisher	= {IEEE Computer Society Press},
    keywords	= {fault tolerance protocol, adaptive MPI, Charm++, message
		  logging}
}

@inproceedings{Challenges2009Architectures,
  title={Architectures and Technology for Extreme Scale Computing},
  author={Challenges, Scientific Grand},
  booktitle={US Department of Energy Workshop Report},
  year={2009}
}

@Article{	  Chandra96WeakestFailureDetector,
    author	= {Tushar Deepak Chandra and Vassos Hadzilacos and Sam
		  Toueg},
    title	= {The Weakest Failure Detector for Solving Consensus},
    booktitle	= {19th Annual ACM-SIGOPS Symposium on Principles of
		  Distributed Computing (PODC 2000)},
    journal	= {Journal of the ACM},
    month	= {July},
    year	= {1996},
    volume	= {43},
    number	= {4},
    pages	= {685--722},
    keywords	= {Failure Detection},
    owner	= {darnold},
    tilte	= {Optimal Implementation of the Weakest Failure Detector for
		  Solving Consensus},
    timestamp	= {2011.06.26}
}

@Article{	  Chandra96UnreliableFailureDetectors,
    author	= {Tushar D. Chandra and Sam Toueg},
    title	= {Unreliable Failure Detectors for Reliable Distributed
		  Systems},
    journal	= {Journal of the ACM},
    month	= {March},
    year	= {1996},
    volume	= {43},
    number	= {2},
    pages	= {225--267},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Chandra96UnreliableFailureDetectors.pdf}
		  ,
    abstract	= {We introduce the concept of unreliable failure detectors
		  and study how they can be used to solve Consensus in
		  asynchronous systems with crash failures. We characterise
		  unreliable failure detectors in terms of two properties |
		  completeness and accuracy. We show that Consensus can be
		  solved even with unreliable failure detectors that make an
		  in nite number of mistakes, and determine which ones can be
		  used to solve Consensus despite any number of crashes, and
		  which ones require a majority of correct processes. We
		  prove that Consensus and Atomic Broadcast are reducible to
		  each other in asynchronous systems with crash failures;
		  thus the above results also apply to Atomic Broadcast. A
		  companion paper shows that one of the failure detectors
		  introduced here is the weakest failure detector for solving
		  Consensus [Chandra et al. 1992].},
    file	= {Chandra96UnreliableFailureDetectors.pdf:Chandra96UnreliableFailureDetectors.pdf:PDF}
		  ,
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Chandy85DistributedSnapshots,
    author	= {K. Mani Chandy and Leslie Lamport},
    title	= {Distributed Snapshots: Determining Global States of
		  Distributed Systems},
    journal	= {ACM Transactions on Computer Systems},
    month	= {February},
    year	= {1985},
    volume	= {3},
    number	= {1},
    pages	= {63--75},
    abstract	= {This paper presents an algorithm by which a process in a
		  distributed system determines a global state of the system
		  during a computation. Many problems in distributed systems
		  can be cast in terms of the problem of detecting global
		  states. For instance, the global state detection algorithm
		  helps to solve an important class of problems: stable
		  property detection. A stable property is one that persists:
		  once a stable property becomes true it remains true
		  thereafter. Examples of stable properties are ?computation
		  has terminated,? ? the system is deadlocked? and ?all
		  tokens in a token ring have disappeared.? The stable
		  property detection problem is that of devising algorithms
		  to detect a given stable property. Global state detection
		  can also be used for checkpointing.},
    file	= {Chandy85DistributedSnapshots.pdf:Chandy85DistributedSnapshots.pdf:PDF}
		  ,
    owner	= {darnold},
    summary	= {notes/Chandy85DistributedSnapshots.txt},
    timestamp	= {2011.06.26}
}

@Article{	  Chandy:85:Distributed,
    author	= {Chandy, K. Mani and Lamport, Leslie},
    title	= {Distributed snapshots: determining global states of
		  distributed systems},
    journal	= {ACM Trans. Comput. Syst.},
    year	= {1985},
    volume	= {3},
    number	= {1},
    pages	= {63--75},
    abstract	= {This paper presents an algorithm by which a process in a
		  distributed system determines a global state of the system
		  during a computation. Many problems in distributed systems
		  can be cast in terms of the problem of detecting global
		  states. For instance, the global state detection algorithm
		  helps to solve an important class of problems: stable
		  property detection. A stable property is one that persists:
		  once a stable property becomes true it remains true
		  thereafter. Examples of stable properties are ``computation
		  has terminated,'' ``the system is deadlocked'' and ``all
		  tokens in a token ring have disappeared.'' The stable
		  property detection problem is that of devising algorithms
		  to detect a given stable property. Global state detection
		  can also be used for checkpointing.},
    issn	= {0734-2071},
    doi		= {http://doi.acm.org/10.1145/214451.214456}
}

@Article{	  Chang84ReliableBroadcast,
    author	= {Jo-Mei Chang and N. F. Maxemchuk},
    title	= {Reliable Broadcast Protocols},
    journal	= {ACM Transactions on Computer Systems},
    month	= {August},
    year	= {1984},
    volume	= {2},
    number	= {3},
    pages	= {251--273},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Chapin:95:Hive,
    author	= {Chapin, J. and Rosenblum, M. and Devine, S. and Lahiri, T.
		  and Teodosiu, D. and Gupta, A.},
    title	= {Hive: fault containment for shared-memory
		  multiprocessors},
    booktitle	= {SOSP '95: Proceedings of the fifteenth ACM symposium on
		  Operating systems principles},
    year	= {1995},
    address	= {New York, NY, USA},
    pages	= {12--25},
    publisher	= {ACM},
    isbn	= {0-89791-715-4},
    location	= {Copper Mountain, Colorado, United States}
}

@InProceedings{	  Chaudhuri94QueryOptimization,
    author	= {Surajit Chaudhuri and Kyusegk Shim},
    title	= {Including group-by in Query Optimization},
    booktitle	= {20th International Conference of Very Large Data Bases,
		  Santiago, Chile},
    month	= {September},
    year	= {1994},
    pages	= {354--366.},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Chawathe00RMX,
    author	= {Yatin Chawathe and Steven McCanne and Eric A. Brewer},
    title	= {RMX: Reliable Multicast for Heterogeneous Networks},
    booktitle	= {Conference on Computer Communications (INFOCOM 2000)},
    month	= {March},
    year	= {2000},
    address	= {Tel Aviv, Israel},
    pages	= {795--804},
    url		= {citeseer.nj.nec.com/chawathe00rmx.html},
    dates	= {26-30},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Chen97CLIP,
    author	= {Yuqun Chen and Kai Li and James S. Plank},
    title	= {CLIP: A Checkpointing Tool for Message-passing Parallel
		  Programs},
    booktitle	= {SuperComputing '97},
    year	= {1997},
    address	= {San Jose, CA},
    url		= {citeseer.ist.psu.edu/chen97clip.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Chen02FailureDetectorsQoS,
    author	= {Wei Chen and Sam Toueg and Marcos K. Aguilera},
    title	= {On the Quality of Service of Failure Detectors},
    journal	= {IEEE Transactions on Computers},
    month	= {May},
    year	= {2002},
    volume	= {51},
    number	= {5},
    pages	= {561--580},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Chen00FailureDetectorsQoS.pdf}
		  ,
    abstract	= {We study the quality of service (QoS) of failure
		  detectors. By QoS, we mean a specification that quantifies
		  1) how fast the failure detector detects actual failures
		  and 2) how well it avoids false detections. We first
		  propose a set of QoS metrics to specify failure detectors
		  for systems with probabilistic behaviors, i.e., for systems
		  where message delays and message losses follow some
		  probability distributions. We then give a new failure
		  detector algorithm and analyze its QoS in terms of the
		  proposed metrics. We show that, among a large class of
		  failure detectors, the new algorithm is optimal with
		  respect to some of these QoS metrics. Given a set of
		  failure detector QoS requirements, we show how to compute
		  the parameters of our algorithm so that it satisfies these
		  requirements and we show how this can be done,even if the
		  probabilistic behavior of the system is not known. We then
		  present some simulation results that show that the new
		  failure detector algorithm provides a better QoS than an
		  algorithm that is commonly used in practice. Finally, we
		  suggest some ways to make our failure detector adaptive to
		  changes in the probabilistic behavior of the network.},
    file	= {Chen02FailureDetectorsQoS.pdf:Chen02FailureDetectorsQoS.pdf:PDF}
		  ,
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Chen02Pinpoint,
    author	= {Mike Y. Chen and Emre Kiciman and Eugene Fratkin and
		  Armando Fox and Eric Brewer},
    title	= {{Pinpoint: Problem Determination in Large, Dynamic
		  Internet Services}},
    booktitle	= {International Conference on Dependable Systems and
		  Networks (DSN '02)},
    year	= {2002},
    address	= {Washington, DC, USA},
    pages	= {595--604},
    publisher	= {IEEE Computer Society},
    isbn	= {0-7695-1597-5},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Chen05RobustAggregates,
    author	= {Jen-Yeu Chen and Gopal Pandurangan and Dongyan Xu},
    title	= {Robust Computation of Aggregates in Wireless Sensor
		  Networks: Distributed Randomized Algorithms and Analysis},
    booktitle	= {4th international Symposium on Information Processing in
		  Sensor Networks (IPSN '05)},
    month	= {April},
    year	= {2005},
    address	= {Los Angeles, CA},
    publisher	= {IEEE Press},
    dates	= {25--27},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{Chen:06:Algorithm-based,
  author    = {Zizhong Chen and Dongarra, J.},
  booktitle = {Parallel and Distributed Processing Symposium, 2006. IPDPS 2006. 20th International},
  title     = {Algorithm-based checkpoint-free fault tolerance for parallel matrix computations on volatile resources},
  year      = {2006},
  month     = {april},
  volume    = {},
  number    = {},
  pages     = {10 pp.},
  abstract  = {As the size of today's high performance computers increases from hundreds,
           to thousands, and even tens of thousands of processors, node failures in
           these computers are becoming frequent events. Although checkpoint/rollback-recovery
           is the typical technique to tolerate such failures, it often introduces a
           considerable overhead. Algorithm-based fault tolerance is a very cost-effective
           method to incorporate fault tolerance into matrix computations. However, previous
           algorithm-based fault tolerance methods for matrix computations are often derived
           using algorithms that are seldomly used in the practice of today's high performance
           matrix computations and have mostly focused on platforms where failed processors
           produce incorrect calculations. To fill this gap, this paper extends the existing
           algorithm-based fault tolerance to the volatile computing platform where the failed
           processor stops working and applies it to scalable high performance matrix computations
           with two dimensional block cyclic data distribution. We show the practicality
           of this technique by applying it to the ScaLAPACK/PBLAS matrix-matrix multiplication
           kernel. Experimental results demonstrate that the proposed approach is able to survive
           process failures with a very low performance overhead},
  doi       = {10.1109/IPDPS.2006.1639333},
  ISSN      = {}
}

@inproceedings{ Chen:08:Extending,
  author    = {Zizhong Chen},
  title     = {Extending algorithm-based fault tolerance to tolerate fail-stop
               failures in high performance distributed environments},
  booktitle={Parallel \& Distributed Processing (IPDPS), 2008 IEEE 22th International Symposium on},
  pages     = {1-8},
  ee        = {http://dx.doi.org/10.1109/IPDPS.2008.4536158},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


@Article{	  Cheng95MeanShift,
    author	= {Yizong Cheng},
    title	= {Mean Shift, Mode Seeking, and Clustering},
    journal	= {IEEE Transactions on Pattern Analaysis and Machine
		  Intelligence},
    year	= {1995},
    address	= {Washington, DC, USA},
    volume	= {17},
    number	= {8},
    pages	= {790--799},
    publisher	= {IEEE Computer Society},
    doi		= {http://dx.doi.org/10.1109/34.400568},
    issn	= {0162-8828},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Chereque92ActiveReplication,
    author	= {M. Chereque and D. Powell and P. Reynier and J.L. Richier
		  and J. Voiron},
    title	= {Active Replication in Delta-4},
    booktitle	= {22nd International Symposium on Fault-Tolerant Computing
		  (FTCS-22)},
    month	= {July},
    year	= {1992},
    address	= {Boston, MA},
    pages	= {28--37},
    date	= {8--10},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Chiu98TRAM,
    author	= {Dah Ming Chiu and Stephen Hurst and Miriam Kadansky and
		  Joseph Wesley},
    title	= {TRAM: A Tree-based Reliable Multicast Protocol},
    month	= {July},
    year	= {1998},
    number	= {TR 98-66},
    institution	= {Sun Microsystems},
    abstract	= {This paper describes TRAM, a scalable reliable multicast
		  transport protocol. TRAM is designed to support bulk data
		  transfer with a single sender and multiple receivers. It
		  uses dynamic trees to implement local error recovery and to
		  scale to a large number of receivers without seriously
		  impacting the sender. It also includes flow control,
		  congestion control, and other adaptive techniques necessary
		  to operate efficiently and fairly with other protocols
		  across the wide variety of link and client characteristics
		  that make up the Internet as well as intranets. TRAM has
		  been successfully used to implement several bulk data
		  delivery applications. TRAM has been tested and simulated
		  in a number of network environments.},
    file	= {Chiu98TRAM.pdf:Chiu98TRAM.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  chiueh:checkpoint-evaluation,
    author	= {Tzi-Cker Chiueh and Peitao Deng},
    title	= {Evaluation of checkpoint mechanisms for massively parallel
		  machines.},
    booktitle	= {Annual Symposium on Fault Tolerant Computing},
    month	= {June},
    year	= {1996},
    address	= {Sendai, Japan},
    pages	= {370--379},
    publisher	= {IEEE Computer Society Press},
    abstract	= {Massively parallel machines typically contain thousands of
		  processor units and therefore are more likely to suffer
		  system breakdown because of component failures. This paper
		  studies efficient diskless checkpointing mechanisms for
		  SIMD massively parallel machines. Three checkpointing
		  schemes: mirror checkpointing, parity checkpointing, and
		  partial parity checkpointing are compared in terms of their
		  checkpoint performance and storage overheads, based on
		  empirical measurements. Mirror checkpointing and parity
		  checkpointing schemes have been successfully implemented
		  and tested on a DECmpp 12000 machine, without hardware or
		  OS modifications. It has been shown that mirror
		  checkpointing is an order of magnitude faster than parity
		  checkpointing, but takes twice as much storage overhead.
		  Partial parity checkpointing, although significantly
		  reduces the storage overhead, could lead to unpredictable
		  execution performance. This paper also examines the
		  detailed storage/performance tradeoffs for partial parity
		  checkpointing through manual instrumentation, and describes
		  the implementation experience from these experiments.},
    copyright	= {(c)2004 IEE},
    keywords	= {checkpointing schemes, checkpoint performance, diskless
		  checkpointing, fault tolerant computing; parallel
		  algorithms; parallel computing, parity checkpointing,
		  performance evaluation}
}

@Article{	  Chu02EndSystemMulticast,
    author	= {Yang-hua Chu and Sanjay G. Rao and Srinivasan Seshan and
		  Hui Zhang},
    title	= {A Case for End System Multicast},
    journal	= {IEEE Journal on Selected Areas in Communications},
    year	= {2002},
    volume	= {20},
    number	= {8},
    pages	= {1456--1471},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{Chung12Containment,
  title={Containment domains: A scalable, efficient, and flexible resilience scheme for exascale systems},
  author={Chung, Jinsuk and Lee, Ikhwan and Sullivan, Michael and Ryoo, Jee Ho and Kim, Dong Wan and Yoon, Doe Hyun and Kaplan, Larry and Erez, Mattan},
  booktitle={High Performance Computing, Networking, Storage and Analysis (SC), 2012 International Conference for},
  pages={1--11},
  year={2012},
  organization={IEEE}
}

@Article{	  Cloud11LosslessCompressionGPU,
    author	= {R. L. Cloud and Matthew L. Curry and H. Lee Ward and
		  Anthony Skjellum and Purushotham Bangalore},
    title	= {Accelerating Lossless Data Compression with {GPUs}},
    journal	= {CoRR},
    year	= {2011},
    volume	= {abs/1107.1525},
    bibsource	= {DBLP, http://dblp.uni-trier.de},
    ee		= {http://arxiv.org/abs/1107.1525}
}

@InProceedings{	  Comaniciu97ImageSegmentation,
    author	= {Dorin Comaniciu and Peter Meer},
    title	= {Robust Analysis of Feature Spaces: Color Image
		  Segmentation},
    booktitle	= {IEEE Computer Vision and Pattern Recognition},
    year	= {1997},
    address	= {Puerto Rico},
    pages	= {750--755},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Comaniciu99MeanShiftApplications,
    author	= {Dorin Comaniciu and Peter Meer},
    title	= {Mean Shift Analysis and Applications},
    booktitle	= {IEEE Computer Vision (ICCV '99)},
    year	= {1999},
    address	= {Kerkyra, Greece},
    pages	= {1197--1203},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Comaniciu01MeanShift,
    author	= {Dorin Comaniciu and Visvanathan Ramesh and Peter Meer},
    title	= {The Variable Bandwidth Mean Shift and {Data-Driven} Scale
		  Selection},
    booktitle	= {8th International Conference on Computer Vision},
    month	= {July},
    year	= {2001},
    address	= {Vancouver, BC, Canada},
    volume	= {1},
    pages	= {438--445},
    url		= {citeseer.ist.psu.edu/comaniciu01variable.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Considine04ApproximateAggregation,
    author	= {Jeffrey Considine and Feifei Li and George Kollios and
		  John Byers},
    title	= {Approximate Aggregation Techniques for Sensor Databases},
    booktitle	= {20th International Conference on Data Engineering (ICDE
		  '04)},
    year	= {2004},
    address	= {Washington, DC},
    pages	= {449},
    isbn	= {0-7695-2065-0},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Cornwell11RemoteBLCR,
    author	= {J. Cornwell and A. Kongmunvattana},
    title	= {Efficient System-Level Remote Checkpointing Technique for
		  BLCR},
    booktitle	= {Information Technology: New Generations (ITNG), 2011
		  Eighth International Conference on},
    month	= {april},
    year	= {2011},
    volume	= {},
    number	= {},
    pages	= {1002--1007},
    issn	= {},
    keywords	= {Berkeley lab checkpoint-restart, BLCR, checkpointing,
		  fault tolerance, high-performance computing platforms,
		  Lawrence Berkeley National Laboratory, Linux, Linux
		  clusters, system-level fault-tolerant checkpoint,
		  system-level fault-tolerant restart, system-level remote
		  checkpointing technique},
    doi		= {10.1109/ITNG.2011.172}
}

@InProceedings{	  Coti:06:Blocking,
    author	= {Coti, Camille and Herault, Thomas and Lemarinier, Pierre
		  and Pilard, Laurence and Rezmerita, Ala and Rodriguez, Eric
		  and Cappello, Franck},
    title	= {Blocking vs. non-blocking coordinated checkpointing for
		  large-scale fault tolerant {MPI}},
    booktitle	= {ACM/IEEE Conference on Supercomputing},
    year	= {2006},
    annote	= {Compares two implementations of coordinated checkpointing
		  inside MPICH. One is blocking, the other is not. The
		  implementation is over TCP and uses TCP's keep-alive
		  parameter for failure detection. Detection latency is on
		  the order of minutes, except the authors kill tasks to
		  inject faults. The OS (Linux) survives and notifies the
		  other end of the channel immediately. To write the actual
		  checkpoint, BLCR~\shortcite{Duell:02:Design} is used.
		  
		  The paper shows NAS parallel benchmark results and shows
		  that, as the checkpoint interval decreases, non-blocking
		  checkpoints add less overhead. This is especially true for
		  lower performing networks. According to the paper, in
		  high-performance networks, blocking checkpoints might be OK
		  for \emph{``sensible checkpoint frequency''}.
		  
		  What seems to be missing is the cost of roll-back when that
		  has to be done frequently as we expect in the near future.
		  They did perform some experiments on clusters but seem
		  mostly interested in grids. Even when running over Myrinet
		  they were using the TCP layer.},
    abstract	= {A long-term trend in high-performance computing is the
		  increasing number of nodes in parallel computing platforms,
		  which entails a higher failure probability. Fault tolerant
		  programming environments should be used to guarantee the
		  safe execution of critical applications. Research in fault
		  tolerant MPI has led to the development of several fault
		  tolerant MPI environments. Different approaches are being
		  proposed using a variety of fault-tolerant message passing
		  protocols based on coordinated checkpointing or message
		  logging. The most popular approach is with coordinated
		  checkpointing. In the literature, two different concepts of
		  coordinated checkpointing have been proposed: blocking and
		  nonblocking. However they have never been compared
		  quantitatively and their respective scalability remains
		  unknown. The contribution of this paper is to provide the
		  first comparison between these two approaches and a study
		  of their scalability. We have implemented the two
		  approaches within the MPICH environments and evaluate their
		  performance using the NAS parallel benchmarks.},
    isbn	= {0-7695-2700-0},
    location	= {Tampa, Florida},
    doi		= {http://doi.acm.org/10.1145/1188455.1188587}
}

@InProceedings{	  Cristian91TimestampBasedCheckpointing,
    author	= {Flaviu Cristian and Farnam Jahanian},
    title	= {A Timestamp-Based Checkpointing Protocol for Long-Lived
		  Distributed Computations},
    booktitle	= {Tenth Symposium on Reliable Distributed Systems},
    month	= {September},
    year	= {1991},
    address	= {Pisa, Italy},
    pages	= {12--20},
    publisher	= {IEEE Computer Society Press},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Cristian91FaultTolerantDistributedSystems,
    author	= {Flaviu Cristian},
    title	= {Understanding Fault-Tolerant Distributed Systems},
    journal	= {Communications of the ACM},
    year	= {1991},
    volume	= {34},
    number	= {2},
    pages	= {56--78},
    url		= {http://citeseer.nj.nec.com/cristian93understanding.html},
    owner	= {darnold},
    summary	= {notes/Cristian91FaultTolerantDistributedSystems.txt},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Culler:1993:LogP,
    author	= {David Culler and Richard Karp and David Patterson and
		  Abhijit Sahay and Klaus Erik Schauser and Eunice Santos and
		  Ramesh Subramonian and Thorsten von Eicken},
    title	= {LogP: Towards a Realistic Model of Parallel Computation},
    booktitle	= {Fourth ACM SIGPLAN Symposium on Principles and Practice of
		  Parallel Programming (PPOPP '93)},
    year	= {1993},
    address	= {San Diego, CA},
    pages	= {1--12},
    abstract	= {A vast body of theoretical research has focused either on
		  overly simplistic models of parallel computation, notably
		  the PRAM, or overly specific models that have few
		  representatives in the real world. Both kinds of models
		  encourage exploitation of formal loopholes, rather than
		  rewarding development of techniques that yield performance
		  across a range of current and future parallel machines.
		  This paper offers a new parallel machine model, called
		  LogP, that reflects the critical technology trends
		  underlying parallel computers. it is intended to serve as a
		  basis for developing fast, portable parallel algorithms and
		  to offer guidelines to machine designers. Such a model must
		  strike a balance between detail and simplicity in order to
		  reveal important bottlenecks without making analysis of
		  interesting problems intractable. The model is based on
		  four parameters that specify abstractly the computing
		  bandwidth, the communication bandwidth, the communication
		  delay, and the efficiency of coupling communication and
		  computation. Portable parallel algorithms typically adapt
		  to the machine configuration, in terms of these parameters.
		  The utility of the model is demonstrated through examples
		  that are implemented on the CM-5.},
    keywords	= {Performance Modeling},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Culler96LogP,
    author	= {David E. Culler and Richard M. Karp and David Patterson
		  and Abhijit Sahay and Eunice E. Santos and Klaus Erik
		  Schauser and Ramesh Subramonian and Thorsten von Eicken},
    title	= {LogP: A Practical Model of Parallel Computation},
    journal	= {Communications of the ACM},
    year	= {1996},
    volume	= {39},
    number	= {11},
    pages	= {78--85},
    publisher	= {ACM Press},
    file	= {Culler96LogP.pdf:Culler96LogP.pdf:PDF},
    issn	= {0001-0782},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Czajkowski01GridInformationServices,
    author	= {Karl Czajkowski and Steven Fitzgerald and Ian Foster and
		  Carl Kesselman},
    title	= {Grid Information Services for Distributed Resource
		  Sharing},
    booktitle	= {10th IEEE International Symposium on High-Performance
		  Distributed Computing (HPDC 10)},
    month	= {August},
    year	= {2001},
    address	= {San Francisco, CA},
    pages	= {181--194},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Daly:06:higher,
    author	= {Daly, J. T.},
    title	= {A higher order estimate of the optimum checkpoint interval
		  for restart dumps},
    journal	= {Future Gener. Comput. Syst.},
    year	= {2006},
    volume	= {22},
    number	= {3},
    pages	= {303--312},
    annote	= {Formula to calculate runtime of an application including
		  times to checkpoint, restart, and rework in case of
		  interrupts},
    abstract	= { This paper examines methods of approximating the optimum
		  checkpoint restart strategy for minimizing application run
		  time on a system exhibiting Poisson single component
		  failures. Two different models will be developed and
		  compared. We will begin with a simplified cost function
		  that yields a first-order model. Then we will derive a more
		  complete cost function and demonstrate a perturbation
		  solution that provides accurate high order approximations
		  to the optimum checkpoint interval.},
    issn	= {0167-739X},
    doi		= {http://dx.doi.org/10.1016/j.future.2004.11.016}
}

@InProceedings{	  daly-mttfe,
    author	= {Daly, J. T. and Pritchett-Sheats, L. A. and Michalak, S.
		  E.},
    title	= {Application MTTFE vs. Platform MTBF: A Fresh Perspective
		  on System Reliability and Application Throughput for
		  Computations at Scale},
    booktitle	= {CCGRID '08: Proceedings of the 2008 Eighth IEEE
		  International Symposium on Cluster Computing and the Grid},
    year	= {2008},
    address	= {Washington, DC, USA},
    pages	= {795--800},
    publisher	= {IEEE Computer Society},
    date-added	= {2010-02-17 16:36:14 -0700},
    date-modified = {2010-02-17 16:36:27 -0700},
    doi		= {http://dx.doi.org/10.1109/CCGRID.2008.103},
    isbn	= {978-0-7695-3156-4},
    bdsk-url-1	= {http://dx.doi.org/10.1109/CCGRID.2008.103}
}

@InProceedings{   davis2004performance,
  title={A performance and scalability analysis of the BlueGene/L architecture},
  author={Davis, Kei and Hoisie, Adolfy and Johnson, Greg and Kerbyson, Darren J 
    and Lang, Mike and Pakin, Scott and Petrini, Fabrizio},
  booktitle={Proceedings of the 2004 ACM/IEEE conference on Supercomputing},
  pages={41},
  year={2004},
  organization={IEEE Computer Society}
}

@InProceedings{	  Desouza05IntelMessageChecker,
    author	= {Jayant DeSouza and Bob Kuhn and Bronis R. de Supinski and
		  Victor Samofalov and Sergey Zheltov and Stanislav
		  Bratanov},
    title	= {{Automated, Scalable Debugging of {MPI} Programs with
		  Intel Message Checker}},
    booktitle	= {Second International Workshop on Software Engineering for
		  High Performance Computing System Applications (SE-HPCS
		  2005)},
    month	= {May},
    year	= {2005},
    address	= {St. Louis, MO},
    date	= {15},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Dean08MapReduce,
    author	= {Jeffrey Dean and Sanjay Ghemawat},
    title	= {{MapReduce: Simplified Data Processing on Large
		  Clusters}},
    journal	= {Communications of the ACM},
    year	= {2008},
    address	= {New York, NY, USA},
    volume	= {51},
    number	= {1},
    pages	= {107--113},
    publisher	= {ACM},
    doi		= {http://doi.acm.org/10.1145/1327452.1327492},
    issn	= {0001-0782},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Deering90Multicast,
    author	= {Stephen E. Deering and David R. Cheriton},
    title	= {Multicast Routing in Datagram Internetworks and Extended
		  LANs},
    journal	= {IEEE/ACM Transactions on Networking},
    month	= {May},
    year	= {1990},
    volume	= {8},
    number	= {2},
    pages	= {85--110},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Demers87Epidemic,
    author	= {Alan Demers and Dan Greene and Carl Hauser and Wes Irish
		  and John Larson and Scott Shenker and Howard Sturgis and
		  Dan Swinehart and Doug Terry},
    title	= {Epidemic algorithms for replicated database maintenance},
    booktitle	= {Sixth Annual ACM Symposium on Principles of Distributed
		  Computing(PODC '87)},
    month	= {August},
    year	= {1987},
    address	= {Vancouver, British Columbia, Canada},
    pages	= {1--12},
    date	= {10--12},
    doi		= {http://doi.acm.org/10.1145/41840.41841},
    isbn	= {0-89791-239-4},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

_markedentry = "[darnold]",
	owner = "darnold",
	timestamp = "2011.06.27",
	url = "ftp://ftp.uu.net/pub/archiving/zip/doc"
}
@InProceedings{	  Dickinson01FindingFailures,
    author	= {William Dickinson and David Leon and Andy Podgurski},
    title	= {{Finding Failures by Cluster Analysis of Execution
		  Profiles}},
    booktitle	= {23rd International Conference on Software Engineering
		  (ICSE '01)},
    year	= {2001},
    address	= {Toronto, Ontario, Canada},
    pages	= {339--348},
    publisher	= {IEEE Computer Society},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Dong:09:Leveraging,
    author	= {Dong, Xiangyu and Muralimanohar, Naveen and Jouppi, Norm
		  and Kaufmann, Richard and Xie, Yuan},
    title	= {Leveraging {3D PCRAM} technologies to reduce checkpoint
		  overhead for future exascale systems},
    booktitle	= {ACM/IEEE International Conference for High Performance
		  Computing, Networking, Storage and Analysis (SC)},
    year	= {2009},
    abstract	= {The scalability of future massively parallel processing
		  (MPP) systems is challenged by high failure rates. Current
		  hard disk drive (HDD) checkpointing results in overhead of
		  25\% or more at the petascale. With a direct correlation
		  between checkpoint frequencies and node counts, novel
		  techniques that can take more frequent checkpoints with
		  minimum overhead are critical to implement a reliable
		  exascale system. In this work, we leverage the upcoming
		  Phase-Change Random Access Memory (PCRAM) technology and
		  propose a hybrid local/global checkpointing mechanism after
		  a thorough analysis of MPP systems failure rates and
		  failure sources.
		  
		  We propose three variants of PCRAM-based hybrid
		  checkpointing schemes, DIMM+HDD, DIMM+DIMM, and 3D+3D, to
		  reduce the checkpoint overhead and offer a smooth
		  transition from the conventional pure HDD checkpoint to the
		  ideal 3D PCRAM mechanism. The proposed pure 3D PCRAM-based
		  mechanism can ultimately take checkpoints with overhead
		  less than 4\% on a projected exascale system.},
    isbn	= {978-1-60558-744-8},
    location	= {Portland, Oregon},
    doi		= {http://doi.acm.org/10.1145/1654059.1654117}
}

@Article{	  Douglis91ProcessMigrationSprite,
    author	= {Fred Douglis and John Ousterhout},
    title	= {Transparent process migration: design alternatives and the
		  sprite implementation},
    journal	= {Software -- Practice and Experience},
    year	= {1991},
    address	= {New York, NY},
    volume	= {21},
    number	= {8},
    pages	= {757--785},
    publisher	= {John Wiley \& Sons, Inc.},
    issn	= {0038-0644},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Duell:02:Requirements,
    author	= {Jason Duell and Paul Hargrove and Eric Roman},
    title	= {Requirements for Linux Checkpoint/Restart},
    month	= may,
    year	= {2002},
    number	= {LBNL-49659},
    institution	= {Berkeley Lab},
    url		= {https://ftg.lbl.gov/CheckpointRestart/Pubs/LBNL-49659.pdf}
		  ,
    annote	= {This is a formal description of the requirements for BLCR.
		  It does not discuss whether the implementation meets these
		  requirements or not. There is no mention whether these
		  requirements are sufficient.},
    abstract	= {\emph{No abstract.}}
}

@TechReport{	  Duell:02:Design,
    author	= {Jason Duell and Paul Hargrove and Eric Roman},
    title	= {The Design and Implementation of Berkeley Lab's Linux
		  Checkpoint/Restart},
    month	= dec,
    year	= {2002},
    number	= {LBNL-54941},
    institution	= {Berkeley Lab},
    url		= {https://ftg.lbl.gov/CheckpointRestart/Pubs/blcr.pdf},
    annote	= {This is the tech report that describes the original
		  version of BLCR. \cite{Hargrove:06:Berkeley} is a much more
		  recent version but contains no details.},
    abstract	= {\emph{No abstract.}}
}

@InProceedings{	  Echtle00FailureModel,
    author	= {Klaus Echtle and Asif Masum},
    title	= {A Fundamental Failure Model for Fault-Tolerant Protocols},
    booktitle	= {4th International Computer Performance and Dependability
		  Symposium },
    month	= {March},
    year	= {2000},
    pages	= {69--78},
    institution	= {University of Duisburg-Essen},
    url		= {http://csdl.computer.org/comp/proceedings/ipds/2000/0553/00/05530069abs.htm}
		  ,
    owner	= {darnold},
    summary	= {notes/Echtle00FailureModel.txt},
    timestamp	= {2011.06.26}
}

@Article{	  Efraimidis99WeightedRandomSampling,
    author	= {Pavlos S. Efraimidis and Paul G. Spirakis},
    title	= {Weighted Random Sampling with a Reservoir},
    journal	= {Information Processing Letters},
    year	= {2006},
    address	= {Amsterdam, The Netherlands, The Netherlands},
    volume	= {97},
    number	= {5},
    pages	= {181--185},
    publisher	= {Elsevier North-Holland, Inc.},
    doi		= {http://dx.doi.org/10.1016/j.ipl.2005.11.003},
    issn	= {0020-0190},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Elnozahy92ConsistentCheckpointing,
    author	= {Elmootazbellah N. Elnozahy and David B. Johnson and Willy
		  Zwaenpoel},
    title	= {The Performance of Consistent Checkpointing},
    booktitle	= {11th {IEEE} Symposium on Reliable Distributed Systems},
    year	= {1992},
    address	= {Houston, TX},
    url		= {citeseer.ist.psu.edu/elnozahy92performance.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  elnozahy:checkpoint-performance,
    author	= {E. N. Elnozahy and D. B. Johnson and W. Zwaenepoel},
    title	= {The performance of consistent checkpointing.},
    booktitle	= {11th Symposium on Reliable Distributed Systems},
    month	= {October},
    year	= {1992},
    address	= {Houston, TX, USA},
    pages	= {39--47},
    publisher	= {IEEE Computer Society Press},
    abstract	= {Consistent checkpointing provides transparent fault
		  tolerance for long-running distributed applications.
		  Performance measurements of an implementation of consistent
		  checkpointing are described. The measurements show that
		  consistent checkpointing performs remarkably well. Eight
		  computation-intensive distributed applications were
		  executed on a network of 16 diskless Sun-3/60 workstations,
		  and the performance without checkpointing was compared to
		  the performance with consistent checkpoints taken at
		  two-minute intervals. For six of the eight applications,
		  the running time increased by less than 1% as a result of
		  the checkpointing. The highest overhead measured was 5.8%.
		  Incremental checkpointing and copy-on write checkpointing
		  were the most effective techniques in lowering the running
		  time overhead. It is argued that these measurements show
		  that consistent checkpointing is an efficient way to
		  provide fault tolerance for long-running distributed
		  applications. (30 refs.)},
    copyright	= {(c)2004 IEE},
    keywords	= {distributed applications, consistent checkpointing, copy
		  on write checkpointing, diskless Sun 3/60 workstations,
		  Fault tolerant computing, Long running distributed
		  applications, performance evaluation and testing}
}

@InProceedings{	  Elnozahy:94:Use,
    author	= {Elmootazbellah N. Elnozahy and Willy Zwaenepoel},
    title	= {On the Use and Implementation of Message Logging},
    booktitle	= {Digest of Papers: FTCS/24, The Twenty-Fourth Annual
		  International Symposium on Fault-Tolerant Computing,
		  Austin, Texas, USA, June 15-17, 1994},
    year	= {1994},
    pages	= {298-307},
    publisher	= {IEEE Computer Society},
    isbn	= {0-8186-5520-8}
}

@Article{	  Elnozahy02SurveyRollbackRecovery,
    author	= {Elmootazbellah N. Elnozahy and Lorenzo Alvisi and Yi-Min
		  Wang and David B. Johnson},
    title	= {A Survey of Rollback-recovery Protocols in Message-passing
		  Systems},
    journal	= {ACM Computing Surveys},
    year	= {2002},
    address	= {New York, NY},
    volume	= {34},
    number	= {3},
    pages	= {375--408},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/568522.568525},
    issn	= {0360-0300},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Elnozahy:02:Survey,
    author	= {Elnozahy, E. N. (Mootaz) and Alvisi, Lorenzo and Wang,
		  Yi-Min and Johnson, David B.},
    title	= {A survey of rollback-recovery protocols in message-passing
		  systems},
    journal	= {ACM Comput. Surv.},
    year	= {2002},
    volume	= {34},
    number	= {3},
    pages	= {375},
    annote	= {Reviews checkpoint-based and log-based rollback-recovery
		  techniques. It nicely explains the reasons for each
		  technique, its drawbacks and advantages.},
    abstract	= {This survey covers rollback-recovery techniques that do
		  not require special language constructs. In the first part
		  of the survey we classify rollback-recovery protocols into
		  checkpoint-based and log-based. Checkpoint-based protocols
		  rely solely on checkpointing for system state restoration.
		  Checkpointing can be coordinated uncoordinated, or
		  communication-induced. Log-based protocols combine
		  checkpointing with logging of nondeterministic events,
		  encoded in tuples called determinants. Depending on how
		  determinants are logged, log-based checkpoint protocols can
		  be pessimistic, optimistic, or causal. Throughout the
		  survey, we highlight the research issues that are at the
		  core of rollback-recovery and present the solutions that
		  currently address them. We also compare the performance of
		  different rollback-recovery protocols with respect to a
		  series of desirable properties and discuss the issues that
		  arise in the practical implementations of these
		  protocols.},
    issn	= {0360-0300},
    doi		= {http://doi.acm.org/10.1145/568522.568525}
}

@Article{	  Elnozahy04PetascaleCheckpointing,
    author	= {Elmootazbellah N. Elnozahy and James. S. Plank},
    title	= {Checkpointing for Peta-Scale Systems: A Look into the
		  Future of Practical Rollback-Recovery},
    journal	= {IEEE Transactions on Dependable and Secure Computing},
    month	= {April-June},
    year	= {2004},
    volume	= {1},
    number	= {2},
    pages	= {97--108},
    abstract	= {Over the past two decades, rollback-recovery via
		  checkpoint-restart has been used with reasonable success
		  for long-running applications, such as scientific workloads
		  that take from few hours to few months to complete.
		  Currently, several commercial systems and publicly
		  available libraries exist to support various flavors of
		  checkpointing. Programmers typically use these systems if
		  they are satisfactory or otherwise embed checkpointing
		  support themselves within the application. In this paper,
		  we project the performance and functionality of
		  checkpointing algorithms and systems as we know them today
		  into the future. We start by surveying the current
		  technology roadmap and particularly how Peta-Flop capable
		  systems may be plausibly constructed in the next few years.
		  We consider how rollback-recovery as practiced today will
		  fare when systems may have to be constructed out of
		  thousands of nodes. Our projections predict that, unlike
		  current practice, the effect of rollback-recovery may play
		  a more prominent role in how systems may be configured to
		  reach the desired performance level. System planners may
		  have to devote additional resources to enable
		  rollback-recovery and the current practice of using "cheap
		  commodity" systems to form large-scale clusters may face
		  serious obstacles. We suggest new avenues for research to
		  react to these trends.},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Elnozahy:04:Checkpointing,
    author	= {Elnozahy, E.N. and Plank, J.S.},
    title	= {Checkpointing for peta-scale systems: a look into the
		  future of practical rollback-recovery},
    journal	= {Dependable and Secure Computing, IEEE Transactions on},
    month	= apr,
    year	= {2004},
    volume	= {1},
    number	= {2},
    pages	= {97-108},
    annote	= {This paper makes a clear case for the need to come up with
		  something smarter than simple check-point restart in
		  100,000 and more processor systems. Somewhat similar
		  to~\cite{Oldfield:07:Modeling}, but it does not really make
		  any suggestions on how to fix the problem. The paper has a
		  graph that shows how checkpointing overhead impacts
		  speedup. It also shows that improving the time to do a
		  checkpoint helps some, but if many recoveries are expected
		  that the cost of these recoveries limit the scalability of
		  an application.},
    abstract	= {Over the past two decades, rollback-recovery via
		  checkpoint-restart has been used with reasonable success
		  for long-running applications, such as scientific workloads
		  that take from few hours to few months to complete.
		  Currently, several commercial systems and publicly
		  available libraries exist to support various flavors of
		  checkpointing. Programmers typically use these systems if
		  they are satisfactory or otherwise embed checkpointing
		  support themselves within the application. In this paper,
		  we project the performance and functionality of
		  checkpointing algorithms and systems as we know them today
		  into the future. We start by surveying the current
		  technology roadmap and particularly how Peta-Flop capable
		  systems may be plausibly constructed in the next few years.
		  We consider how rollback-recovery as practiced today will
		  fare when systems may have to be constructed out of
		  thousands of nodes. Our projections predict that, unlike
		  current practice, the effect of rollback-recovery may play
		  a more prominent role in how systems may be configured to
		  reach the desired performance level. System planners may
		  have to devote additional resources to enable
		  rollback-recovery and the current practice of using "cheap
		  commodity" systems to form large-scale clusters may face
		  serious obstacles. We suggest new avenues for research to
		  react to these trends.},
    keywords	= {distributed programming, fault tolerant computing,
		  multiprocessing systems, software reliability, system
		  recovery cheap commodity systems, checkpoint restart,
		  commercial systems, distributed applications, distributed
		  systems, fault tolerance, large-scale clusters,
		  multiple-processor systems, petaflop capable systems,
		  petascale system checkpointing, public libraries, rollback
		  recovery, scientific workloads, system configuration,
		  system reliability},
    doi		= {http://dx.doi.org/10.1109/TDSC.2004.15},
    issn	= {1545-5971}
}

@InProceedings{	  engelmann:diskless,
    author	= {Christian Engelmann and Al Geist},
    title	= {A diskless checkpointing algorithm for super-scale
		  architectures applied to the fast Fourier transform},
    booktitle	= {In Proceedings of the International Workshop on Challenges
		  of Large Applications in Distributed Environments},
    month	= {June},
    year	= {2003},
    address	= {Seattle, WA},
    pages	= {47--52},
    institution	= {Oak Ridge Natl Lab, Comp Sci \& Math Div, POB 2008, Oak
		  Ridge, TN 37831 USA; Oak Ridge Natl Lab, Comp Sci \& Math
		  Div, Oak Ridge, TN 37831 USA},
    publisher	= {IEEE Computer Society Press},
    url		= {http://www.csm.ornl.gov/~engelman/publications/engelmann03diskless.pdf}
		  ,
    abstract	= {This paper discusses the issue of fault-tolerance in
		  distributed computer systems with tens or hundreds of
		  thousands of diskless processor units. Such systems, like
		  the IBM BlueGene/L, are predicted to be deployed in the
		  next five to ten years. Since a 100,000-processor system is
		  going to be less reliable, scientific applications need to
		  be able to recover from occurring failures more
		  efficiently. In this paper we adapt the present technique
		  of diskless checkpointing to such huge distributed systems
		  in order to equip existing scientific algorithms with
		  super-scalable fault-tolerance. First, we discuss the
		  method of diskless checkpointing, then we adapt this
		  technique to super-scale architectures and finally we
		  present results from an implementation of the Fast Fourier
		  Transform that uses the adapted technique to achieve
		  super-scale fault-tolerance.},
    copyright	= {(c)2004 Institute for Scientific Information, Inc.},
    keywords	= {diskless checkpointing, fault tolerant computing, FFT}
}

_markedentry = "[darnold]",
	owner = "darnold",
	timestamp = "2011.06.27"
}
@Article{	  engelmann2006aar,
    author	= {C. Engelmann and SL Scott and C. Leangsuksun and X. He},
    title	= {{Active/Active Replication for Highly Available HPC System
		  Services}},
    journal	= {Proceedings of the First International Conference on
		  Availability, Reliability and Security (ARES'06)-Volume
		  00},
    year	= {2006},
    pages	= {639--645},
    publisher	= {IEEE Computer Society Washington, DC, USA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Conference{	  Engelmann:09:Case,
    author	= {Christian Engelmann and Hong H. Ong and Stephen L. Scott},
    title	= {The Case for Modular Redundancy in Large-Scale High
		  Performance Computing Systems},
    booktitle	= {Proceedings of the {$8^{th}$ IASTED International
		  Conference on Parallel and Distributed Computing and
		  Networks (PDCN) 2009}},
    month	= feb # {~16-18, },
    year	= {2009},
    address	= {Innsbruck, Austria},
    pages	= {189--194},
    publisher	= {{ACTA Press, Calgary, AB, Canada}},
    url		= {http://www.csm.ornl.gov/~engelman/publications/engelmann09case.pdf}
		  ,
    abstract	= {Recent investigations into resilience of large-scale
		  high-performance computing (HPC) systems showed a
		  continuous trend of decreasing reliability and
		  availability. Newly installed systems have a lower
		  mean-time to failure (MTTF) and a higher mean-time to
		  recover (MTTR) than their predecessors. Modular redundancy
		  is being used in many mission critical systems today to
		  provide for resilience, such as for aerospace and command
		  \& control systems. The primary argument against modular
		  redundancy for resilience in HPC has always been that the
		  capability of a HPC system, and respective return on
		  investment, would be significantly reduced. We argue that
		  modular redundancy can significantly increase compute node
		  availability as it removes the impact of scale from single
		  compute node MTTR. We further argue that single compute
		  nodes can be much less reliable, and therefore less
		  expensive, and still be highly available, if their
		  MTTR/MTTF ratio is maintained.},
    isbn	= {978-0-88986-784-0},
    url2	= {http://www.csm.ornl.gov/~engelman/publications/engelmann09case.ppt.pdf}
		  ,
    bdsk-url-1	= {http://www.csm.ornl.gov/~engelman/publications/engelmann09case.pdf}
		  
}

@Article{	  Eriksson94MBone,
    author	= {Hans Eriksson},
    title	= {MBone: The Multicast Backbone},
    journal	= {Communications of the ACM},
    month	= {August},
    year	= {1994},
    volume	= {37},
    number	= {8},
    pages	= {54--60},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Eugster03PublishSubscribe,
    author	= {Patrick Th. Eugster and Pascal A. Felber and Rachid
		  Guerraoui and Anne-Marie Kermarrec},
    title	= {The Many Faces of Publish/Subscribe},
    journal	= {ACM Computing Surveys},
    year	= {2003},
    volume	= {35},
    number	= {2},
    pages	= {114--131},
    publisher	= {ACM Press},
    url		= {http://doi.acm.org/10.1145/857076.857078},
    abstract	= {Well adapted to the loosely coupled nature of distributed
		  interaction in large-scale applications, the
		  publish/subscribe communication paradigm has recently
		  received increasing attention. With systems based on the
		  publish/subscribe interaction scheme, subscribers register
		  their interest in an event, or a pattern of events, and are
		  subsequently asynchronously notified of events generated by
		  publishers. Many variants of the paradigm have recently
		  been proposed, each variant being specifically adapted to
		  some given application or network model. This paper factors
		  out the common denominator underlying these variants: full
		  decoupling of the communicating entities in time, space,
		  and synchronization. We use these three decoupling
		  dimensions to better identify commonalities and divergences
		  with traditional interaction paradigms. The many variations
		  on the theme of publish/subscribe are classified and
		  synthesized. In particular, their respective benefits and
		  shortcomings are discussed both in terms of interfaces and
		  implementations.},
    file	= {Eugster03PublishSubscribe.pdf:Eugster03PublishSubscribe.pdf:PDF}
		  ,
    issn	= {0360-0300},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Evensky97Lilith,
    author	= {David A. Evensky and Ann C. Gentile and L. Jean Camp and
		  Robert C. Armstrong},
    title	= {Lilith: Scalable Execution of User Code for Distributed
		  Computing},
    booktitle	= {6th IEEE International Symposium on High Performance
		  Distributed Computing (HPDC 97)},
    month	= {August},
    year	= {1997},
    address	= {Portland, OR},
    pages	= {306--314},
    dates	= {5-8},
    file	= {Evensky97Lilith.pdf:Evensky97Lilith.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Evensky99LilithLights,
    author	= {David A. Evensky and Ann C. Gentile and Pete Wyckoff},
    title	= {Lilith Lights: A Network Traffic Visualization Tool for
		  High Performance Clusters},
    booktitle	= {7th International Conference on High Performance Computing
		  and Networking},
    month	= {April},
    year	= {1999},
    address	= {Amsterdam, The Netherlands},
    pages	= {1183--1186},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Faloutsos97RecoveryInformation,
    author	= {Christos Faloutsos and H. V. Jagadish and N. D.
		  Sidiropoulos},
    title	= {Recovering Information from Summary Data},
    booktitle	= {23rd International Conference on Very Large Data Bases
		  (VLDB '97)},
    month	= {August},
    year	= {1997},
    address	= {Athens, Greece},
    pages	= {36--45},
    publisher	= {Morgan Kaufmann},
    dates	= {26--29},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Fang04LDPFailureDetection,
    author	= {Luyuan Fang and A Atlas and F Chiussi and K Kompella and G
		  Swallow},
    title	= {LDP Failure Detection and Recovery},
    journal	= {IEEE Communications Magazine},
    month	= {October},
    year	= {2004},
    volume	= {42},
    number	= {10},
    pages	= {117--123},
    abstract	= {In the last few years, multiprotocol label switching has
		  been successfully, deployed by the majority of service
		  providers worldwide. The label distribution protocol is
		  used in many MPLS networks for distributing labels to
		  establish the label switched paths. This article focuses on
		  LDP failures, namely failures that may occur in LDP while
		  the underlining interior gateway protocol of choice, and
		  the physical connections are operating normally. Since LDP
		  and MPLS in general do not have intrinsic means for
		  detecting these failures, new mechanisms have to be
		  introduced to handle them. Furthermore, the IGP may remain
		  unaware of the LDP failure, and continue to direct traffic
		  to the faulty path. To resolve this situation, coupling
		  between LDP and the routing protocol may have to be
		  introduced. In this article, we discuss all aspects related
		  to handling LDP failures: discovery, location,
		  notification, recovery, and prevention.},
    file	= {Fang04LDPFailureDetection.pdf:Fang04LDPFailureDetection.pdf:PDF}
		  ,
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  Fang10DatabaseCompression,
    author	= {Wenbin Fang and Bingsheng He and Qiong Luo},
    title	= {Database Compression on Graphics Processors}
}

@InProceedings{	  Feldman88IGOR,
    author	= {Stuart I. Feldman and Channing B. Brown},
    title	= {IGOR: A System for Program Debugging via Reversible
		  Execution},
    booktitle	= {1988 ACM SIGPLAN and SIGOPS Workshop on Parallel and
		  Distributed Debugging (PADD '88)},
    year	= {1988},
    address	= {New York, NY},
    pages	= {112--123},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/68210.69226},
    isbn	= {0-89791-296-9},
    location	= {Madison, WI},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Ferreira:11:rMPI,
    author	= { Kurt Ferreira and Rolf Riesen and Ron Oldfield and Jon
		  Stearley and James H. Laros III and Kevin Pedretti and Ron
		  Brightwell },
    title	= { r{MPI}: Increasing Fault Resiliency in a Message-Passing
		  Environment},
    year	= {2011},
    number	= {SAND2011-2488},
    institution	= {Sandia National Laboratories},
    type	= {Technical Report}
}

@InProceedings{	  Ferreira:11:Evaluating,
    author	= {Kurt Ferreira and Rolf Riesen and Patrick Bridges and
		  Dorian Arnold and Jon Stearley and James H.~Laros III and
		  Ron Oldfield and Kevin Pedretti and Ron Brightwell},
    title	= {Evaluating the Viability of Process Replication
		  Reliability for Exascale Systems},
    month	= nov,
    year	= {2011},
    crossref	= {conf:sc:2011}
}

@InProceedings{	  Ferreira11Libhashckpt,
    author	= {Kurt B. Ferreira and Rolf Riesen and Ron Brightwell and
		  Patrick G. Bridges and Dorian Arnold},
    title	= {Libhashckpt: Hash-based Incremental Checkpointing Using
		  {GPUs}},
    booktitle	= {Proceedings of the 18th {EuroMPI} Conference},
    month	= {September},
    year	= {2011 [to appear]},
    address	= {Santorini, Greece}
}
 
@inproceedings{   Ferreira:08:characterizing,
  title={Characterizing application sensitivity to OS interference using kernel-level noise injection},
  author={Ferreira, Kurt B and Bridges, Patrick and Brightwell, Ron},
  booktitle={Proceedings of the 2008 ACM/IEEE conference on Supercomputing},
  pages={19},
  year={2008},
  organization={IEEE Press}
}

@inproceedings{   xxxFerreira:08:characterizing,
  title={Blinded for review process}
}

@InProceedings{	  Fetzer96Fall-awareness,
    author	= {C. Fetzer and F. Cristian},
    title	= {Fall-awareness in Timed Asynchronous Systems},
    booktitle	= {15th Annual ACM Symposium on Principles of Distributed
		  Computing (PODC'96)},
    month	= {May},
    year	= {1996},
    pages	= {314--321},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Fetzer01AdaptiveFailureDetection,
    author	= {Christof Fetzer and Michel Raynal and Frederic Tronel},
    title	= {An Adaptive Failure Detection Protocol},
    booktitle	= {2001 Pacific Rim International Symposium on Dependable
		  Computing 2001},
    month	= {December},
    year	= {2001},
    pages	= {146--153},
    abstract	= {The detection of process failures is a crucial problem
		  system designers have to cope with in order to build
		  fault-tolerant distributed platforms. Unfortunately, it is
		  impossible to distinguish with certainty a crashed process
		  from a very slow process in a purely asynchronous
		  distributed system. This prevents some problems from being
		  solved in such systems. That is why failure detector
		  oracles have been introduced to circumvent these
		  impossibility results. The paper presents a relatively
		  simple protocol that allows a process to monitor another
		  process, and consequently to detect its crash. This
		  protocol relies as much as possible on application messages
		  to do this monitoring. Different from previous process
		  crash detection protocols, it uses control messages only
		  when no application message is sent by the monitoring
		  process to the observed process. When the underlying system
		  satisfies the partial synchrony assumption, it actually
		  implements an eventually perfect failure detector (i.e., a
		  failure detector of the class usually denoted OP). Moreover
		  if the average observed transmission delay is finite and
		  the upper layer application terminates within a bounded
		  number of steps for any failure detector in OP after the
		  failure detector becomes perfect, then, when run with the
		  proposed protocol, it also terminates correctly. These
		  properties make the protocol inexpensive, implementable,
		  and powerful. The paper also describes performance
		  measurements of an implementation of the protocol},
    dates	= {17--19},
    file	= {Fetzer01AdaptiveFailureDetection.pdf:Fetzer01AdaptiveFailureDetection.pdf:PDF}
		  ,
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Fidge88PartialOrders,
    author	= {Colin J. Fidge},
    title	= {Partial Orders for Parallel Debugging},
    booktitle	= {1988 ACM SIGPLAN and SIGOPS Workshop on Parallel and
		  Distributed Debugging (PADD '88)},
    year	= {1988},
    address	= {New York, NY},
    pages	= {183--194},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/68210.69233},
    isbn	= {0-89791-296-9},
    location	= {Madison, WI},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Fischer85Impossibility,
    author	= {M. J. Fischer and N. A. Lynch and M. S. Paterson},
    title	= {Impossibility of Distributed Consensus with One Faulty
		  Process},
    journal	= {Journal of the ACM},
    month	= {April},
    year	= {1985},
    volume	= {32},
    number	= {2},
    pages	= {374--382},
    file	= {Fischer85Impossibility.pdf:Fischer85Impossibility.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Fitzgerald97GlobusMDS,
    author	= {Steven Fitzgerald and Ian Foster and Carl Kesselman and
		  Gregor von Laszewski and Warren Smith and Steven Tuecke},
    title	= {A Directory Service for Configuring High-performance
		  Distributed Computations},
    booktitle	= {6th IEEE Symposium on High-Performance Distributed
		  Computing (HPDC 6)},
    month	= {August},
    year	= {1997},
    address	= {Portland, OR},
    pages	= {365--375},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Flajolet:92:Onramanujan,
    author	= {Philippe Flajolet and Peter J. Grabner and Peter
		  Kirschenhofer and Helmut Prodinger},
    title	= {On {Ramanujan's} {Q}-Function},
    journal	= {Journal of Computational and Applied Mathematics},
    year	= {1992},
    volume	= {58},
    pages	= {103--116}
}

@Article{	  Florio:08:Survey,
    author	= {Florio, Vincenzo De and Blondia, Chris},
    title	= {A survey of linguistic structures for application-level
		  fault tolerance},
    journal	= {ACM Comput. Surv.},
    year	= {2008},
    address	= {New York, NY, USA},
    volume	= {40},
    number	= {2},
    pages	= {1--37},
    annote	= {This paper argues for software fault-tolerance; i.e., it
		  says that hardware alone cannot solve the problem of making
		  applications survive faults in the system. The reason for
		  this is the increasing complexity of software in these
		  systems and the likelihood that software fails. The paper
		  then goes on to survey the techniques that enable software
		  fault-tolerance. I need to read this more carefully to see
		  if we can apply some of these techniques in libraries or at
		  the system level.},
    abstract	= {Structures for the expression of fault-tolerance
		  fault-tolerant provisions in application software comprise
		  the central topic of this article. Structuring techniques
		  answer questions as to how to incorporate fault tolerance
		  in the application layer of a computer program and how to
		  manage the fault-tolerant code. As such, they provide the
		  means to control complexity, the latter being a relevant
		  factor for the introduction of design faults. This fact and
		  the ever-increasing complexity of today's distributed
		  software justify the need for simple, coherent, and
		  effective structures for the expression of fault-tolerance
		  in the application software. In this text we first define a
		  ``base'' of structural attributes with which
		  application-level fault-tolerance structures can be
		  qualitatively assessed and compared with each other and
		  with respect to the aforementioned needs. This result is
		  then used to provide an elaborated survey of the
		  state-of-the-art of application-level fault-tolerance
		  structures.},
    issn	= {0360-0300},
    doi		= {http://doi.acm.org/10.1145/1348246.1348249}
}

@Article{	  Floyd95SRM,
    author	= {Sally Floyd and Van Jacobson and Steve McCanne and
		  Ching-Gung Liu and Lixia Zhang},
    title	= {A Reliable Multicast Framework for Light-weight Sessions
		  and Application Level Framing},
    journal	= {ACM SIGCOMM Computer Communication Review, Conference on
		  Applications, technologies, architectures, and protocols
		  for computer communication},
    month	= {October},
    year	= {1995},
    volume	= {25},
    number	= {4},
    pages	= {342--356},
    abstract	= {This paper describes SRM (Scalable Reliable Multicast), a
		  reliable multicast framework for application level framing
		  and light-weight sessions. The algorithms of this framework
		  are efficient, robust, and scale well to both very large
		  networks and very large sessions. The framework has been
		  prototyped in wb, a distributed whiteboard application, and
		  has been extensively tested on a global scale with sessions
		  ranging from a few to more than 1000 participants. The
		  paper describes the principles that have guided our design,
		  including the IP multicast group delivery model, an
		  end-to-end, receiver-based model of reliability, and the
		  application level framing protocol model. As with unicast
		  communications, the performance of a reliable multicast
		  delivery algorithm depends on the underlying topology and
		  operational environment. We investigate that dependence via
		  analysis and simulation, and demonstrate an adaptive
		  algorithm that uses the results of previous loss recovery
		  events to adapt the control parameters used for future loss
		  recovery. With the adaptive algorithm, our reliable
		  multicast delivery algorithm provides good performance over
		  a wide range of underlying topologies.},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Fortune78PRAM,
    author	= {Steven Fortune and James Wyllie},
    title	= {Parallelism in Random Access Machines},
    booktitle	= {Tenth Annual ACM Symposium on Theory of Computing (STOC
		  '78)},
    year	= {1978},
    address	= {San Diego, CA},
    pages	= {114--118},
    publisher	= {ACM Press},
    abstract	= {A model of computation based on random access machines
		  operating in parallel and sharing a common memory is
		  presented. The computational power of this model is related
		  to that of traditional models. In particular, deterministic
		  parallel RAM's can accept in polynomial time exactly the
		  sets accepted by polynomial tape bounded Turing machines;
		  nondeterministic RAM's can accept in polynomial time
		  exactly the sets accepted by nondeterministic exponential
		  time bounded Turing machines. Similar results hold for
		  other classes. The effect of limiting the size of the
		  common memory is also considered.},
    file	= {Fortune78PRAM.pdf:Fortune78PRAM.pdf:PDF},
    keywords	= {Performance Modeling},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Manual{	  MPI,
    title	= {{MPI-2}: Extensions to the Message-Passing Interface},
    month	= {July},
    year	= {1997},
    organization = {Message Passing Interface Forum},
    owner	= {darnold},
    timestamp	= {2008.06.06}
}

@Article{	  Foster97Globus,
    author	= {Ian Foster and Carl Kesselman},
    title	= {Globus: A Metacomputing Infrastructure Toolkit},
    journal	= {International Journal of Supercomputing Applications},
    year	= {1997},
    volume	= {11},
    number	= {2},
    pages	= {115--128},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Foster02GridServices,
    author	= {Ian Foster and Carl Kesselman and Jeffrey M. Nick and
		  Steven Tuecke},
    title	= {Grid Services for Distributed System Integration},
    journal	= {IEEE Computer},
    month	= {June},
    year	= {2002},
    volume	= {35},
    number	= {6},
    pages	= {37--46},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Francis00YOID,
    author	= {Paul Francis},
    title	= {Yoid: Extending the Internet Multicast Architecture},
    month	= {April},
    year	= {2000},
    institution	= {ICSI Center for Internet Research},
    organization = {ICSI Center for Internet Research},
    url		= {http://www.icir.org/yoid/docs/ycHtmlL/htmlRoot.html},
    note	= {http://www.icir.org/yoid/docs/ycHtmlL/htmlRoot.html (Last
		  visited February 2004)},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Fukunaga75GradientEstimation,
    author	= {K. Fukunaga and L.D. Hostetler},
    title	= {The Estimation of the Gradient of a Density Function, with
		  Applications in Pattern Recognition},
    journal	= {IEEE Transactions on Information Theory},
    year	= {1975},
    volume	= {21},
    pages	= {32--40},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

_markedentry = "[darnold]",
	affiliation = "Innovative Computing Laboratory, University of Tennessee",
	owner = "darnold",
	timestamp = "2011.06.27",
	url = "http://dx.doi.org/10.1007/978-3-540-30218-6_19"
}
@InProceedings{	  Gabriel03FaultTolerantCommunication,
    author	= {Edgar Gabriel and Graham Fagg and Antonin Bukovsky and
		  Thara Angskun and Jack Dongarra},
    title	= {A Fault-Tolerant Communication Library for Grid
		  Environments},
    booktitle	= {17th ACM International Conference on Supercomputing
		  (ICS'03) International Workshop on Grid Computing and
		  e-Science},
    month	= {June},
    year	= {2003},
    address	= {San Francisco, CA},
    dates	= {21},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Gartner99AsynchronousFaultTolerance,
    author	= {Felix C. Gartner},
    title	= {Fundamentals of Fault-tolerant Distributed Computing in
		  Asynchronous Environments},
    journal	= {ACM Computing Surveys},
    year	= {1999},
    volume	= {31},
    number	= {1},
    pages	= {1--26},
    abstract	= {Fault tolerance in distributed computing is a wide area
		  with a significant body of literature that is vastly
		  diverse in methodology and terminology. This paper aims at
		  structuring the area and thus guiding readers into this
		  interesting field. We use a formal approach to define
		  important terms like fault, fault tolerance, and
		  redundancy. This leads to four distinct forms of fault
		  tolerance and to two main phases in achieving them:
		  detection and correction. We show that this can help to
		  reveal inherently fundamental structures that contribute to
		  understanding and unifying methods and terminology. By
		  doing this, we survey many existing methodologies and
		  discuss their relations. The underlying system model is the
		  close-to-reality asynchronous message-passing model of
		  distributed computing.},
    doi		= {http://doi.acm.org/10.1145/311531.311532},
    file	= {Gartner99AsynchronousFaultTolerance.pdf:Gartner99AsynchronousFaultTolerance.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  gartner:fault-tolerance,
    author	= {F. C. G\"{a}rtner},
    title	= {Fundamentals of fault-tolerant distributed computing in
		  asynchronous environments.},
    journal	= {ACM Computing Surveys},
    month	= {March},
    year	= {1999},
    volume	= {31},
    number	= {1},
    pages	= {1--26},
    institution	= {Darmstadt Univ Technol, Dept Comp Sci, Alexanderstr 10,
		  D-64283 Darmstadt, Germany; Darmstadt Univ Technol, Dept
		  Comp Sci, D-64283 Darmstadt, Germany},
    publisher	= {USA : ACM, 1999},
    abstract	= {Fault tolerance in distributed computing is a wide area
		  with a significant body of literature that is vastly
		  diverse in methodology and terminology. This paper aims at
		  structuring the area and thus guiding readers into this
		  interesting field. We use a formal approach to define
		  important terms like "fault", "fault tolerance" and
		  "redundancy". This leads to four distinct forms of fault
		  tolerance and to two main phases in achieving them:
		  detection and correction. We show that this can help to
		  reveal inherently fundamental structures that contribute to
		  understanding and unifying methods and terminology. By
		  doing this, we survey many existing methodologies and
		  discuss their relations. The underlying system model is the
		  close-to-reality asynchronous message-passing model of
		  distributed computing. (97 refs.)},
    copyright	= {(c)2004 IEE; Institute for Scientific Information, Inc.},
    keywords	= {survey, fault tolerance, distribute computing,
		  checkpointing}
}

@Article{	  Gartner:99:Fundamentals,
    author	= {G\"{a}rtner, Felix C.},
    title	= {Fundamentals of fault-tolerant distributed computing in
		  asynchronous environments},
    journal	= {ACM Comput. Surv.},
    year	= {1999},
    volume	= {31},
    number	= {1},
    pages	= {1--26},
    annote	= {This is a very formal definition of fault models and fault
		  tolerance; much more formal
		  than~\cite{Barborak:93:consensus}.},
    abstract	= {Fault tolerance in distributed computing is a wide area
		  with a significant body of literature that is vastly
		  diverse in methodology and terminology. This paper aims at
		  structuring the area and thus guiding readers into this
		  interesting field. We use a formal approach to define
		  important terms like fault, fault tolerance, and
		  redundancy. This leads to four distinct forms of fault
		  tolerance and to two main phases in achieving them:
		  detection and correction. We show that this can help to
		  reveal inherently fundamental structures that contribute to
		  understanding and unifying methods and terminology. By
		  doing this, we survey many existing methodologies and
		  discuss their relations. The underlying system model is the
		  close-to-reality asynchronous message-passing model of
		  distributed computing.},
    issn	= {0360-0300},
    doi		= {http://doi.acm.org/10.1145/311531.311532}
}

@InProceedings{	  Bosilca:2010:MLcost,
    author	= {Bosilca George and Bouteiller Aurelien and Herault Thomas
		  and Lemarinier Pierre and Dongarra Jack J.},
    title	= {Dodging the cost of unavoidable memory copies in message
		  logging protocols},
    booktitle	= {Proceedings of the 17th European MPI users' group meeting
		  conference on Recent advances in the message passing
		  interface},
    year	= {2010},
    address	= {Berlin, Heidelberg},
    pages	= {189--197},
    publisher	= {Springer-Verlag},
    series	= {EuroMPI'10},
    isbn	= {3-642-15645-2, 978-3-642-15645-8},
    location	= {Stuttgart, Germany},
    numpages	= {9},
    acmid	= {1894148}
}

@InProceedings{	  Gibbons03Gridscape,
    author	= {Hussein Gibbons and Rajkumar Buyya},
    title	= {Gridscape: A Tool for the Creation of Interactive and
		  Dynamic Grid Testbed Web Portals},
    booktitle	= {4th International Workshop on Distributed Computing (IWDC
		  2003)},
    month	= {December},
    year	= {2003},
    address	= {Calcutta, India},
    pages	= {131--142},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Gibson07PetascaleFailures,
    author	= {Garth Gibson and Bianca Schroeder and Joan Digney},
    title	= {Failure Tolerance in Petascale Computers},
    journal	= {CTWatch Quarterly},
    month	= {November},
    year	= {2007},
    volume	= {3},
    number	= {4},
    url		= {http://www.ctwatch.org/quarterly/articles/2007/11/failure-tolerance-in-petascale-computers/}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{Gioiosa05incremental,
  title={Transparent, incremental checkpointing at kernel level: a foundation for fault tolerance for parallel computers},
  author={Gioiosa, Roberto and Sancho, Jose Carlos and Jiang, Song and Petrini, Fabrizio and Davis, Kei},
  booktitle={Proceedings of the 2005 ACM/IEEE conference on Supercomputing},
  pages={9},
  year={2005},
  organization={IEEE Computer Society}
}

@InProceedings{	  Graham02FaultTolerantMessaging,
    author	= {Richard Graham and Sung-Eun Choi and David Daniel and
		  Nehal Desai and Ronald Minnich and Craig Rasmussen and L.
		  Dean Risinger and Mitchel Sukalski},
    title	= {A Network-Failure-Tolerant Message-Passing System For
		  Terascale Clusters},
    booktitle	= {16th International Conference on Supercomputing (ICS'02)},
    month	= {June},
    year	= {2002},
    address	= {New York, NY},
    pages	= {77--83},
    dates	= {22-26},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Gray97DataCube,
    author	= {Jim Gray and Surajit Chaudhuri and Adam Bosworth and
		  Andrew Layman and Don Reichart and Murali Venkatrao and
		  Frank Pellow and Hamid Pirahesh},
    title	= {Data Cube: A Relational Aggregation Operator Generalizing
		  Group-By, Cross-Tab, and Sub-Totals},
    journal	= {Data Mining and Knowledge Discovery},
    month	= {April},
    year	= {1997},
    volume	= {1},
    number	= {1},
    pages	= {29--53},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Grider:11:Exa-Scale,
    author	= {Gary Grider},
    title	= {Exa-Scale {FSIO}: Can we get there? Can we afford to?},
    booktitle	= {Proceedings of the 7th IEEE Workshop on Storage Network
		  Architecture and Parallel {I/Os}},
    year	= {2011}
}

@Article{	  Gropp:96:High-Performance,
    author	= {William Gropp and Ewing Lusk and Nathan Doss and Anthony
		  Skjellum},
    title	= {A High-Performance, Portable Implementation of the {MPI}
		  Message Passing Interface Standard},
    journal	= {Parallel Computing},
    month	= {September},
    year	= {1996},
    volume	= {22},
    number	= {6},
    pages	= {789-828}
}

@InProceedings{	  Gropp:02:MPICH2,
    author	= { William Gropp },
    editor	= { Dieter Kranzlmuller and Peter Kacsuk and Jack Dongarra
		  and Jens Volkert },
    title	= { {MPICH2}: {A} New Start for {MPI} Implementations },
    booktitle	= { Recent Advances in Parallel Virtual Machine and Message
		  Passing Interface: 9th European {PVM/MPI} Users' Group
		  Meeting},
    month	= { September/October },
    year	= { 2002 },
    volume	= { 2474 },
    series	= { Lecture Notes in Computer Science }
}

@InProceedings{	  Guardini006bone,
    author	= {Ivano Guardini and Paolo Fasano and Guglielmo Girardi},
    title	= {IPv6 Operational Experience within the 6bone},
    booktitle	= {The Internet Global Summit (INET 2000)},
    month	= {July},
    year	= {2000},
    address	= {Yokohama, Japan},
    dates	= {18-21},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Guermouche:11:Uncoordinated,
    author	= {Guermouche, Amina and Ropars, Thomas and Brunet, Elisabeth
		  and Snir, Marc and Cappello, Franck},
    title	= {Uncoordinated Checkpointing Without Domino Effect for
		  Send-Deterministic {MPI} Applications},
    booktitle	= {International Parallel Distributed Processing Symposium
		  ({IPDPS})},
    month	= {May},
    year	= {2011},
    volume	= {},
    number	= {},
    pages	= {989--1000},
    abstract	= {As reported by many recent studies, the mean time between
		  failures of future post-petascale supercomputers is likely
		  to reduce, compared to the current situation. The most
		  popular fault tolerance approach for MPI applications on
		  HPC Platforms relies on coordinated check pointing which
		  raises two major issues: a) global restart wastes energy
		  since all processes are forced to rollback even in the case
		  of a single failure, b) checkpoint coordination may slow
		  down the application execution because of congestions on
		  I/O resources. Alternative approaches based on
		  uncoordinated check pointing and message logging require
		  logging all messages, imposing a high memory/storage
		  occupation and a significant overhead on communications. It
		  has recently been observed that many MPI HPC applications
		  are send-deterministic, allowing to design new fault
		  tolerance protocols. In this paper, we propose an
		  uncoordinated check pointing protocol for
		  send-deterministic MPI HPC applications that (i) logs only
		  a subset of the application messages and (ii) does not
		  require to restart systematically all processes when a
		  failure occurs. We first describe our protocol and prove
		  its correctness. Through experimental evaluations, we show
		  that its implementation in MPICH2 has a negligible overhead
		  on application performance. Then we perform a quantitative
		  evaluation of the properties of our protocol using the NAS
		  Benchmarks. Using a clustering approach, we demonstrate
		  that this protocol actually succeeds to combine the two
		  expected properties: a) it logs only a small fraction of
		  the messages and b) it reduces by a factor approaching 2
		  the average number of processes to rollback compared to
		  coordinated check pointing.},
    keywords	= {HPC platform;I/O resource congestion;checkpoint
		  coordination;domino effect;failure;fault tolerance
		  protocol;global restart wastes energy;memory-storage
		  occupation;message logging;post-petascale
		  supercomputer;send-deterministic MPI HPC
		  application;uncoordinated checkpointing;checkpointing;fault
		  tolerance;message passing;parallel machines;},
    issn	= {1530-2075}
}

@Article{	  guerraoui1997sbr,
    author	= {R. Guerraoui and A. Schiper},
    title	= {{Software-Based Replication for Fault Tolerance}},
    journal	= {Computer},
    year	= {1997},
    volume	= {30},
    number	= {4},
    pages	= {68--74},
    publisher	= {IEEE Computer Society Press Los Alamitos, CA, USA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Gunter02Monitoring,
    author	= {Dan Gunter and Brian Tierney and Keith Jackson and Jason
		  Lee and Martin Stoufer},
    title	= {Dynamic Monitoring of High-performance Distributed
		  Applications},
    booktitle	= {11th IEEE Symposium on High Performance Distributed
		  Computing (HPDC 11)},
    month	= {July},
    year	= {2002},
    address	= {Edinburgh, Scotland},
    pages	= {163--170},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Gupta01FailureDetectors,
    author	= {Indranil Gupta and Tushar D. Chandra and German S.
		  Goldszmidt},
    title	= {On Scalable and Efficient Distributed Failure Detectors},
    booktitle	= {Twentieth ACM Symposium on Principles of Distributed
		  Computing},
    year	= {2001},
    address	= {Newport, RI},
    pages	= {170--179},
    publisher	= {ACM Press},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/VanRenesse98GossipStyleFailureDetection.pdf}
		  ,
    abstract	= {Process groups in distributed applications and services
		  rely on failure detectors to detect process failures
		  completely, and as quickly, accurately, and scalably as
		  possible, even in the face of unreliable message
		  deliveries. In this paper, we look at quantifying the
		  optimal scalability, in terms of network load, (in messages
		  per second, with messages having a size limit) of
		  distributed, complete failure detectors as a function of
		  application-specified requirements. These requirements are
		  1) quick failure detection by some non-faulty process, and
		  2) accuracy of failure detection. We assume a
		  crash-recovery (non-Byzantine) failure model, and a network
		  model that is probabilistically unreliable (w.r.t. message
		  deliveries and process failures). First, we characterize,
		  under certain independence assumptions, the optimum
		  worst-case network load imposed by any failure detector
		  that achieves an application's requirements. We then
		  discuss why traditional heart beating schemes are
		  inherently unscalable according to the optimal load. We
		  also present a randomized, distributed, failure detector
		  algorithm that imposes an equal expected load per group
		  member. This protocol satisfies the application defined
		  constraints of completeness and accuracy, and speed of
		  detection on an average. It imposes a network load that
		  differs frown the optimal by a sub-optimality factor that
		  is much lower than that for traditional distributed
		  heartbeating schemes. Moreover, this sub-optimality factor
		  does not vary with group size (for large groups).},
    file	= {Gupta01FailureDetectors.pdf:Gupta01FailureDetectors.pdf:PDF}
		  ,
    isbn	= {1-58113-383-9},
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Gupta01Aggregation,
    author	= {Indranil Gupta and Robert van Renesse and Kenneth P.
		  Birman},
    title	= {Scalable Fault-Tolerant Aggregation in Large Process
		  Groups},
    booktitle	= {2001 International Conference on Dependable Systems and
		  Networks (DSN '01)},
    month	= {June/July},
    year	= {2001},
    address	= {G{\o}teborg, Sweden},
    pages	= {433--442},
    publisher	= {IEEE Computer Society},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Gupta02EpidemicStyleMulticast,
    author	= {Indranil Gupta and Anne-Marie Kermarrec and Ayalvadi J.
		  Ganesh},
    title	= {Efficient Epidemic-style protocols for Reliable and
		  Scalable Multicast},
    booktitle	= {21st Symposium on Reliable Distributed Systems (SRDS
		  2002)},
    month	= {October},
    year	= {2002},
    pages	= {180--189},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/ReliableMulticast/Gupta02EpidemicMulticast.pdf}
		  ,
    abstract	= {Epidemic-style (gossip-based) techniques have recently
		  emerged as a scalable class of protocols for peer-to-peer
		  reliable multicast dissemination in large process groups.
		  These protocols provide probabilistic guarantees on
		  reliability and scalability. However, popular
		  implementations of epidemic-style dissemination are reputed
		  to suffer from two major drawbacks: (a) (Network Overhead)
		  when deployed on a WAN-wide or VPN-wide scale they generate
		  a large number of packets that transit across the
		  boundaries of multiple network domains (e.g., LANs,
		  subnets, ASs), causing an overload on core network elements
		  such as bridges, routers, and associated links; (b) (Lack
		  of Adaptivity) they impose the same load on process group
		  members and the network even under reduced failure rates
		  (viz., packet losses, process failures). In this paper, we
		  report on the (first) comprehensive set of solutions to
		  these problems. The solution is comprised of two protocols:
		  (1) a Hierarchical Gossiping protocol, and (2) an Adaptive
		  multicast Dissemination Framework that allows use of any
		  gossiping primitive within it. These protocols work within
		  a virtual peer-to-peer hierarchy called the Leaf Box
		  Hierarchy. Processes can be allocated in a topologically
		  aware manner to the leaf boxes of this structure, so that
		  (1) and (2) produce low traffic across domain boundaries in
		  the network. In the interests of space, this paper focuses
		  on a detailed discussion and evaluation (through
		  simulations) of only the Hierarchical Gossiping protocol.
		  We present an overview of the Adaptive Dissemination
		  protocol and its properties.},
    file	= {Gupta02EpidemicMulticast.pdf:/afs/cs.wisc.edu/u/d/a/darnold/shared/research/Bibliography/pdfs/Gupta02EpidemicMulticast.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@PhDThesis{	  Gupta03ScalableSolutions,
    author	= {Indranil Gupta},
    title	= {Building Scalable Solutions to Distributed Computing
		  Problems Using Probalistic Components},
    month	= {August},
    year	= {2003},
    school	= {Cornell University},
    file	= {Gupta03ProbablisticComputingThesis.pdf:/afs/cs.wisc.edu/u/d/a/darnold/shared/research/Bibliography/pdfs/Gupta03ProbablisticComputingThesis.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Gupta:09:CIFTS,
    author	= {R. Gupta and P. Beckman and B. H. Park and E. Lusk and P.
		  Hargrove and A. Geist and D. K. Panda and A. Lumsdaine and
		  J. Dongarra},
    title	= {CIFTS: A Coordinated infrastructure for Fault-Tolerant
		  Systems},
    booktitle	= {{\bf To appear} in the Proceedings of the 38th
		  International Conference on Parallel Processing},
    year	= {2009}
}

@Article{	  Guting94SpatialDatabases,
    author	= {Ralf Hartmut Guting},
    title	= {An Introduction to Spatial Database Systems},
    journal	= {The VLDB Journal},
    year	= {1994},
    address	= {Secaucus, NJ},
    volume	= {3},
    number	= {4},
    pages	= {357--399},
    publisher	= {Springer-Verlag New York, Inc.},
    issn	= {1066-8888},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Hacker:09:Analysis,
    author	= {Hacker, Thomas J. and Romero, Fabian and Carothers,
		  Christopher D.},
    title	= {An analysis of clustered failures on large supercomputing
		  systems},
    journal	= {J. Parallel Distrib. Comput.},
    month	= jul,
    year	= {2009},
    address	= {Orlando, FL, USA},
    volume	= {69},
    pages	= {652--665},
    publisher	= {Academic Press, Inc.},
    abstract	= {Large supercomputers are built today using thousands of
		  commodity components, and suffer from poor reliability due
		  to frequent component failures. The characteristics of
		  failure observed on large-scale systems differ from smaller
		  scale systems studied in the past. One striking difference
		  is that system events are clustered temporally and
		  spatially, which complicates failure analysis and
		  application design. Developing a clear understanding of
		  failures for large-scale systems is a critical step in
		  building more reliable systems and applications that can
		  better tolerate and recover from failures. In this paper,
		  we analyze the event logs of two large IBM Blue Gene
		  systems, statistically characterize system failures,
		  present a model for predicting the probability of node
		  failure, and assess the effects of differing rates of
		  failure on job failures for large-scale systems. The work
		  presented in this paper will be useful for developers and
		  designers seeking to deploy efficient and reliable
		  petascale systems.},
    issue	= {7},
    issn	= {0743-7315},
    doi		= {10.1016/j.jpdc.2009.03.007}
}

@TechReport{	  Hagens89OSI,
    author	= {Robert A. Hagens and Nancy E. Hall and Marshall T. Rose},
    title	= {Use of the Internet as a Subnetwork for Experimentation
		  with the OSI Network Layer},
    month	= {February},
    year	= {1989},
    number	= {1070},
    organization = {Internet RFC},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Hargrove:06:Berkeley,
    author	= {Paul H. Hargrove and Jason C. Duell},
    title	= {Berkeley Lab Checkpoint/Restart (BLCR) for Linux
		  Clusters},
    month	= jun,
    year	= {2006},
    number	= {LBNL-60520},
    institution	= {Berkeley Lab},
    url		= {https://ftg.lbl.gov/CheckpointRestart/Pubs/LBNL-60520.pdf}
		  ,
    annote	= {A very brief description of the goals and design of BLCR.
		  The original tech report~\cite{Duell:02:Design} has more
		  information than this paper.},
    abstract	= {This article describes the motivation, design and
		  implementation of Berkeley Lab Checkpoint/Restart (BLCR), a
		  system-level checkpoint/restart implementation for Linux
		  clusters that targets the space of typical High Performance
		  Computing applications, including MPI. Application-level
		  solutions, including both checkpointing and fault-tolerant
		  algorithms, are recognized as more time and space efficient
		  than system-level checkpoints, which cannot make use of any
		  application-specific knowledge. However, system-level
		  checkpointing allows for preemption, making it suitable for
		  responding to “fault precursors” (for instance,
		  elevated error rates from ECC memory or network CRCs, or
		  elevated temperature from sensors). Preemption can also
		  increase the efficiency of batch scheduling; for instance
		  reducing idle cycles (by allowing for shutdown without any
		  queue draining period or reallocation of resources to
		  eliminate idle nodes when better fitting jobs are queued),
		  and reducing the average queued time (by limiting large
		  jobs to running during off-peak hours, without the need to
		  limit the length of such jobs). Each of these potential
		  uses makes BLCR a valuable tool for efficient resource
		  management in Linux clusters.}
}

@InProceedings{	  Helary97PreventingUselessCheckpoints,
    author	= {Jean-Michel Helary and Achour Mostefaoui and Michel
		  Raynal},
    title	= {Preventing Useless Checkpoints in Distributed
		  Computations},
    booktitle	= {16th Symposium on Reliable Distributed Systems (SRDS
		  '97)},
    month	= {October},
    year	= {1997},
    address	= {Durham, NC},
    pages	= {183--190},
    publisher	= {IEEE Computer Society},
    dates	= {22--24},
    isbn	= {0-8186-8177-2},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

_markedentry = "[darnold]",
	owner = "darnold",
	timestamp = "2011.06.27"
}
@Article{	  Helary97Agreement,
    author	= {Jean-Michel Helary and M. Hurfin},
    title	= {Solving Agreement Problems with Failure Detectors: A
		  Survey},
    journal	= {Annals of Telecommunications},
    month	= {September--October},
    year	= {1997},
    volume	= {52},
    number	= {9--10},
    pages	= {447--464},
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Helary99Consistency,
    author	= {Jean-Michel Helary and Robert H. B. Netzer and Michel
		  Raynal},
    title	= {Consistency Issues in Distributed Checkpoints},
    journal	= { IEEE Transactions on Software Engineering},
    month	= {March--April},
    year	= {1999},
    volume	= {25},
    number	= {2},
    pages	= {274--281},
    abstract	= {A global checkpoint is a set of local checkpoints, one per
		  process. The traditional consistency criterion for global
		  checkpoints states that a global checkpoint is consistent
		  if it does not include messages received and not sent. The
		  paper investigates other consistency criteria,
		  transitlessness, and strong consistency. A global
		  checkpoint is transitless if it does not exhibit messages
		  sent and not received. Transitlessness can be seen as a
		  dual of traditional consistency. Strong consistency is the
		  addition of transitlessness to traditional consistency. The
		  main result of the paper is a statement of the necessary
		  and sufficient condition answering the following question:
		  ?given an arbitrary set of local checkpoints, can this set
		  be extended to a global checkpoint that satisfies P? (where
		  P is traditional consistency, transitlessness, or strong
		  consistency). From a practical point of view, this
		  condition, when applied to transitlessness, is particularly
		  interesting as it helps characterize which messages do not
		  need to be recorded by checkpointing protocols.},
    file	= {Helary99Consistency.pdf:Helary99Consistency.pdf:PDF},
    keywords	= {Distributed Consistency},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Heroux09Mantevo,
    author	= {Michael A. Heroux and Douglas W. Doerfler and Paul S.
		  Crozier and James M. Willenbring and H. Carter Edwards and
		  Alan Williams and Mahesh Rajan and Eric R. Keiter and Heidi
		  K. Thornquist and Robert W. Numrich},
    title	= {Improving Performance via Mini-applications},
    year	= {2009},
    number	= {SAND2009-5574},
    institution	= {Sandia National Laboratory}
}

@InProceedings{	  Hertel:93:CTH,
    author	= {E. S. Hertel,Jr. and R. L. Bell and M. G. Elrick and A. V.
		  Farnsworth and G. I. Kerley and J. M. McGlaun and S. V.
		  PetneY and S. A. Silling and P. A. Taylor and L.
		  Yarrington},
    title	= {{CTH}: A Software Family for Multi-Dimensional Shock
		  Physics Analysis},
    booktitle	= {Proceedings of the 19th Intl. Symp. on Shock
		  Waves},
    month	= jul,
    year	= {1993},
    pages	= {377--382}
}

@Article{	  Hoare78CSP,
    author	= {C. A. R. Hoare},
    title	= {Communicating Sequential Processes},
    journal	= {Communications of the ACM},
    year	= {1978},
    address	= {New York, NY},
    volume	= {21},
    number	= {8},
    pages	= {666--677},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/359576.359585},
    issn	= {0001-0782},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Holbrook95LBRM,
    author	= {Hugh W. Holbrook and Sandeep K. Singhai and David R.
		  Cheriton},
    title	= {Log-Based Receiver-Reliable Multicast for Distributed
		  Interactive Simulation},
    booktitle	= {Conference on Applications, Technologies, Architectures,
		  and Protocols for Computer Communication},
    month	= {October},
    year	= {1995},
    address	= {Cambridge, MA},
    pages	= {328--341},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Holbrook99EXPRESS,
    author	= {Hugh Holbrook and David Cheriton},
    title	= {IP Multicast Channels: EXPRESS Support for Large-scale
		  Single-source Applications},
    booktitle	= {Conference on Applications, Technologies, Architectures,
		  and Protocols for Computer Communication},
    year	= {1999},
    address	= {Cambridge, MA},
    pages	= {65--78},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Hollingsworth97,
    author	= {Jeffrey K. Hollingsworth and Barton P. Miller and Marcelo
		  J. R. Gon?alves and Oscar Naim and Zhichen Xu and Ling
		  Zheng},
    title	= {MDL: A Language and Compiler for Dynamic Program
		  Instrumentation},
    booktitle	= {International Conference on Parallel Architectures and
		  Compilation Techniques (PACT 97)},
    month	= {November},
    year	= {1997},
    address	= {San Francisco, CA},
    pages	= {201--213},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Holst:95:general,
    author	= {Holst, Lars},
    title	= {The general birthday problem},
    booktitle	= {Random Graphs 93: Proceedings of the sixth international
		  seminar on Random graphs and probabilistic methods in
		  combinatorics and computer science},
    year	= {1995},
    address	= {New York, NY, USA},
    pages	= {201--208},
    publisher	= {John Wiley \& Sons, Inc.},
    abstract	= {The general birthday problem with unlike birth
		  probabilities and the waiting time N until c people with
		  the same birthday have been obtained is studied in this
		  article. It is shown that N is stochastically largest when
		  the birth probabilities are equal. By embedding in Poisson
		  processes it is shown how the moments of N can be expressed
		  in moments of the minimum of gamma random variables.},
    location	= {Pozna\'{n}, Poland}
}

%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Jon Stearley at 2010-03-11 12:27:22 -0700 


%% Saved with string encoding Unicode (UTF-8)
@Article{	  holst-birthday,
    author	= {Lars Holst},
    title	= {The General Birthday Problem},
    journal	= {Random Structures and Algorithms},
    month	= {July},
    year	= {2007},
    volume	= {6},
    number	= {2-3},
    pages	= {201-208},
    abstract	= {The general birthday problem with unlike birth
		  probabilities and the waiting time N until c people with
		  the same birthday have been obtained is studied in this
		  article. It is shown that N is stochastically largest when
		  the birth probabilities are equal. By embedding in Poisson
		  processes it is shown how the moments of N can be expressed
		  in moments of the minimum of gamma random variables.},
    date-added	= {2010-03-11 09:34:17 -0700},
    date-modified = {2010-03-11 09:35:42 -0700}
}

@InProceedings{	  Hood96p2d2,
    author	= {Robert Hood},
    title	= {{The p2d2 Project: Building a Portable Distributed
		  Debugger}},
    booktitle	= {SIGMETRICS Symposium on Parallel and Distributed Tools
		  (SPDT) },
    year	= {1996},
    address	= {Philadelphia, PA},
    pages	= {127--136},
    doi		= {http://doi.acm.org/10.1145/238020.238058},
    isbn	= {0-89791-846-0},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Horning74ErrorDetectionRecovery,
    author	= {James J. Horning and Hugh C. Lauer and P. M. Melliar-Smith
		  and Brian Randell},
    title	= {A Program Structure for Error Detection and Recovery},
    booktitle	= {International Symposium on Operating Systems},
    year	= {1974},
    address	= {London, UK},
    pages	= {171--187},
    publisher	= {Springer-Verlag},
    file	= {Horning74ErrorDetectionRecovery.pdf:Horning74ErrorDetectionRecovery.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Howes95DirectoryService,
    author	= {Timothy A. Howes and Mark C. Smith},
    title	= {A Scalable, Deployable Directory Service Framework for the
		  Internet},
    year	= {1995},
    number	= {CITI TR-95-7},
    organization = {University of Michigan},
    department	= {Center for Information Technology Integration},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{Huang84abft,
  title={Algorithm-based fault tolerance for matrix operations},
  author={Huang, Kuang-Hua and Abraham, Jacob A.},
  journal={Computers, IEEE Transactions on},
  volume={100},
  number={6},
  pages={518--528},
  year={1984},
  publisher={IEEE}
}

@TechReport{	  Hunt76DifferentialFileComparison,
    author	= {James W. Hunt and M. Douglas McIlroy},
    title	= {An Algorithm for Differential File Comparison},
    year	= {1976},
    number	= {CSTR \#41},
    institution	= {Bell Telephone Laboratories},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Hursey:09:openmpi_cr,
    author	= {Hursey, Joshua and Mattox, Timothy I. and Lumsdaine,
		  Andrew},
    title	= {Interconnect agnostic checkpoint/restart in {Open MPI}},
    booktitle	= {HPDC '09: Proceedings of the 18th ACM international
		  symposium on High Performance Distributed Computing},
    year	= {2009},
    address	= {New York, NY, USA},
    pages	= {49--58},
    publisher	= {ACM},
    isbn	= {978-1-60558-587-1},
    location	= {Garching, Germany},
    doi		= {http://doi.acm.org/10.1145/1551609.1551619}
}

@InProceedings{	  Hursey:09:Interconnect,
    author	= {Hursey, Joshua and Mattox, Timothy I. and Lumsdaine,
		  Andrew},
    title	= {Interconnect agnostic checkpoint/restart in open MPI},
    booktitle	= {HPDC '09: Proceedings of the 18th ACM international
		  symposium on High performance distributed computing},
    year	= {2009},
    pages	= {49--58},
    abstract	= {Long running High Performance Computing (HPC) applications
		  at scale must be able to tolerate inevitable faults if they
		  are to harness current and future HPC systems. Message
		  Passing Interface (MPI) level transparent
		  checkpoint/restart fault tolerance is an appealing option
		  to HPC application developers that do not wish to
		  restructure their code. Historically, MPI implementations
		  that provided this option have struggled to provide a full
		  range of interconnect support, especially shared memory
		  support. This paper presents a new approach for
		  implementing checkpoint/restart coordination algorithms
		  that allows the MPI implementation of checkpoint/restart to
		  be interconnect agnostic. This approach allows an
		  application to be checkpointed on one set of interconnects
		  (e.g., InfiniBand and shared memory) and be restarted with
		  a different set of interconnects (e.g., Myrinet and shared
		  memory or Ethernet). By separating the network interconnect
		  details from the checkpoint/restart coordination algorithm
		  we allow the HPC application to respond to changes in the
		  cluster environment such as interconnect unavailability due
		  to switch failure, re-load balance on an existing machine,
		  or migrate to a different machine with a different set of
		  interconnects. We present results characterizing the
		  performance impact of this approach on HPC applications.},
    isbn	= {978-1-60558-587-1},
    location	= {Garching, Germany},
    doi		= {http://doi.acm.org/10.1145/1551609.1551619}
}

@PhDThesis{	  Hursey10CoordinatedCRMPI,
    author	= {Joshua Hursey},
    title	= {Coordinated Checkpoint/Restart Process Fault Tolerance for
		  {MPI} Applications on {HPC} Systems},
    month	= {July},
    year	= {2010},
    school	= {Indiana University}
}

@InProceedings{	  Hursey11FaultTolerantMPI,
    author	= {Joshua Hursey and Richard Graham},
    title	= {Building a Fault Tolerant {MPI} Application: A Ring
		  Communication Example},
    booktitle	= {16th International Workshop on Dependable Parallel,
		  Distributed and Network-Centric Systems (DPDNS) held in
		  conjunction with the 25th {IEEE} International Parallel and
		  Distributed Processing Symposium (IPDPS)},
    month	= {May},
    year	= {2011},
    address	= {Anchorage, Alaska}
}

@TechReport{	  Hwang03FailureDetection,
    author	= {Soonwook Hwang and Carl Kesselman},
    title	= {A Generic Failure Detection Service for the Grid},
    month	= {Feb},
    year	= {2003},
    number	= {ISI-TR-568},
    institution	= {Information Sciences Institute, University of Southern
		  CA},
    organization = {USC Information Sciences Institute},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Hwang03FailureDetection.pdf}
		  ,
    abstract	= {With the emergence of Grid technologies, a great deal of
		  so-called Grid applications, tools, and systems have been
		  developed over the past few years; they basically rely on
		  the standard Grid protocol for the execution of their
		  computations on Grid resources. Unfortunately, the Grid
		  protocol is too generic to support any fault tolerance
		  mechanisms. Consequently, Grid applications either have
		  been ignoring fault tolerance issues, or different
		  applications have been adopting ad hoc fault},
    file	= {Hwang03FailureDetection.pdf:Hwang03FailureDetection.pdf:PDF}
		  ,
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Hwang03GridWorkflow,
    author	= {Soonwook Hwang and Carl Kesselman},
    title	= {Grid Workflow: A Flexible Failure Handling Framework for
		  the Grid},
    booktitle	= {12th International Symposium on High Performance
		  Distributed Computing (HPDC-12)},
    month	= {June},
    year	= {2003},
    pages	= {126--137},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Hwang03GridWorkflow.pdf}
		  ,
    abstract	= {The generic, heterogeneous, and dynamic nature of the Grid
		  requires a new form of failure recovery mechanism to
		  address its unique requirements such as support for diverse
		  failure handling strategies, separation of failure handling
		  strategies from application codes, and user-defined
		  exception handling. We here propose a Grid Workflow System
		  (Grid-WFS), a flexible failure handling framework for the
		  Grid, which addresses these Grid-unique failure recovery
		  requirements. Central to the framework is flexibility in
		  handing failures. We describe how to achieve the
		  flexibility by the use of workflow structure as a
		  high-level recovery policy specification. We show how this
		  use of high-level workflow structure allows users to
		  achieve failure recovery in a variety of ways depending on
		  the requirements and constraints of their applications. We
		  also demonstrate that this use of workflow structure
		  enables users to not only rapidly prototype and investigate
		  failure handling strategies, but also easily change them by
		  simply modifying the encompassing workflow structure, while
		  the application code remains intact. Finally, we present an
		  experimental evaluation of our framework using a
		  simulation, demonstrating the value of supporting multiple
		  failure recovery techniques in Grid systems to achieve high
		  performance in the presence of failures.},
    file	= {Hwang03GridWorkflow.pdf:Hwang03GridWorkflow.pdf:PDF},
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Hwang05HighAvailability,
    author	= {Jeong-Hyon Hwang and Magdalena Balazinska and Alexander
		  Rasin and Ugur Cetintemel and Michael Stonebraker and Stan
		  Zdonik},
    title	= {High-Availability Algorithms for Distributed Stream
		  Processing},
    booktitle	= {21st International Conference on Data Engineering
		  (ICDE'05)},
    month	= {April},
    year	= {2005},
    address	= {Tokyo, Japan},
    pages	= {779--790},
    date	= {5--8},
    doi		= {http://dx.doi.org/10.1109/ICDE.2005.72},
    isbn	= {0-7695-2285-8},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{   Hwang:12:cosmic,
    author = {Hwang, Andy A and Stefanovici, Ioan A and Schroeder, Bianca},
    title  = {Cosmic rays don't strike twice: understanding the nature of DRAM errors 
        and the implications for system design},
    booktitle={Proceedings of the seventeenth international conference on Architectural 
        Support for Programming Languages and Operating Systems},
    pages={111--122},
    year={2012},
    organization={ACM}
}

@Misc{		  pdbx,
    author	= {{IBM}},
    title	= {{Parallel Environment (PE)}},
    note	= {http://www-03.ibm.com/systems/p/software/pe.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Conference{	  Ibtesham11Compression,
    author	= {Dewan Ibtesham and Dorian Arnold and Kurt Ferreira and
		  Patrick Bridges},
    title	= {On the Viability of Checkpoint Compression for Extreme
		  Scale Fault Tolerance},
    booktitle	= {Lecture Notes in Computer Science: Proceedings of the
		  $17^{th}$ European Conference on Parallel and Distributed
		  Computing (Euro-Par) 2011: $4^{th}$ Workshop on Resiliency
		  in High Performance Computing (Resilience) in Clusters,
		  Clouds, and Grids},
    month	= aug # {~29 - }  # sep # {~2, },
    year	= {2011},
    address	= {Bordeaux, France},
    volume	= {},
    pages	= {},
    publisher	= {Springer Verlag, Berlin, Germany}
}

@InProceedings{	  Ino01LogGPS,
    author	= {Fumihiko Ino and Noriyuki Fujimoto and Kenichi Hagihara},
    title	= {LogGPS: a parallel computational model for synchronization
		  analysis},
    booktitle	= {PPoPP '01: Eighth ACM SIGPLAN Symposium on Principles and
		  Practices of Parallel Programming},
    year	= {2001},
    address	= {New York, NY},
    pages	= {133--142},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/379539.379592},
    isbn	= {1-58113-346-4},
    location	= {Snowbird, Utah},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  IntelThreadChecker,
    author	= {{Intel}},
    title	= {{Intel(R) Thread Checker}},
    note	= {http://www.intel.com/support/performancetools/threadchecker}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Book{		  Iverson62APL,
    author	= {Kenneth E. Iverson},
    title	= {A Programming Language},
    year	= {1962},
    address	= {New York, NY},
    publisher	= {John Wiley \& Sons, Inc.},
    isbn	= {0-471430-14-5},
    owner	= {darnold},
    source	= {Library of Congress Catalog Card Number: 62-15180},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Jain04FailureDetection,
    author	= {Amit Jain and R. K. Shyamasundar},
    title	= {Failure Detection and Membership Management in Grid
		  Environments},
    booktitle	= {Fifth IEEE/ACM International Workshop on Grid Computing
		  (GRID'04)},
    year	= {2004},
    address	= {Washington, DC},
    pages	= {44--52},
    publisher	= {IEEE Computer Society},
    abstract	= {Failure detectors are an integral part of any fault
		  tolerant distributed system and hence have been a
		  well-studied area. However, earlier proposed failure
		  detectors fail to perform efficiently when applied to Grid
		  environments. Most of the earlier proposed detectors were
		  either designed for local area networks or to handle small
		  number of nodes and hence lack in areas such as
		  scalability, efficiency, running times etc. In this paper
		  we propose a highly scalable failure detector protocol that
		  is aided by a membership management service. The membership
		  management service is essential to make the failure
		  detector transparent to changes in the system. Using a
		  distributed heartbeat mechanism, for an unreliable failure
		  detector, we have overcome the shortcomings of similar
		  schemes proposed earlier. It realizes scalability by
		  reducing context switching requirements and achieves faster
		  failure detection . The membership management protocol
		  handles membership issues with a worst case complexity of
		  O(n) where n is the number of heartbeat groups. Note that
		  is much smaller than the total number of nodes in the Grid.
		  The algorithm is also shown to be failure resilient and
		  scalable.},
    doi		= {http://dx.doi.org/10.1109/GRID.2004.30},
    file	= {Jain04FailureDetection.pdf:Jain04FailureDetection.pdf:PDF}
		  ,
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{ Jangjaimon2013Adaptive,
  title={Adaptive incremental checkpointing via delta compression for networked multicore systems},
  author={Jangjaimon, Itthichok and Tzeng, Nian-Feng},
  booktitle={Parallel \& Distributed Processing (IPDPS), 2013 IEEE 27th International Symposium on},
  pages={7--18},
  year={2013},
  organization={IEEE}
}

@InProceedings{	  Jannotti00Overcast,
    author	= {John Jannotti and David K. Gifford and Kirk L Johnson and
		  M. Frans Kaashoek and James W. O'Toole},
    title	= {Overcast: Reliable Multicasting with an Overlay Network},
    booktitle	= {4th Symposium on Operating Systems Design and
		  Implementation (OSDI 2000)},
    month	= {October},
    year	= {2000},
    address	= {San Diego, CA},
    dates	= {22-25},
    file	= {Jannotti00Overcast.pdf:Jannotti00Overcast.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{Janssen2010Simulator,  
    title={A simulator for large-scale parallel computer architectures},
    author={Janssen, Curtis L and Adalsteinsson, Helgi and Cranford, Scott and Kenny, Joseph P and Pinar, Ali and Evensky, David A and Mayo, Jackson}, 
    journal={International Journal of Distributed Systems and Technologies (IJDST)},  volume={1},  number={2},
    pages={57--73},  year={2010},
    publisher={IGI Global}
}

@InProceedings{	  Jette03SLURM,
    author	= {Morris A. Jette and Mark Grondona},
    title	= {{SLURM: Simple Linux Utility for Resource Management}},
    booktitle	= {ClusterWorld Conference and Expo},
    month	= {June},
    year	= {2003},
    address	= {San Jose, California},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Jiang06RobustAggregation,
    author	= {Hongbo Jiang and Shudong Jin},
    title	= {Scalable and Robust Aggregation Techniques for Extracting
		  Statistical Information in Sensor Networks},
    booktitle	= {26th IEEE International Conference on Distributed
		  Computing Systems (ICDCS '06)},
    month	= {July},
    year	= {2006},
    address	= {Lisboa, Portugal},
    pages	= {69},
    publisher	= {IEEE Computer Society},
    dates	= {4--7},
    doi		= {http://dx.doi.org/10.1109/ICDCS.2006.73},
    isbn	= {0-7695-2540-7},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Jiang:07:Optimistic,
    author	= {Jiang, Q. and Manivannan, D.},
    title	= {An optimistic checkpointing and selective message logging
		  approach for consistent global checkpoint collection in
		  distributed systems},
    booktitle	= { Proceedings of the 2007 IEEE International Parallel and
		  Distributed Processing Symposium },
    month	= mar,
    year	= {2007},
    annote	= {This looks similar to~\cite{Ahn:07:2-step}. but is much
		  more readable. It is not clear to me how (and whether) the
		  two algorithms differ, due to the difficulty of
		  reading~\cite{Ahn:07:2-step}. This paper argues for
		  uncoordinated checkpoints to ease contention at the I/O
		  system. For performance reasons their algorithm also takes
		  regular, coordinated checkpoints. The journal version of
		  this article is~\cite{Jiang:08:Optimistic}},
    abstract	= {In this paper, we present an asynchronous consistent
		  global checkpoint collection algorithm which prevents
		  contention for network storage at the file server and hence
		  reduces the checkpointing overhead. The algorithm has two
		  phases: In the first phase, a process initiates consistent
		  global checkpoint collection by saving its state
		  tentatively and asynchronously (called tentative
		  checkpoint) in local memory or remote stable storage if
		  there is no contention for stable storage while saving the
		  state; in the second phase, the message log associated with
		  the tentative checkpoint is stored in stable storage
		  (checkpoint finalization phase). The tentative checkpoint
		  together with the associated message log stored in the
		  stable storage becomes part of a consistent global
		  checkpoint. Under our algorithm, two or more processes can
		  concurrently initiate consistent global checkpoint
		  collection. Every tentative checkpoint will be finalized
		  successfully unless a failure occurs. The finalized
		  checkpoints of each process is assigned a unique sequence
		  number in ascending order. Finalized checkpoints with same
		  sequence number form a consistent global checkpoint.},
    keywords	= {checkpointing, message passing, distributed system,
		  network storage, optimistic checkpointing, selective
		  message logging, tentative checkpoint},
    doi		= {http://dx.doi.org/10.1109/IPDPS.2007.370308},
    issn	= {}
}

@Article{	  Jiang:08:optimistic,
    author	= {Jiang,, Qiangfeng and Luo,, Yi and Manivannan,, D.},
    title	= {An optimistic checkpointing and message logging approach
		  for consistent global checkpoint collection in distributed
		  systems},
    journal	= {J. Parallel Distrib. Comput.},
    year	= {2008},
    volume	= {68},
    number	= {12},
    pages	= {1575--1589},
    annote	= {This is the journal version
		  of~\shortcite{Jiang:07:Optimistic}. It contains a
		  performance evaluation of their algorithm.},
    abstract	= {Checkpointing and rollback recovery are widely used
		  techniques for achieving fault-tolerance in distributed
		  systems. In this paper, we present a novel checkpointing
		  algorithm which has the following desirable features: A
		  process can independently initiate consistent global
		  checkpointing by saving its current state, called a
		  tentative checkpoint. Other processes come to know about a
		  consistent global checkpoint initiation through information
		  piggy-backed with the application messages or limited
		  control messages if necessary. When a process comes to know
		  about a new consistent global checkpoint initiation, it
		  takes a tentative checkpoint after processing the message
		  (not before processing the message as in existing
		  communication-induced checkpointing algorithms). After a
		  process takes a tentative checkpoint, it starts logging the
		  messages sent and received in memory. When a process comes
		  to know that every other process has taken a tentative
		  checkpoint corresponding to current consistent global
		  checkpoint initiation, it flushes the tentative checkpoint
		  and the message log to the stable storage. The tentative
		  checkpoints together with the message logs stored in the
		  stable storage form a consistent global checkpoint. Two or
		  more processes can concurrently initiate consistent global
		  checkpointing by taking a new tentative checkpoint; in that
		  case, the tentative checkpoints taken by all these
		  processes will be part of the same consistent global
		  checkpoint. The sequence numbers assigned to checkpoints by
		  a process increase monotonically. Checkpoints with the same
		  sequence number form a consistent global checkpoint. We
		  also present the performance evaluation of our algorithm.},
    issn	= {0743-7315},
    doi		= {http://dx.doi.org/10.1016/j.jpdc.2008.08.003}
}

@InProceedings{	  Johnson:87:Sender,
    author	= {Johnson, David B. and Zwaenepoel, Willy},
    title	= {Sender-Based Message Logging},
    booktitle	= {Proceedings of the Seventeenth International Symposium on
		  Fault-Tolerant Computing},
    year	= {1987},
    abstract	= {Sender-based message logging, a low-overhead mechanism for
		  providing transparent fault-tolerance in distributed
		  systems, is described. It differs from conventional message
		  logging mechanisms in that each message is logged in
		  volatile memory on the machine from which the message is
		  sent. Keeping the message log in the sender's local memory
		  allows one to recover from a single failure at a time
		  without the expense of synchronously logging each message
		  to stable storage. The message log is then asynchronously
		  written to stable storage, without delaying the
		  computation, as part of the sender's periodic checkpoint.
		  Maintaining the sender-based message log requires at most
		  one extra network packet over non-fault-tolerant reliable
		  message communication and imposes little additional
		  synchronization delay. It can be applied transparently to
		  existing distributed applications and does not required
		  specialized hardware. It is currently being implemented on
		  a network of Sun workstations.}
}

@InProceedings{	  Johnson:88:Recovery,
    author	= {Johnson, David B. and Zwaenepoel, Willy},
    title	= {Recovery in distributed systems using asynchronous message
		  logging and checkpointing},
    booktitle	= {Proceedings of the seventh annual ACM Symposium on
		  Principles of distributed computing},
    year	= {1988},
    pages	= {171--181},
    annote	= {This paper describes (formally) how message logging works
		  and how it can prevent the domino effect.},
    abstract	= {In a distributed system using message logging and
		  checkpointing to provide fault tolerance, there is always a
		  unique maximum recoverable system state, regardless of the
		  message logging protocol used. The proof of this relies on
		  the observation that the set of system states that have
		  occurred during any single execution of a system forms a
		  lattice, with the sets of consistent and recoverable system
		  states as sublattices. The maximum recoverable system state
		  never decreases, and if all messages are eventually logged,
		  the domino effect cannot occur. This paper presents a
		  general model for reasoning about recovery in such a system
		  and, based on this model, an efficient algorithm for
		  determining the maximum recoverable system state at any
		  time. This work unifies existing approaches to fault
		  tolerance based on message logging and checkpointing, and
		  improves on existing methods for optimistic recovery in
		  distributed systems.},
    isbn	= {0-89791-277-2},
    location	= {Toronto, Ontario, Canada},
    doi		= {http://doi.acm.org/10.1145/62546.62575}
}

@InProceedings{	  Jung:05:Design,
    author	= {Jung, Hyungsoo and Shin, Dongin and Han, Hyuck and Kim,
		  Jai W. and Yeom, Heon Y. and Lee, Jongsuk},
    title	= {Design and Implementation of Multiple Fault-Tolerant {MPI}
		  over {Myrinet} (M$^3$)},
    booktitle	= {SC '05: Proceedings of the 2005 ACM/IEEE conference on
		  Supercomputing},
    year	= {2005},
    pages	= {32},
    annote	= {Describes a user-transparent fault detection and recovery
		  system over Myrinet. Their earlier work was done at the TCP
		  layer, while in this paper they describe a mechanism at the
		  ADI/GM layer of MPICH. One of the difficulties they deal
		  with are eager sends and zero-copy DMAs, since faults may
		  occur in the middle of these protocols.},
    abstract	= {Advances in network technology and computing power have
		  inspired the emergence of high-performance cluster
		  computing systems. While cluster management and hardware
		  highavailability tools are readily available, practical and
		  easily deployable fault-tolerant systems have not been
		  successfully adopted commercially. We present a
		  fault-tolerant system, Multiple fault-tolerant MPI over
		  Myrinet (M3), that differs in notable respects from other
		  proposed fault-tolerant systems in the literature. M3 is
		  built on top of Myrinet since it is regarded as one of the
		  best solutions for highperformance networks and is widely
		  used in cluster computing systems because it can provide a
		  high-speed switching network that is an inevitable
		  ingredient in interconnecting clusters of workstations or
		  PCs. M$^3$ is a user-transparent checkpointing system for
		  multiple fault-tolerant MPI implementation that is
		  primarily based on the coordinated checkpointing protocol.
		  M3 supports three critical functionalities that are
		  necessary for faulttolerance: a light-weight failure
		  detection mechanism, dynamic process management that
		  includes process migration, and a consistent checkpoint and
		  recovery mechanism. The features of M are that it requires
		  no modifications of application code and that it preserves
		  much of the high performance characteristics of Myrinet.
		  This paper describes the architecture of M3, its detailed
		  design principles and comprehensive implementation issues.
		  We also propose practical solutions for those involved in
		  constructing highly available cluster systems for parallel
		  programming systems. Experimental results substantiate our
		  assertion that M3 can be a good candidate for practically
		  deployable fault-tolerant systems in very-large and
		  high-performance Myrinet clusters and that its protocol can
		  be applied to a wide variety of parallel communication
		  libraries without difficulty.},
    isbn	= {1-59593-061-2},
    doi		= {http://dx.doi.org/10.1109/SC.2005.22}
}

@Article{	  kalaiselvi:checkpoint-survey,
    author	= {S. Kalaiselvi and V. Rajaraman},
    title	= {A survey of checkpointing algorithms for parallel and
		  distributed computers.},
    journal	= {Sadhana},
    month	= {OCT},
    year	= {2000},
    volume	= {25},
    pages	= {489 -- 510},
    institution	= {Indian Inst Sci, SERC, Bangalore 560012, Karnataka, India;
		  Indian Inst Sci, SERC, Bangalore 560012, Karnataka, India},
    publisher	= {India : Indian Acad. Sci, 2000},
    abstract	= {Checkpoint is defined as a designated place in a program
		  at which normal processing is interrupted specifically to
		  preserve the status information necessary to allow
		  resumption of processing at a later time. Checkpointing is
		  the process of saving the status information. This paper
		  surveys the algorithms which have been reported in the
		  literature for checkpointing parallel/distributed systems.
		  It has been observed that most of the algorithms published
		  for checkpointing in message passing systems are based on
		  the seminal article by Chandy and Lamport (1985). A large
		  number of articles have been published in this area by
		  relaxing the assumptions made in this paper and by
		  extending it to minimise the overheads of coordination and
		  context saving. Checkpointing for shared memory systems
		  primarily extend cache coherence protocols to maintain a
		  consistent memory. All of them assume that the main memory
		  is safe for storing the context. Algorithms have been
		  published for distributed shared memory systems, which
		  extend the cache coherence protocols used in shared memory
		  systems. They however also include methods for storing the
		  status of distributed memory in stable storage. Most of the
		  algorithms assume that there is no knowledge about the
		  programs being executed. It is however felt that in
		  development of parallel programs the user has to do a fair
		  amount of work in distributing tasks and this information
		  can be effectively used to simplify checkpointing and
		  rollback recovery. (55 refs.)},
    copyright	= {(c)2004 IEE; Institute for Scientific Information, Inc.},
    keywords	= {survey, checkpointing algorithms, distributed computers}
}


@techreport{Karlin2012Lulesh,
    author = {Ian Karlin and Abhinav Bhatele and Bradford L. Chamberlain and Jonathan Cohen and Zachary Devito and Maya Gokhale and Riyaz Haque and Rich Hornung and Jeff Keasler and Dan Laney and Edward Luke and Scott Lloyd and Jim McGraw and Rob Neely and David Richards and Martin Schulz and Charle H. Still and Felix Wang and Daniel Wong},
    title = {LULESH Programming Model and Performance Ports Overview},
    number = {LLNL-TR-608824},
    location = {Livermore, CA},
    pages = {1-17},
    year = {2012},
    month = {December}
}
@Book{		  Kececioglu:02:Reliability,
    author	= {Dimitri B. Kececioglu},
    title	= {Reliability Engineering Handbook},
    month	= may,
    year	= {2002},
    volume	= {2},
    publisher	= {DEStech Publications, Inc},
    isbn	= {1-932078-01-0}
}

@Proceedings{	  conf/EuroMPI/2010,
    editor	= {Rainer Keller and Edgar Gabriel and Michael M. Resch and
		  Jack Dongarra},
    title	= {Recent Advances in the Message Passing Interface - 17th
		  European MPI Users' Group Meeting, EuroMPI 2010, Stuttgart,
		  Germany, September 12-15, 2010. Proceedings},
    booktitle	= {EuroMPI},
    year	= {2010},
    volume	= {6305},
    publisher	= {Springer},
    series	= {Lecture Notes in Computer Science},
    isbn	= {978-3-642-15645-8}
}

@InProceedings{	  Kerbyson:01:Predictive,
    author	= {D. J. Kerbyson and H. J. Alme and Adolfy Hoisie and
		  Fabrizio Petrini and H. J. Wasserman and M. Gittings},
    title	= {Predictive performance and scalability modeling of a
		  large-scale application},
    booktitle	= {Proceedings of the ACM/IEEE conference on Supercomputing},
    year	= {2001},
    pages	= {37--48},
    doi		= {http://doi.acm.org/10.1145/582034.582071},
    isbn	= {1-58113-293-X}
}

@InProceedings{	  Khanna04FailureHandling,
    author	= {Gunjan Khanna and Saurabh Bagchi and John Rogers},
    title	= {Failure Handling in a Reliable Multicast Protocol for
		  Improving Buffer Utilization and Accommodating
		  Heterogeneous Receivers},
    booktitle	= {10th IEEE Pacific Rim International Symposium on
		  Dependable Computing},
    month	= {March},
    year	= {2004},
    pages	= {15--24},
    abstract	= {Reliable multicast protocols are an important class of
		  protocols for reliably disseminating information from a
		  sender to multiple receivers in the face of node and link
		  failures. A Tree-based Reliable Multicast Protocol (TRAM)
		  provides scalable reliable multicast by grouping receivers
		  in hierarchical repair groups and using a selective
		  acknowledgment mechanism. In this paper, we present an
		  improvement to TRAM to minimize the resource utilization at
		  intermediate hosts and to localize the effect of slow or
		  malicious receivers on normal receivers. We present an
		  evaluation of TRAM and TRAM++ on a campus-wide WAN without
		  errors and with message errors. The evaluation brings out
		  that, given a constraint on the buffer availability at
		  intermediate hosts, TRAM++ can tolerate the constraint at
		  the expense of increasing the end-to-end latency for the
		  normal receivers by only 3.2\% compared to TRAM in
		  error-free cases. When slow or faulty receivers are
		  present, TRAM++ is able to provide the same uninterrupted
		  quality of service to the normal nodes while localizing the
		  effect of the faulty ones without incurring any additional
		  memory overhead.},
    date	= {3--5},
    file	= {Khanna04FailureHandling.pdf:Khanna04FailureHandling.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  kim:matrix-checkpointing,
    author	= {Youngbae Kim and J. S. Plank and J. J. Dongarra},
    title	= {Fault tolerant matrix operations for networks of
		  workstations using multiple checkpointing.},
    booktitle	= {High Performance Computing on the Information
		  Superhighway. HPC Asia '97},
    month	= {April},
    year	= {1997},
    address	= {Seoul, South Korea},
    pages	= {460--465},
    publisher	= {Los Alamitos, CA, USA : IEEE Comput. Soc. Press, 1997},
    abstract	= {Recently, an algorithm-based approach using diskless
		  checkpointing has been developed to provide fault tolerance
		  for high-performance matrix operations. With this approach,
		  fault tolerance is incorporated into the matrix operations,
		  making them resilient to any single process failure with
		  low overhead. In this paper, we present a technique called
		  multiple checkpointing that enables the matrix operations
		  to tolerate a certain set of multiple processor failures by
		  adding multiple checkpointing processors. Results of
		  implementing this technique on a network of workstations
		  show improvement in both the reliability of the computation
		  and the performance of checkpointing. (32 refs.)},
    copyright	= {(c)2004 IEE},
    keywords	= {Algorithm based approach; Computational reliability; Data
		  integrity; Diskless checkpointing; Distributed processing;
		  Distributed systems software (C6150N); Fault tolerant
		  matrix operations; High performance matrix operations;
		  Linear algebra (numerical analysis) (C4140); Mathematics
		  computing; Mathematics computing (C7310); Matrix algebra;
		  Multiple checkpointing; Multiple processor failures;
		  Network performance (C5670); Overhead; Performance; Process
		  failure; Software fault tolerance; Workstation networks;
		  Workstations}
}

@Article{	  Kirbas04VesselExtraction,
    author	= {Cemil Kirbas and Francis Quek},
    title	= {A Review of Vessel Extraction Techniques and Algorithms},
    journal	= {ACM Computing Surveys},
    year	= {2004},
    address	= {New York, NY},
    volume	= {36},
    number	= {2},
    pages	= {81--121},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/1031120.1031121},
    issn	= {0360-0300},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Book{		  knuth-art,
    author	= {D. E. Knuth},
    title	= {The Art of Computer Programming},
    year	= {1973},
    publisher	= {Addison-Wesley},
    date-added	= {2010-02-17 15:06:54 -0700},
    date-modified = {2010-02-17 15:07:30 -0700}
}

@Article{	  Kobayashi00InformationRetrieval,
    author	= {Mei Kobayashi and Koichi Takeda},
    title	= {Information Retrieval on the Web},
    journal	= {ACM Computing Surveys},
    year	= {2000},
    address	= {New York, NY},
    volume	= {32},
    number	= {2},
    pages	= {144--173},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/358923.358934},
    issn	= {0360-0300},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Kohavi01E-DataMining,
    author	= {Ron Kohavi and Foster Provost},
    title	= {Applications of Data Mining to Electronic Commerce},
    journal	= {Data Mining Knowledge Discovery},
    year	= {2001},
    address	= {Hingham, MA},
    volume	= {5},
    number	= {1-2},
    pages	= {5--10},
    publisher	= {Kluwer Academic Publishers},
    issn	= {1384-5810},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Kohavi02BusinessAnalytics,
    author	= {Ron Kohavi and Neal J. Rothleder and Evangelos Simoudis},
    title	= {Emerging Trends in Business Analytics},
    journal	= {Communications of the ACM},
    year	= {2002},
    address	= {New York, NY},
    volume	= {45},
    number	= {8},
    pages	= {45--48},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/545151.545177},
    issn	= {0001-0782},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Koifman96RAMP,
    author	= {Alex Koifman and Stephen Zabele},
    title	= {RAMP: A Reliable Adaptive Multicast Protocol},
    booktitle	= {15th Conference on Computer Communications (INFOCOM '96)},
    month	= {March},
    year	= {1996},
    address	= {San Francisco, CA},
    pages	= {1442--1451},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Koo:87:Checkpointing,
    author	= {R. Koo and S. Toueg},
    title	= {Checkpointing and Rollback-Recovery for Distributed
		  Systems},
    journal	= {IEEE Transactions on Software Engineering},
    year	= {1987},
    volume	= {SE-13},
    number	= {1},
    pages	= {23--31},
    date-modified = {2007-02-22 11:20:08 -0700}
}

@Article{	  Kosinski73Dataflow,
    author	= {Paul R. Kosinski},
    title	= {A Data Flow Language for Operating Systems Programming},
    journal	= {ACM SIGPLAN Notices},
    year	= {1973},
    volume	= {8},
    number	= {9},
    pages	= {89--94},
    publisher	= {ACM New York, NY, USA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Krammer04Marmot,
    author	= {Bettina Krammer and Matthias S. Muller and Michael M.
		  Resch},
    title	= {{MPI I/O Analysis and Error Detection with MARMOT}},
    booktitle	= {EuroPVM/MPI 2004},
    month	= {September},
    year	= {2004},
    address	= {Budapest, Hungary},
    date	= {19-22},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  TotalView,
    author	= {Etnus LLC},
    title	= {TotalView User's Guide, Document version 6.0.0-1},
    month	= {January},
    year	= {2003},
    url		= {http://www.etnus.com},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Ladner80ParallelPrefixComputation,
    author	= {Richard E. Ladner and Michael J. Fischer},
    title	= {Parallel Prefix Computation},
    journal	= {Journal of the ACM},
    year	= {1980},
    address	= {New York, NY},
    volume	= {27},
    number	= {4},
    pages	= {831--838},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/322217.322232},
    issn	= {0004-5411},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Lai87OnDistributedSnapshots,
    author	= {Ten H. Lai and Tao H. Yang},
    title	= {On Distributed Snapshots},
    journal	= {Information Processing Letters},
    year	= {1987},
    address	= {Amsterdam, The Netherlands, The Netherlands},
    volume	= {25},
    number	= {3},
    pages	= {153--158},
    publisher	= {Elsevier North-Holland, Inc.},
    doi		= {http://dx.doi.org/10.1016/0020-0190(87)90125-6},
    issn	= {0020-0190},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Lai:87:distributed,
    author	= {Ten H. Lai and Tao H. Yang},
    title	= {On distributed snapshots},
    journal	= {Information Processing Letters},
    year	= {1987},
    volume	= {25},
    number	= {3},
    pages	= {153--158},
    abstract	= {We develop an efficient snapshot algorithm that needs no
		  control messages and does not require channels to be
		  first-in-first-out. We also show that several stable
		  properties (e.g., termination, deadlock) can be detected
		  with uncoordinated distributed snapshots. For such
		  properties, our algorithm can be further simplified.},
    issn	= {0020-0190},
    keywords	= {termination detection}
}

@Article{	  Lamport77ProvingCorrectness,
    author	= {Leslie Lamport},
    title	= {Proving the Correctness of Multiprocess Programs},
    journal	= {IEEE Transactions on Software Engineering},
    year	= {1977},
    volume	= {3},
    number	= {2},
    pages	= {125--143},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Lamport78TimeClocksOrdering,
    author	= {Leslie Lamport},
    title	= {Time, Clocks, and the Ordering of Events in a Distributed
		  System},
    journal	= {Communications of the ACM},
    month	= {July},
    year	= {1978},
    volume	= {21},
    number	= {7},
    pages	= {558--565},
    abstract	= {The concept of one event happening before another in a
		  distributed system is examined, and is shown to define a
		  partial ordering of the events. A distributed algorithm is
		  given for synchronizing a system of logical clocks which
		  can be used to totally order the events. The use of the
		  total ordering is illustrated with a method for solving
		  synchronization problems. The algorithm is then specialized
		  for synchronizing physical clocks, and a bound is derived
		  on how far out of synchrony the clocks can become.},
    doi		= {http://doi.acm.org/10.1145/359545.359563},
    file	= {Lamport78TimeClocksOrdering.pdf:Lamport78TimeClocksOrdering.pdf:PDF}
		  ,
    owner	= {darnold},
    summary	= {notes/Lamport78DistributedTimeClocksOrdering.txt},
    timestamp	= {2011.06.26}
}

@Article{	  Lamport:78:Time,
    author	= {Lamport, Leslie},
    title	= {Time, clocks, and the ordering of events in a distributed
		  system},
    journal	= {Commun. ACM},
    year	= {1978},
    address	= {New York, NY, USA},
    volume	= {21},
    number	= {7},
    pages	= {558--565},
    publisher	= {ACM},
    issn	= {0001-0782},
    doi		= {http://doi.acm.org/10.1145/359545.359563}
}

@InProceedings{	  Lampson86GlobalNameService,
    author	= {Butler W Lampson},
    title	= {Designing a Global Name Service},
    booktitle	= {Fifth Annual ACM Symposium on Principles of Distributed
		  Computing (PODC '86)},
    month	= {August},
    year	= {1986},
    address	= {Calgary, Alberta, Canada},
    pages	= {1--10},
    date	= {11--13},
    doi		= {http://doi.acm.org/10.1145/10590.10591},
    isbn	= {0-89791-198-9},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Lang09IO,
    author	= {Lang, Samuel and Carns, Philip and Latham, Robert and
		  Ross, Robert and Harms, Kevin and Allcock, William},
    title	= {I/O performance challenges at leadership scale},
    booktitle	= {Conference on High Performance Computing Networking,
		  Storage and Analysis (SC '09)},
    year	= {2009},
    pages	= {40:1--40:12},
    url		= {http://doi.acm.org/10.1145/1654059.1654100},
    isbn	= {978-1-60558-744-8},
    location	= {Portland, Oregon},
    articleno	= {40},
    numpages	= {12},
    doi		= {10.1145/1654059.1654100},
    acmid	= {1654100}
}

@Proceedings{	  conf:sc:2011,
    booktitle	= {Conference on High Performance Computing Networking,
		  Storage and Analysis, SC 2011, Seattle, WA, USA, November
		  12-18, 2011},
    year	= {2011, 2011},
    isbn	= {978-1-4503-0771-0},
    bibsource	= {DBLP, http://dblp.uni-trier.de}
}

@Misc{		  thunder,
    author	= {{Lawrence Livermore National Laboratory}},
    title	= {{Thunder}},
    note	= {http://www.llnl.gov/linux/thunder},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Lee02EnhancingMigration,
    author	= {Jonghyun Lee and M. Winslett and Xiaosong Ma and Shengke
		  Yu},
    title	= {Enhancing data migration performance via parallel data
		  compression},
    booktitle	= {International Parallel and Distributed Processing
		  Symposium},
    month	= {},
    year	= {2002},
    volume	= {},
    number	= {},
    pages	= { 444--451},
    keywords	= { client-side compression approach, data migration
		  performance, data size reduction, floating point data,
		  input output performance, parallel configurations, parallel
		  data compression, performance gain, scientific data set
		  analysis, scientific simulations, data analysis, data
		  compression, natural sciences computing, parallel
		  processing, performance evaluation},
    doi		= {10.1109/IPDPS.2002.1015528},
    issn	= { }
}

@InProceedings{	  Lee07STATBench,
    author	= {Gregory Lee and Dorian C. Arnold and Dong H. Ahn and
		  Bronis R. de Supinski and Barton P. Miller and Martin
		  Schulz},
    title	= {Benchmarking the Stack Trace Analysis Tool for
		  BlueGene/L},
    booktitle	= {Scalability and Usability of HPC Programming Tools
		  Minisymposium at Parallel Computing (ParCo '07)},
    month	= {September},
    year	= {2007},
    address	= {Juelich and Aachen, Germany},
    date	= {4--7},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Lee08ScalingSTAT,
    author	= {Gregory L. Lee and Dong H. Ahn and Dorian C. Arnold and
		  Bronis R. de Supinski and Matthew Legendre and Barton P.
		  Miller and Martin Schulz and Ben Liblit},
    title	= {{Lessons Learned at 208K: Towards Debugging Millions of
		  Cores}},
    booktitle	= {Supercomputing 2008 (SC2008)},
    month	= {November},
    year	= {2008},
    address	= {Austin, TX},
    note	= {To Appear},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Book{		  Leighton92ParallelAlgorithms,
    author	= {F. Thomson Leighton},
    title	= {Introduction to Parallel Algorithms and Architectures:
		  Array, Trees, Hypercubes},
    year	= {1992},
    address	= {San Francisco, CA, USA},
    publisher	= {Morgan Kaufmann Publishers Inc.},
    isbn	= {1-55860-117-1},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Lemarinier:04:Coordinated,
    author	= {Lemarinier, Pierre and Bouteiller, Aurelien and Krawezik,
		  Geraud and Cappello, Franck},
    title	= {Coordinated checkpoint versus message log for fault
		  tolerant {MPI}},
    journal	= {Int. J. High Perform. Comput. Netw.},
    year	= {2004},
    volume	= {2},
    number	= {2-4},
    pages	= {146--155},
    abstract	= {Large clusters, high availability clusters and grid
		  deployments often suffer from network, node or operating
		  system faults and thus require the use of fault tolerant
		  programming models. MPI is one of the most widely adopted
		  programming models for high performance computing. There
		  are several approaches for fault tolerance in an MPI
		  environment. The automatic and transparent ones are based
		  on either coordinated or uncoordinated checkpoint
		  associated with a message log strategy. There are many
		  protocols and optimisations for these approaches and
		  several implementations have been made. However, few
		  results of comparison between them exist. Coordinated
		  checkpoint has the advantage of a very low overhead as long
		  as the execution stays fault free. In contrast,
		  uncoordinated checkpoint must be complemented by a message
		  log protocol which adds a significant penalty for all
		  message transfers even for fault free executions. The
		  drawbacks of coordinated checkpoint are the synchronisation
		  cost before the checkpoint, the synchronised checkpoint
		  cost and the restart cost after a fault. Message log does
		  not suffer from these problems, as it processes checkpoint
		  and restart independently. These differences suggest that
		  the best approach depends on the fault frequency. This
		  paper investigates this question from a fair experimental
		  protocol: we implement and test two protocols (coordinated
		  checkpoint and pessimistic message log) on the same system
		  and we compare them on a cluster according to the frequency
		  of faults that are generated artificially. The main
		  conclusion is that uncoordinated checkpoint is relevant for
		  a large scale cluster from one fault every hour for
		  applications with large dataset.},
    issn	= {1740-0562},
    doi		= {http://dx.doi.org/10.1504/IJHPCN.2004.008899}
}

@InProceedings{	  Lemarinier:04:Improved,
    author	= {Lemarinier, P. and Bouteiller, A. and Herault, T. and
		  Krawezik, G. and Cappello, F.},
    title	= {Improved message logging versus improved coordinated
		  checkpointing for fault tolerant {MPI}},
    booktitle	= {IEEE International Conference on Cluster Computing},
    year	= {2004},
    volume	= {},
    number	= {},
    pages	= {115--124},
    abstract	= {Fault tolerance is a very important concern for critical
		  high performance applications using the MPI library.
		  Several protocols provide automatic and transparent fault
		  detection and recovery for message passing systems with
		  different impact on application performance and the
		  capacity to tolerate a high fault rate. In a recent paper,
		  we have demonstrated that the main differences between
		  pessimistic sender based message logging and coordinated
		  checkpointing are: 1) the communication latency and 2) the
		  performance penalty in case of faults. Pessimistic message
		  logging increases the latency, due to additional blocking
		  control messages. When faults occur at a high rate,
		  coordinated checkpointing implies a higher performance
		  penalty than message logging due to a higher stress on the
		  checkpoint server. We extend this study to improved
		  versions of message logging and coordinated checkpoint
		  protocols which respectively reduces the latency overhead
		  of pessimistic message logging and the server stress of
		  coordinated checkpoint. We detail the protocols and their
		  implementation into the new MPICH-V fault tolerant
		  framework. We compare their performance against the
		  previous versions and we compare the novel message logging
		  protocols against the improved coordinated checkpointing
		  one using the NAS benchmark on a typical high performance
		  cluster equipped with a high speed network. The
		  contribution of This work is twofold: a) an original
		  message logging protocol and an improved coordinated
		  checkpointing protocol and b) the comparison between
		  them.},
    keywords	= {MPI library; MPICH-V fault tolerance; NAS benchmark;
		  automatic fault detection; blocking control messages;
		  checkpoint server; communication latency; coordinated
		  checkpointing protocol; fault tolerant MPI; high
		  performance cluster; high speed network; message logging
		  protocols; message passing systems; performance penalty;
		  pessimistic message logging; transparent fault detection;
		  application program interfaces; checkpointing; fault
		  tolerant computing; message passing; protocols;},
    doi		= {10.1109/CLUSTR.2004.1392609},
    issn	= {1552-5244}
}

@TechReport{	  Leon93FailSafePVM,
    author	= {Juan Leon and Allan L. Fisher and Peter Steenkiste},
    title	= {Fail-Safe PVM: A Portable Package for Distributed
		  Programming with Transparent Recovery},
    month	= {February},
    year	= {1993},
    address	= {Pittsburgh, PA},
    number	= {CMU-CS-93-124},
    institution	= {Carnegie Mellon University},
    owner	= {darnold},
    source	= {http://www.ncstrl.org:8900/ncstrl/servlet/search?formname=detail\&id=oai\%3Ancstrlh\%3Acmucs\%3ACMU\%2F\%2FCS-93-124}
		  ,
    timestamp	= {2011.06.26}
}

  note={To appear. Available at
                  www.cs.unm.edu/\~{}darnold/Levy2013UsingSimulation.pdf},
@inproceedings{Levy2013UsingSimulation,
  title={Using Simulation to Evaluate the Performance of Resilience Strategies at Scale},
  author={Levy, Scott and Topp, Bryan and Ferreira, Kurt~B. and Arnold, Dorian and Hoefler, Torsten and Widener, Patrick},
  booktitle={High Performance Computing, Networking, Storage and Analysis (SCC), 2013 SC Companion:},
  year={2013},
  organization={IEEE}
}

@inproceedings{xxxLevy2013UsingSimulation,
  title={Blinded for review process}
}

@COMMENT{jabref-meta: selector\_publisher:}


@COMMENT{jabref-meta: selector\_author:}


@COMMENT{jabref-meta: selector\_journal:}


@COMMENT{jabref-meta: selector\_keywords:}
@InProceedings{	  Li90CATCH,
    author	= {C.-C.J. Li and W.K. Fuchs},
    title	= {CATCH-compiler-assisted techniques for checkpointing},
    booktitle	= {Fault-Tolerant Computing, 1990. FTCS-20. Digest of
		  Papers., 20th International Symposium},
    month	= {jun},
    year	= {1990},
    volume	= {},
    number	= {},
    pages	= {74--81},
    issn	= {},
    keywords	= {CATCH, checkpointing, compiler-assisted techniques,
		  computational complexity, fault tolerant computing, GNU C,
		  heuristic algorithm, NP-complete, process recovery,
		  software engineering, sparse potential checkpoint code, SUN
		  workstations, training technique},
    doi		= {10.1109/FTCS.1990.89337}
}

@InProceedings{	  Li90RealTimeCheckpointing,
    author	= {Kai Li and Jeffrfey F. Naughton and James S. Plank},
    title	= {Real-time, Concurrent Checkpoint for Parallel Programs},
    booktitle	= {2nd ACM SIGPLAN Symposium on Principles and Practice of
		  Parallel Programming (PPOPP '90)},
    year	= {1990},
    address	= {Seattle, Washington},
    pages	= {79--88},
    publisher	= {ACM},
    doi		= {http://doi.acm.org/10.1145/99163.99173},
    isbn	= {0-89791-350-7},
    owner	= {darnold},
    paddress	= {New York, NY, USA},
    timestamp	= {2011.06.26}
}

@Article{	  Li:91:Checkpointing,
    author	= {Li, Kai and Naughton, Jeffrey F. and Planck, James S.},
    title	= {Checkpointing multicomputer applications},
    journal	= {Reliable Distributed Systems, 1991. Proceedings., Tenth
		  Symposium on},
    month	= sep,
    year	= {1991},
    volume	= {},
    number	= {},
    pages	= {2-11},
    annote	= {This paper tries to distinguish checkpoint/restart in a
		  distributed (grid) system from doing it in a parallel
		  system. It cites performance, less autonomous nodes, and
		  deterministic deadlock-free algorithms for needing a
		  solution specific to these systems. Their algorithm depends
		  on point-to-point message ordering characteristics of
		  parallel systems and avoids the $O(n^2)$ number of messages
		  to coordinate the next checkpoint.},
    abstract	= {The authors present a checkpointing scheme that is
		  transparent, imposes overhead only during checkpoints,
		  requires minimal message logging, and allows for quick
		  resumption of execution from a checkpointed image. Since
		  checkpointing multicomputer applications poses requirements
		  different from those posed by checkpointing general
		  distributed systems, existing distributed checkpointing
		  schemes are inadequate for multicomputer checkpointing. The
		  proposed checkpointing scheme makes use of special
		  properties of multicomputer interconnection networks to
		  satisfy this set of requirements. The proposed algorithm is
		  efficient both when taking checkpoints and when recovering
		  from checkpointed images},
    keywords	= {fault tolerant computing, multiprocessor interconnection
		  networks, performance evaluation, checkpointing scheme,
		  minimal message logging, multicomputer applications,
		  multicomputer interconnection networks},
    doi		= {http://dx.doi.org/10.1109/RELDIS.1991.145398},
    issn	= {}
}

@Article{	  Li94ConcurrentCheckpointing,
    author	= {Kai Li and Jeffrey F. Naughton and James S. Plank},
    title	= {Low-Latency, Concurrent Checkpointing for Parallel
		  Programs},
    journal	= {IEEE Transactions on Parallel and Distributed Systems},
    month	= {August},
    year	= {1994},
    volume	= {5},
    number	= {8},
    pages	= {874--879},
    abstract	= {This paper presents the results of an implementation of
		  several algorithms for checkpointing and restarting
		  parallel programs on shared-memory multiprocessors. The
		  algorithms are compared according to the metrics of overall
		  checkpointing time, overhead imposed by the checkpointer on
		  the target program, and amount of time during which the
		  checkpointer interrupts the target program. The best
		  algorithm measured achieves its efficiency through a
		  variation of copy-on-write, which allows the most
		  time-consuming operations of the checkpoint to be
		  overlapped with the running of the program being
		  checkpointed.},
    keywords	= {Checkpointing, Fault-tolerance},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Lin96RMTP,
    author	= {John C. Lin and Sanjoy Paul},
    title	= {RMTP: A Reliable Multicast Transport Protocol},
    booktitle	= {15th Conference on Computer Communications (INFOCOM '96)},
    month	= {March},
    year	= {1996},
    address	= {San Francisco, CA},
    pages	= {1414--1424},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Liskov91HARP,
    author	= {Barbara Liskov and Sanjay Ghemawat and Robert Gruber and
		  Paul Johnson and Liuba Shrira},
    title	= {Replication in the Harp File System},
    booktitle	= {Thirteenth ACM Symposium on Operating Systems Principles
		  (SOSP '91)},
    year	= {1991},
    address	= {New York, NY},
    pages	= {226--238},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/121132.121169},
    isbn	= {0-89791-447-3},
    location	= {Pacific Grove, CA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Litzkow97CheckpointMigration,
    author	= {Michael Litzkow and Todd Tannenbaum and Jim Basney and
		  Miron Livny},
    title	= {Checkpoint and Migration of UNIX Processes in the Condor
		  Distributed Processing System},
    month	= {April},
    year	= {1997},
    number	= {1346},
    institution	= {University of WI},
    department	= {Computer Sciences Department},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Livadas02FormalReliableMulticast,
    author	= {Carolos Livadas and Nancy A. Lynch},
    editor	= {Doron A. Peled and Moshe Y. Vardi},
    title	= {A Formal Venture into Reliable Multicast Territory},
    booktitle	= {22nd International Conference on Formal Techniques for
		  Networked and Distributed Systems (FORTE '02)},
    month	= {November},
    year	= {2002},
    volume	= {LNCS 2529},
    pages	= {146--161},
    publisher	= {Springer-Verlag},
    owner	= {darnold},
    summary	= {notes/Livadas02FormalReliableMulticast.txt},
    timestamp	= {2011.06.26}
}

@Misc{		  LANLFailureData,
    author	= {{Los Alamos National Laboratory}},
    title	= {{Operational Data to Support and Enable Computer Science
		  Research}},
    note	= {http://institute.lanl.gov/data/fdata/},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Louca98MPI-FT,
    author	= {Soulla Louca and Neophytos Neophytou and Adrianos Lachanas
		  and Paraskevas Evripidou},
    title	= {{MPI-FT}: A Portable Fault Tolerance Scheme for {MPI}},
    booktitle	= {International Conference on Parallel and Distributed
		  Processing Techniques and Applications (PDPTA '98)},
    year	= {1998},
    address	= {Las Vegas, NV},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Lumetta96Mantis,
    author	= {Steven S. Lumetta and David E. Culler},
    title	= {{The Mantis Parallel Debugger}},
    booktitle	= {SIGMETRICS Symposium on Parallel and Distributed Tools
		  (SPDT '96) },
    year	= {1996},
    address	= {Philadelphia, PA},
    pages	= {118--126},
    doi		= {http://doi.acm.org/10.1145/238020.238056},
    isbn	= {0-89791-846-0},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Madden02TAG,
    author	= {Samuel Madden and Michael J. Franklin and Joseph M.
		  Hellerstein and Wei Hong},
    title	= {TAG: a Tiny AGgregation Service for Ad-Hoc Sensor
		  Networks},
    booktitle	= {5th Symposium on Operating Systems Design and
		  Implementation (OSDI)},
    month	= {December},
    year	= {2002},
    address	= {Boston, MA},
    file	= {Madden02SensorNetworkAggregation.pdf:/afs/cs.wisc.edu/u/d/a/darnold/shared/research/Bibliography/pdfs/Madden02SensorNetworkAggregation.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Maloney:09:Survey,
    author	= {Andrew Maloney and Andrzej Goscinski},
    title	= {A survey and review of the current state of
		  rollback-recovery for cluster systems},
    journal	= {Concurrency and Computation: Practice and Experience},
    month	= apr,
    year	= {2009},
    volume	= {},
    number	= {},
    pages	= {},
    annote	= {A survey of seven specific rollback-recovery systems for
		  clusters. This is in contrast to the more thorough and
		  academic~\cite{Elnozahy:02:Survey}. I.e., this paper is
		  more like a product overview/review,
		  while~\cite{Elnozahy:02:Survey} reviews techniques.},
    abstract	= {A variety of research problems exist that require
		  considerable time and computational resources to solve.
		  Attempting to solve these problems produces long-running
		  applications that require a reliable and trustworthy system
		  upon which they can be executed. Cluster systems provide an
		  excellent environment upon which to run these applications
		  because of their low cost to performance ratio; however,
		  due to being created using commodity components they are
		  prone to failures. This report surveyed and reviewed the
		  issues currently relating to providing fault tolerance for
		  long-running applications. Several fault tolerance
		  approaches were investigated; however, it was found that
		  rollback-recovery provides a favourable approach for user
		  applications in cluster systems. Two facilities are
		  required to provide fault tolerance using
		  rollback-recovery: checkpointing and recovery. It was shown
		  here that a multitude of work has been done for enhancing
		  checkpointing; however, the intricacies of providing
		  recovery have been neglected. The problems associated with
		  providing recovery include; providing transparent and
		  autonomic recovery, selecting appropriate recovery
		  computers, and maintaining a consistent observable
		  behaviour when an application fails.},
    doi		= {http://dx.doi.org/10.1002/cpe.1413}
}

@InProceedings{	  Maltz98MSOCKS,
    author	= {David A. Maltz and Pravin Bhagwat},
    title	= {{MSOCKS}: An Architecture for Transport Layer Mobility},
    booktitle	= {INFOCOM},
    year	= {1998},
    address	= {San Francisco, CA},
    pages	= {1037--1045},
    url		= {citeseer.ist.psu.edu/maltz98msocks.html},
    file	= {Maltz98MSOCKS.pdf:Maltz98MSOCKS.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Mandal:06:Performance,
    author	= {Partha Sarathi Mandal and Krishnendu Mukhopadhyaya},
    title	= {Performance analysis of different checkpointing and
		  recovery schemes using stochastic model},
    journal	= {Journal of Parallel and Distributed Computing},
    year	= {2006},
    volume	= {66},
    number	= {1},
    pages	= {99 -- 107},
    annote	= {Nicely introduces the concepts of synchronous and
		  asynchronous checkpoint algorithms. The authors create
		  models for the various checkpoint scenarios, including the
		  cost of recovery. The recovery cost of message logging is
		  dependent on the message rate. The overhead of taking a
		  checkpoint is highest for synchronous algorithms, and
		  lowest for asynchronous algorithms. Quasi-synchronous is
		  in-between.},
    abstract	= {Several schemes for checkpointing and rollback recovery
		  have been reported in the literature. In this paper, we
		  analyze some of these schemes under a stochastic model. We
		  have derived expressions for average cost of checkpointing,
		  rollback recovery, message logging and piggybacking with
		  application messages in synchronous as well as asynchronous
		  checkpointing. For quasi-synchronous checkpointing we show
		  that in a system with n processes, the upper bound and
		  lower bound of selective message logging are O(n2) and
		  O(n), respectively.},
    issn	= {0743-7315},
    doi		= {http://dx.doi.org/10.1016/j.jpdc.2005.06.013}
}

@InProceedings{	  Manjhi05TributariesAndDeltas,
    author	= {Amit Manjhi and Suman Nath and Phillip B. Gibbons},
    title	= {Tributaries and Deltas: Efficient and Robust Aggregation
		  in Sensor Network Streams},
    booktitle	= {ACM SIGMOD International Conference on Management of Data
		  (SIGMOD 2005)},
    month	= {June},
    year	= {2005},
    address	= {Baltimore, MD},
    pages	= {287--298},
    publisher	= {ACM Press New York, NY, USA},
    dates	= {13--16},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Massie03GangliaExperience,
    author	= {Matthew L. Massie and Brent N. Chun and David E. Culler},
    title	= {The Ganglia Distributed Monitoring System: Design,
		  Implementation, and Experience},
    journal	= {Parallel Computing},
    month	= {July},
    year	= {2004},
    volume	= {30},
    number	= {7},
    pages	= {817--840},
    organization = {University of CA, Berkeley},
    url		= {http://ganglia.sourceforge.net/talks/parallel_computing/ganglia-two-col.pdf}
		  ,
    file	= {Massie03Ganglia.pdf:/u/d/a/darnold/shared/research/Bibliography/pdfs/Massie03Ganglia.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Mathis:1991:GBP,
    author	= {Frank H. Mathis},
    title	= {A generalized birthday problem},
    journal	= {SIAM Review},
    month	= {June},
    year	= {1991},
    volume	= {33},
    number	= {2},
    pages	= {265--270},
    bibdate	= {Mon Jan 20 09:20:15 MST 1997},
    coden	= {SIREAD},
    issn	= {0036-1445 (print), 1095-7200 (electronic)},
    mrclass	= {60C05},
    mrnumber	= {1 108 591}
}

@InProceedings{	  Mattern89VirtualTime,
    author	= {Friedemann Mattern},
    title	= {Virtual Time and Global States of Distributed Systems},
    booktitle	= {International Workshop on Parallel and Distributed
		  Algorithms},
    year	= {1989},
    address	= {Chateau De Bonas, Gers, France},
    pages	= {215--226},
    publisher	= {North-Holland},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  ASCIRed,
    author	= {Timothy G. Mattson and Greg Henry},
    title	= {An Overview of the {Intel {TFLOPS}} Supercomputer},
    journal	= {Intel Technology Journal},
    year	= {1998},
    number	= {Q1},
    pages	= {12},
    url		= {citeseer.ist.psu.edu/mattson98overview.html}
}

@InProceedings{	  McEvoy:81:Tandem,
    author	= {McEvoy, Dennis},
    title	= {The architecture of Tandem's NonStop system},
    booktitle	= {ACM '81: Proceedings of the ACM '81 conference},
    year	= {1981},
    address	= {New York, NY, USA},
    pages	= {245},
    publisher	= {ACM},
    isbn	= {0-89791-049-4}
}

@TechReport{	  Meneses:11:Design,
    author	= {Esteban Meneses and Xiang Ni and Laxmikant V. Kale},
    title	= {Design and Analysis of a Message Logging Protocol for
		  Fault Tolerant Multicore Systems},
    month	= jul,
    year	= {2011},
    number	= {11-30},
    institution	= {Parallel Programming Laboratory, Department of Computer
		  Science, University of Illinois at Urbana-Champaign},
    abstract	= {A look at Exascale reveals a future with multicore
		  supercomputers that will inexorably experience frequent
		  failures. Providing scalable and efficient fault tolerance
		  support is one of the major concerns to pave the road for
		  the next generation of machines. Checkpoint/restart remains
		  as the standard de facto approach to provide fault
		  tolerance in supercomputers. However, its high recovery
		  cost has brought the attention of the community to an
		  alternative mechanism, message logging. In this paper we
		  present the design of a message logging protocol that
		  targets multicore machines based on two fundamental
		  assumptions. First, a multicore node is the minimum unit of
		  failure and very frequently only one node goes down per
		  failure. Second, the shared memory is a key resource to
		  bring down the overhead of message logging. This paper also
		  presents an analysis of failure data from recent
		  supercomputers that show that most of the time a failure
		  involves one single computational node. We offer two
		  different distributions to model the data. Using those
		  distributions we build a model for the survivability of the
		  message logging protocol to multiple concurrent failures.
		  We demonstrate our technique has a low overhead. The
		  results of an experiment with a stencil program show the
		  execution time penalty is below 5\% when the program scales
		  up to 1024 cores. Moreover, even when the protocol was
		  designed to tolerate one single failure at a time, it
		  provides a high probability of survival to a failure
		  involving any number of nodes. Using real-world data from
		  recent supercomputers we demonstrate the chances of survive
		  any failure are higher than 99\%.}
}

@InProceedings{	  Meneses:11:Evaluation,
    author	= {Esteban Meneses and Greg Bronevetsky and Laxmikant V.
		  Kal{\'e}},
    title	= {Evaluation of Simple Causal Message Logging for
		  Large-Scale Fault Tolerant HPC Systems},
    booktitle	= {25th IEEE International Symposium on Parallel and
		  Distributed Processing, IPDPS Workshop Proceedings},
    year	= {2011},
    pages	= {1533-1540},
    abstract	= {The era of petascale computing brought machines with
		  hundreds of thousands of processors. The next generation of
		  exascale supercomputers will make available clusters with
		  millions of processors. In those machines, mean time
		  between failures will range from a few minutes to few tens
		  of minutes, making the crash of a processor the common
		  case, instead of a rarity. Parallel applications running on
		  those large machines will need to simultaneously survive
		  crashes and maintain high productivity. To achieve that,
		  fault tolerance techniques will have to go beyond
		  checkpoint/restart, which requires all processors to roll
		  back in case of a failure. Incorporating some form of
		  message logging will provide a framework where only a
		  subset of processors are rolled back after a crash. In this
		  paper, we discuss why a simple causal message logging
		  protocol seems a promising alternative to provide fault
		  tolerance in large supercomputers. As opposed to
		  pessimistic message logging, it has low latency overhead,
		  especially in collective communication operations. Besides,
		  it saves messages when more than one thread is running per
		  processor. Finally, we demonstrate that a simple causal
		  message logging protocol has a faster recovery and a low
		  performance penalty when compared to checkpoint/restart.
		  Running NAS Parallel Benchmarks (CG, MG and BT) on 1024
		  processors, simple causal message logging has a latency
		  overhead below 5\%.},
    isbn	= {978-1-61284-425-1}
}

@InProceedings{	  Meth:00:Parallel,
    author	= {Meth, Kalman Z. and Tuel, William G.},
    title	= {Parallel Checkpoint/Restart without Message Logging},
    booktitle	= {International Workshop on Parallel Processing},
    year	= {2000},
    pages	= {253--258},
    abstract	= {We describe a parallel checkpoint/restart mechanism. The
		  checkpoint is performed among the participating parallel
		  tasks using a new algorithm that we call stop and discard.
		  Tasks may be checkpointed without waiting for previously
		  sent messages to be received. Specific message logging is
		  not required. Message data that may be in transit is saved
		  in the checkpoint files.},
    isbn	= {0-7695-0771-9},
    acmid	= {852996}
}

@Article{	  Miller81XOS,
    author	= {Barton Miller and David Presotto},
    title	= {XOS: An Operating System for the X-tree Architecture},
    journal	= {ACM SIGOPS Operating System Review},
    year	= {1981},
    address	= {New York, NY},
    volume	= {15},
    number	= {2},
    pages	= {21--32},
    publisher	= {ACM Press},
    abstract	= { This paper describes the fundamentals of the X-TREE
		  Operating System (XOS), a system developed to investigate
		  the effects of the X-TREE architecture on operating system
		  design. It outlines the goals and constraints of the
		  project and describes the major features and modules of
		  XOS. Two concepts are of special interest: The first is
		  demand paging across the network of nodes and the second is
		  separation of the global object space and the directory
		  structure used to reference it. Weaknesses in the model are
		  discussed along with directions for future research.},
    doi		= {http://doi.acm.org/10.1145/1041459.1041462},
    file	= {Miller81XOS.pdf:Miller81XOS.pdf:PDF},
    issn	= {0163-5980},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Miller93ProgramVisualization,
    author	= {Barton P. Miller},
    title	= {{What to Draw? When to Draw?: An Essay on Parallel Program
		  Visualization}},
    journal	= {Journal of Parallel and Distributed Computing},
    year	= {1993},
    address	= {Orlando, FL, USA},
    volume	= {18},
    number	= {2},
    pages	= {265--269},
    publisher	= {Academic Press, Inc.},
    doi		= {http://dx.doi.org/10.1006/jpdc.1993.1063},
    issn	= {0743-7315},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Miller95Paradyn,
    author	= {Barton P. Miller and Mark D. Callaghan and Jonathan M.
		  Cargille and Jeffrey K. Hollingsworth and R. Bruce Irvin
		  and Karen L. Karavanic and Krishna Kunchithapadam and Tia
		  Newhall},
    title	= {The Paradyn Parallel Performance Measurement Tool},
    journal	= {IEEE Computer},
    month	= {November},
    year	= {1995},
    volume	= {28},
    number	= {11},
    pages	= {37--46},
    notes	= {Special issue on performance evaluation tools for parallel
		  and distributed computer systems},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Book{		  Milner82CCS,
    author	= {Robin Milner},
    title	= {A Calculus of Communicating Systems},
    year	= {1982},
    address	= {Secaucus, NJ},
    publisher	= {Springer-Verlag New York, Inc.},
    isbn	= {0387102353},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Book{		  Milner99PiCalculus,
    author	= {Robin Milner},
    title	= {Communicating and Mobile Systems: the $\pi$-calculus},
    year	= {1999},
    address	= {New York, NY},
    publisher	= {Cambridge University Press},
    isbn	= {0-521-65869-1},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Book{		  Milojicic00Mobility,
    editor	= {Dejan Milojicic and Frederick Douglis and Richard
		  Wheeler},
    title	= {Mobility: Processes, Computers, and Agents},
    year	= {2000},
    publisher	= {Addison Wesley},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Milojicic00ProcessMigration,
    author	= {Dejan S. Milojicic and Fred Douglis and Yves Paindaveine
		  and Richard Wheeler and Songnian Zhou},
    title	= {Process migration},
    journal	= {ACM Computing Surveys},
    year	= {2000},
    address	= {New York, NY},
    volume	= {32},
    number	= {3},
    pages	= {241--299},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/367701.367728},
    file	= {Milojicic00ProcessMigration.pdf:Milojicic00ProcessMigration.pdf:PDF}
		  ,
    issn	= {0360-0300},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Mirgorodskiy06ProblemDiagnosis,
    author	= {Alexander V. Mirgorodskiy and Naoya Maruyama and Barton P
		  Miller},
    title	= {{Problem Diagnosis in Large-Scale Computing
		  Environments}},
    booktitle	= {2006 ACM/IEEE conference on Supercomputing (SC 2006)},
    month	= {November},
    year	= {2006},
    address	= {Tampa, Florida},
    pages	= {88},
    publisher	= {ACM},
    isbn	= {0-7695-2700-0},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Mogul97BenefitsDeltaEncoding,
    author	= {Jeffrey C. Mogul and Fred Douglis and Anja Feldmann and
		  Balachander Krishnamurthy},
    title	= {Potential Benefits of Delta Encoding and Data Compression
		  for HTTP},
    booktitle	= {SIGCOMM '97 Conference on Applications, Technologies,
		  Architectures, and Protocols for Computer Communication},
    year	= {1997},
    address	= {Cannes, France},
    pages	= {181--194},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/263105.263162},
    isbn	= {0-89791-905-X},
    owner	= {darnold},
    paddress	= {New York, NY},
    timestamp	= {2011.06.26}
}

@InProceedings{Monnet04Hierarchical,
  title={A hierarchical checkpointing protocol for parallel applications in cluster federations},
  author={Monnet, S{\'e}bastien and Morin, Christine and Badrinath, Ramamurthy},
  booktitle={Parallel and Distributed Processing Symposium, 2004. Proceedings. 18th International},
  pages={211},
  year={2004},
  organization={IEEE}
}

@InProceedings{Monnet04Hybrid,
  title={Hybrid checkpointing for parallel applications in cluster federations},
  author={Monnet, S{\'e}bastien and Morin, Christine and Badrinath, Ramamurthy},
  booktitle={Cluster Computing and the Grid, 2004. CCGrid 2004. IEEE International Symposium on},
  pages={773--782},
  year={2004},
  organization={IEEE}
}

@InProceedings{	  Montressor04RobustAggregation,
    author	= {Alberto Montresor and Mark Jelasity and Ozalp Babaoglu},
    title	= {Robust Aggregation Protocols for Large-Scale Overlay
		  Networks},
    booktitle	= {2004 International Conference on Dependable Systems and
		  Networks (DSN 2004)},
    month	= {June/July},
    year	= {2004},
    address	= {Palazzo dei Congressi, Florence, Italy},
    pages	= {19},
    publisher	= {IEEE Computer Society},
    isbn	= {0-7695-2052-9},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Moody10SCR,
    author	= {Adam Moody and Greg Bronevetsky and Kathryn Mohror and
		  Bronis R. de Supinski},
    title	= {Design, Modeling, and Evaluation of a Scalable Multi-level
		  Checkpointing System},
    booktitle	= {ACM/IEEE International Conference for High Performance
		  Computing, Networking, Storage and Analysis (SC '10)},
    year	= {2010},
    pages	= {1--11},
    isbn	= {978-1-4244-7559-9},
    acmid	= {1884666},
    numpages	= {11}
}

@InProceedings{	  Csaba98LoGPC,
    author	= {Csaba Andras Moritz and Matthew I. Frank},
    title	= {LoGPC: Modeling Network Contention in Message-passing
		  Programs},
    booktitle	= {ACM SIGMETRICS Joint International Conference on
		  Measurement and Modeling of Computer Systems (SIGMETRICS
		  '98/PERFORMANCE '98) },
    year	= {1998},
    address	= {New York, NY},
    pages	= {254--263},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/277851.277933},
    isbn	= {0-89791-982-3},
    location	= {Madison, WI},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Morse05Compression,
    author	= {Kingsley G. Morse~Jr.},
    title	= {Compression Tools Compared},
    journal	= {Linux Journal},
    month	= {September},
    year	= {2005},
    number	= {137}
}

@TechReport{	  Moshovos04HardwareCompress,
    author	= {Andreas Moshovos and Alexandros Kostopoulos},
    title	= {Cost-Effective, High-Performance Giga-Scale
		  Checkpoint/Restore},
    month	= {November},
    year	= {2004},
    institution	= {University of Toronto}
}

@InProceedings{	  Moshovos05MemoryStateCompressors,
    author	= {Andreas Moshovos and Alexandros Kostopoulos},
    title	= {Memory State Compressors for Giga-Scale
		  Checkpoint/Restore},
    booktitle	= {14th International Conference on Parallel Architectures
		  and Compilation Techniques (PACT '05)},
    year	= {2005},
    address	= {Washington, DC, USA},
    pages	= {303--314},
    publisher	= {IEEE Computer Society},
    series	= {PACT '05},
    url		= {http://dx.doi.org/10.1109/PACT.2005.28},
    isbn	= {0-7695-2429-X},
    numpages	= {12},
    doi		= {http://dx.doi.org/10.1109/PACT.2005.28},
    acmid	= {1092219}
}

@InProceedings{Mubarak12Dragonfly,
  title={Modeling a million-node dragonfly network using massively parallel discrete-event simulation},
  author={Mubarak, Misbah and Carothers, Christopher D and Ross, Robert and Carns, Philip},
  booktitle={High Performance Computing, Networking, Storage and Analysis (SCC), 2012 SC Companion:},
  pages={366--376},
  year={2012},
  organization={IEEE}
}

@Article{	  Naksinehaboon09Checkpointing,
    author	= {Nichamon Naksinehaboon and Mihaela Paun and Raja Nassar
		  and Chokchai Leangsuksun and Stephen Scott},
    title	= {High Performance Computing Systems with Various
		  Checkpointing Schemes},
    journal	= {Informational Journal Of Computers Communications \&
		  Control},
    year	= {2009},
    volume	= {4},
    number	= {4},
    pages	= {386--400},
    issn	= {1841-9836}
}

@InProceedings{	  Nataraj08TAUOverMRNet,
    author	= {Aroon Nataraj and Allen D. Malony and Alan Morris and
		  Dorian Arnold and Barton Miller},
    title	= {A Framework for Scalable, Parallel Performance Monitoring
		  using TAU and MRNet},
    booktitle	= {International Workshop on Scalable Tools for High-End
		  Computing (STHEC 2008)},
    month	= {June},
    year	= {2008},
    address	= {Island of Kos, Greece},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Nath04SynopsisDiffusion,
    author	= {Suman Nath and Phillip B. Gibbons and Srinivasan Seshan
		  and Zachary R. Anderson},
    title	= {Synopsis Diffusion for Robust Aggregation in Sensor
		  Networks},
    booktitle	= {2nd International Conference on Embedded Networked Sensor
		  Systems(SenSys '04)},
    month	= {November},
    year	= {2004},
    address	= {Baltimore, MD},
    pages	= {250--262},
    date	= {3--5},
    doi		= {http://doi.acm.org/10.1145/1031495.1031525},
    isbn	= {1-58113-879-2},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Nath08SynopsisDiffusion,
    author	= {Suman Nath and Phillip B. Gibbons and Srinivasan Seshan
		  and Zachary Anderson},
    title	= {Synopsis Diffusion for Robust Aggregation in Sensor
		  Networks},
    journal	= {ACM Transactions on Sensor Networks},
    year	= {2008},
    address	= {New York, NY, USA},
    volume	= {4},
    number	= {2},
    pages	= {1--40},
    publisher	= {ACM},
    doi		= {http://doi.acm.org/10.1145/1340771.1340773},
    issn	= {1550-4859},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  NERSCFailureData,
    author	= {{National Energy Research Scientific Computing Center}},
    title	= {{FY07 System Availability Statistics}},
    note	= {http://www.nersc.gov/nusers/status/AvailStats/FY07/},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Navarro02ClusterAdministration,
    author	= {John-Paul Navarro and Remy Evard and Dan Nurmi and Narayan
		  Desai},
    title	= {Scalable Cluster Administration: Chiba City I Approach and
		  Lessons Learned},
    booktitle	= {IEEE International Conference on Cluster Computing
		  (CLUSTER 2002)},
    month	= {September},
    year	= {2002},
    address	= {Chicago, IL},
    pages	= {215--221},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Nethercote03Valgrind,
    author	= {Nicholas Nethercote and Julian Seward},
    title	= {{Valgrind: A Program Supervision Framework}},
    journal	= {Electronic Notes in Theoretical Computer Science},
    year	= {2003},
    volume	= {89},
    number	= {2},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Netzer95ConsistentGlobalSnapshots,
    author	= {Robert H. B. Netzer and Jian Xu},
    title	= {Necessary and Sufficient Conditions for Consistent Global
		  Snapshots},
    journal	= {IEEE Transactions on Parallel and Distributed Systems},
    month	= {February},
    year	= {1995},
    volume	= {6},
    number	= {2},
    pages	= {165--169},
    abstract	= {Consistent global snapshots are important in many
		  distributed applications. We prove the exact conditions for
		  an arbitrary checkpoint, or a set of checkpoints, to belong
		  to a consistent global snapshot, a previously open problem.
		  To describe the conditions, we introduce a generalization
		  of Lamport's (1978) happened-before relation called a
		  zigzag path.},
    file	= {Netzer95ConsistentGlobalSnapshots.pdf:Netzer95ConsistentGlobalSnapshots.pdf:PDF}
		  ,
    keywords	= {Distributed Consistency},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{Nicolae2013AIckpt,
  title={AI-Ckpt: leveraging memory access patterns for adaptive asynchronous incremental checkpointing},
  author={Nicolae, Bogdan and Cappello, Franck},
  booktitle={Proceedings of the 22nd international symposium on High-performance parallel and distributed computing},
  pages={155--166},
  year={2013},
  organization={ACM}
}

@Article{	  Nightingale:08:Rethink,
    author	= {Nightingale, Edmund B. and Veeraraghavan, Kaushik and
		  Chen, Peter M. and Flinn, Jason},
    title	= {Rethink the sync},
    journal	= {ACM Trans. Comput. Syst.},
    year	= {2008},
    volume	= {26},
    number	= {3},
    pages	= {1--26},
    annote	= {Probably not directly relevant. It uses fault tolerance
		  techniques to improve file system performance.},
    abstract	= {We introduce external synchrony, a new model for local
		  file I/O that provides the reliability and simplicity of
		  synchronous I/O, yet also closely approximates the
		  performance of asynchronous I/O. An external observer
		  cannot distinguish the output of a computer with an
		  externally synchronous file system from the output of a
		  computer with a synchronous file system. No application
		  modification is required to use an externally synchronous
		  file system. In fact, application developers can program to
		  the simpler synchronous I/O abstraction and still receive
		  excellent performance. We have implemented an externally
		  synchronous file system for Linux, called xsyncfs. Xsyncfs
		  provides the same durability and ordering-guarantees as
		  those provided by a synchronously mounted ext3 file system.
		  Yet even for I/O-intensive benchmarks, xsyncfs performance
		  is within 7\%; of ext3 mounted asynchronously. Compared to
		  ext3 mounted synchronously, xsyncfs is up to two orders of
		  magnitude faster.},
    issn	= {0734-2071},
    doi		= {http://doi.acm.org/10.1145/1394441.1394442}
}

@InProceedings{	  oneil11FloatingPointGPUCompression,
    author	= {Molly A. O'Neil and Martin Burtscher},
    title	= {Floating-point data compression at 75 Gb/s on a {GPU}},
    booktitle	= {Proceedings of the Fourth Workshop on General Purpose
		  Processing on Graphics Processing Units},
    year	= {2011},
    address	= {New York, NY, USA},
    pages	= {7:1--7:7},
    publisher	= {ACM},
    series	= {GPGPU-4},
    url		= {http://doi.acm.org/10.1145/1964179.1964189},
    location	= {Newport Beach, California},
    isbn	= {978-1-4503-0569-3},
    keywords	= {floating-point data, GPGPU, lossless data compression,
		  real-time compression},
    doi		= {http://doi.acm.org/10.1145/1964179.1964189},
    acmid	= {1964189},
    articleno	= {7},
    numpages	= {7}
}

@Article{	  Obraczka98MulticastSurvey,
    author	= {Katia Obraczka},
    title	= {Multicast Transport Protocols: A Survey and Taxonomy},
    journal	= {Communications Magazine, IEEE},
    month	= {January},
    year	= {1998},
    volume	= {36},
    number	= {1},
    pages	= {94--102},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Oldfield:07:Modeling,
    author	= {Ron A. Oldfield and Sarala Arunagiri and Patricia J.
		  Teller and Seetharami Seelam and Maria Ruiz Varela and Rolf
		  Riesen and Philip C. Roth},
    title	= {Modeling the Impact of Checkpoints on Next-Generation
		  Systems},
    booktitle	= {24th IEEE Conference on Mass Storage Systems and
		  Technologies},
    month	= sep,
    year	= {2007},
    pages	= {30--46},
    annote	= {The paper first justifies the need to improve
		  checkpoint/restart. It then goes on to show how lightweight
		  file systems and overlay nodes can improve the situation.
		  The authors modify Daly's formula to compute the optimal
		  checkpoint interval so it takes the overlay nodes into
		  account. },
    abstract	= {The next generation of capability-class, massively
		  parallel processing (MPP) systems is expected to have
		  hundreds of thousands of processors. For
		  application-driven, periodic checkpoint operations, the
		  state-of-the-art does not provide a solution that scales to
		  next-generation systems. We demonstrate this by using
		  mathematical modeling to compute a lower bound of the
		  impact of these approaches on the performance of
		  applications executed on three massive-scale,
		  in-production, DOE systems and a theoretical petaflop
		  system. We also adapt the model to investigate a proposed
		  optimization that makes use of ``lightweight'' storage
		  architectures and overlay networks to overcome the storage
		  system bottleneck. Our results indicate that (1) as we
		  approach the scale of next-generation systems, traditional
		  checkpoint/restart approaches will increasingly impact
		  application performance, accounting for over 50\% of total
		  application execution time; (2) although our alternative
		  approach improves performance, it has limitations of its
		  own; and (3) there is a critical need for new approaches to
		  checkpoint/restart that allow continuous computing with
		  minimal impact on the scalability of applications.},
    isbn	= {0-7695-3025-7},
    doi		= {http://dx.doi.org/10.1109/MSST.2007.24}
}

@InProceedings{	  Oliner:05:Performance,
    author	= {Oliner, A. J. and Sahoo, R. K. and Moreira, J. E. and
		  Gupta, M.},
    title	= {Performance Implications of Periodic Checkpointing on
		  Large-Scale Cluster Systems},
    booktitle	= {Proceedings of the 19th IEEE International Parallel and
		  Distributed Processing Symposium (IPDPS'05) - Workshop 18},
    year	= {2005},
    pages	= {299.2},
    annote	= {The authors use a from a Cray T3D and a failure log from
		  an AIX cluster to simulate checkpointing and recovery of a
		  BlueGene/L machine. Among other conclusions, they say that
		  periodic checkpointing may not be the best choice since
		  failures are not independent and not identically
		  distributed.},
    abstract	= {Large-scale systems like BlueGene/L are susceptible to a
		  number of software and hardware failures that can affect
		  system performance. Periodic application checkpointing is a
		  common technique for mitigating the amount of work lost due
		  to job failures, but its effectiveness under realistic
		  circumstances has not been studied. In this paper, we
		  analyze the system-level performance of periodic
		  application checkpointing using parameters similar to those
		  projected for BlueGene/L systems. Our results reflect
		  simulations on a toroidal interconnect architecture, using
		  a real job log from a machine similar to BlueGene/L, and
		  with a real failure distribution from a large-scale
		  cluster. Our simulation studies investigate the impact of
		  parameters such as checkpoint overhead and checkpoint
		  interval on a number of performance metrics, including
		  bounded slowdown, system utilization, and total work lost.
		  The results suggest that periodic checkpointing may not be
		  an effective way to improve the average bounded slowdown or
		  average system utilization metrics, though it reduces the
		  amount of work lost due to failures. We show that
		  overzealous checkpointing with high overhead can amplify
		  the effects of failures. The study also suggests that new
		  metrics and checkpointing techniques may be required to
		  effectively handle job failures on large-scale machines
		  like BlueGene/L.},
    isbn	= {0-7695-2312-9},
    doi		= {http://dx.doi.org/10.1109/IPDPS.2005.337}
}

@InProceedings{	  Osman02Zap,
    author	= {Steven Osman and Dinesh Subhraveti and Gong Su and Jason
		  Nieh},
    title	= {The Design and Implementation of Zap: A System for
		  Migrating Computing Environments},
    booktitle	= {5th Symposium on Operating Systems Design and
		  Implementation (OSDI 2002)},
    month	= {December},
    year	= {2002},
    address	= {Boston, MA},
    pages	= {361--376},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  HP-nonStop,
    author	= {Hewlett Packard},
    title	= {{HP} {N}on{S}top Computing},
    howpublished = {\url{http://h20338.www2.hp.com/NonStopComputing/cache/76385-0-0-0-121.html}}
		  
}

@InProceedings{	  Pan88ReverseExecution,
    author	= {Douglas Z. Pan and Mark A. Linton},
    title	= {Supporting Reverse Execution for Parallel Programs},
    booktitle	= {1988 ACM SIGPLAN and SIGOPS Workshop on Parallel and
		  Distributed Debugging (PADD '88)},
    year	= {1988},
    address	= {Madison, WI},
    pages	= {124--129},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/68210.69227},
    isbn	= {0-89791-296-9},
    owner	= {darnold},
    paddress	= {New York, NY},
    timestamp	= {2011.06.26}
}

@TechReport{	  Pascucci05ViSUS,
    author	= {Valerio Pascucci},
    title	= {{ViSUS: Visualization Streams for Ultimate Scalability}},
    month	= {February},
    year	= {2005},
    number	= {UCRL-TR-209692},
    institution	= {Lawrence Livermore National Laboratory},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Paun10IncrementalWeibull,
    author	= {Mihaela Paun and Nichamon Naksinehaboon and Raja Nassar
		  and Chokchai Leangsuksun and Stephen L. Scott and Narate
		  Taerat},
    title	= {Incremental Checkpoint Schemes for Weibull Failure
		  Distribution},
    journal	= {International Journal of Computer Science},
    year	= {2010},
    volume	= {21},
    number	= {3},
    pages	= {329--344}
}

@InProceedings{	  Pedone00Pronto,
    author	= {Fernando Pedone and Svend Fr{\o}lund},
    title	= {Pronto: A Fast Failover Protocol for Off-the-shelf
		  Commercial Databases},
    booktitle	= {19th IEEE Symposium on Reliable Distributed Systems (SRDS
		  '00)},
    month	= {October},
    year	= {2000},
    address	= {N{\"u}rnberg, Germany},
    pages	= {176--185},
    publisher	= {IEE Computer Society},
    doi		= {10.1109/RELDI.2000.885405},
    keywords	= {database management systems, protocols, software fault
		  tolerance, system recovery, transaction processingPronto,
		  database failure, database recovery, end users, enterprise
		  applications, fast failover protocol, highly available
		  database, multiple standard databases, non-determinism,
		  off-the-shelf commercial databases, perfect failure
		  detection, persistent transaction log, replication
		  protocol, transaction processing},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Pedretti:08:Application,
    author	= {Kevin T. Pedretti and Courtenay Vaughan and Karl Scott
		  Hemmert and Brian Barrett},
    title	= {Application Sensitivity to Link and Injection Bandwidth on
		  a {Cray} {XT4} System},
    booktitle	= {Proceedings of the 2005 Cray User Group Annual Technical
		  Conference},
    month	= {May},
    year	= {2008},
    address	= {Helsinki, Finland}
}

@InProceedings{	  Pendarakis01ALMI,
    author	= {Dimitrios Pendarakis and Sherlia Shi and Dinesh Verma and
		  Marcel Waldvogel},
    title	= {ALMI: An Application Level Multicast Infrastructure},
    booktitle	= {3rd USNIX Symposium on Internet Technologies and Systems
		  (USITS '01)},
    month	= {March},
    year	= {2001},
    address	= {San Francisco, CA},
    dates	= {26-28},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Peng:05:Event,
    author	= {Peng, Zhao and Lastovetsky, Alexey},
    title	= {Event Logging: Portable and Efficient Checkpointing in
		  Heterogeneous Environments with Non-FIFO Communication
		  Platforms},
    booktitle	= {Proceedings of the 19th IEEE International Parallel and
		  Distributed Processing Symposium (IPDPS'05) - Workshop 1 -
		  Volume 02},
    year	= {2005},
    address	= {Washington, DC, USA},
    pages	= {125.2--},
    publisher	= {IEEE Computer Society},
    series	= {IPDPS '05},
    abstract	= {The Chandy-Lamport checkpointing algorithm is widely used
		  in fault tolerant implementations of MPI. However, it
		  assumes the FIFO property of message passing, which is not
		  guaranteed by the MPI standard at the application level.
		  Therefore, this algorithm cannot serve as a basis for an
		  implementation-independent fault tolerant MPI. In this
		  paper, we present a variant of the Chandy-Lamport algorithm
		  that does not rely on the FIFO property. This algorithm can
		  be implemented on top of MPI and, hence, used for
		  development of a supplement software component enabling the
		  fault tolerance of any MPI implementation compliant with
		  the MPI standard. We prove the correctness of the algorithm
		  and analyze its performance. Experimental results
		  demonstrating the efficiency of the algorithm are also
		  presented.},
    isbn	= {0-7695-2312-9},
    doi		= {10.1109/IPDPS.2005.207}
}

@InProceedings{	  Pereira00SRMP,
    author	= {Jose Pereira and Luis Rodrigues and Rui Oliveira},
    title	= {Semantically Reliable Multicast Protocols.},
    booktitle	= {19th Symposium on Reliable Distributed Systems (SRDS
		  2000)},
    month	= {October},
    year	= {2000},
    address	= {Nurnberg, Germany},
    pages	= {60--69},
    dates	= {16-18},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Perkins96MobileIP,
    author	= {C. Perkins},
    title	= {IP Mobility Support},
    month	= {October},
    year	= {1996},
    number	= {RFC 2002},
    institution	= {Internet Request for Comments},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{Petrini2003Case,
  title={The case of the missing supercomputer performance: Achieving optimal performance on the 8,192 processors of ASCI Q},
  author={Petrini, Fabrizio and Kerbyson, Darren J and Pakin, Scott},
  booktitle={Supercomputing, 2003 ACM/IEEE Conference},
  pages={55--55},
  year={2003},
  organization={IEEE}
}

@InProceedings{	  plank:diskless-matrix,
    author	= {J. S. Plank and Y. B. Kim and J. J. Dongarra},
    title	= {Algorithm-based diskless checkpointing for fault tolerant
		  matrix operations.},
    booktitle	= {Twenty-Fifth International Symposium on Fault-Tolerant
		  Computing. Digest of Papers},
    month	= {June},
    year	= {1995},
    address	= {Pasadena, CA, USA},
    pages	= {351--360},
    institution	= {UNIV TENNESSEE, DEPT COMP SCI, KNOXVILLE, TN 37996},
    publisher	= {Los Alamitos, CA, USA : IEEE Comput. Soc. Press, 1995},
    abstract	= {The paper is an exploration of diskless checkpointing for
		  distributed scientific computations. With the widespread
		  use of the "network of workstations" (NOW) platform for
		  distributed computing, long-running scientific computations
		  need to tolerate the changing and often faulty nature of
		  NOW environments. We present high-performance
		  implementations of several algorithms for distributed
		  scientific computing, including Cholesky factorization, LU
		  factorization, QR factorization, and preconditioned
		  conjugate gradient. These implementations are able to run
		  on PVM networks of at least N processors, and can complete
		  with low overhead as long as any N processors remain
		  functional. We discuss the details of how the algorithms
		  are tuned for fault-tolerance, and present the performance
		  results on a PVM network of SUN workstations, and on the
		  IBM SP2. (35 refs.)},
    copyright	= {(c)2004 IEE; Institute for Scientific Information, Inc.},
    keywords	= {algorithm based diskless checkpointing, Cholesky
		  factorization, Conjugate gradient methods, Distributed
		  scientific computations, Distributed systems software,
		  Fault tolerance, Fault tolerant matrix operations,
		  application-driven fault tolerance}
}

@TechReport{	  Plank95CompressedDiff,
    author	= {James S. Plank and Jian Xu and Robert H. B. Netzer},
    title	= {Compressed Differences: An Algorithm for Fast Incremental
		  Checkpointing},
    month	= {August},
    year	= {1995},
    number	= {CS-95-302},
    institution	= {University of Tennessee},
    url		= {http://web.eecs.utk.edu/~plank/plank/papers/CS-95-302.html}
		  
}

@InProceedings{	  Plank94Libckpt,
    author	= {James S. Plank and Micah Beck and Gerry Kingsley and Kai
		  Li},
    title	= {Libckpt: Transparent Checkpointing under Unix},
    booktitle	= {USENIX Winter 1995 Technical Conference},
    month	= {January},
    year	= {1995},
    address	= {New Orleans, LA},
    pages	= {213--224},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  plank:jdiskless,
    author	= {James S. Plank and Kai Li and Michael A. Puening},
    title	= {Diskless checkpointing.},
    journal	= {IEEE Transactions on Parallel and Distributed Systems},
    month	= {October},
    year	= {1998},
    volume	= {9},
    number	= {10},
    pages	= {972--986},
    institution	= {Univ Tennessee, Dept Comp Sci, 107 Ayres Hall, Knoxville,
		  TN 37996 USA; Univ Tennessee, Dept Comp Sci, Knoxville, TN
		  37996 USA; Princeton Univ, Dept Comp Sci, Princeton, NJ
		  08544 USA; Cardinal Solut Grp Inc, Cincinnati, OH 45236
		  USA},
    publisher	= {IEEE Computer Society Press},
    abstract	= {Diskless Checkpointing is a technique for checkpointing
		  the state of a long-running computation on a distributed
		  system without relying on stable storage. As such, it
		  eliminates the performance bottleneck of traditional
		  checkpointing on distributed systems. In this paper, we
		  motivate diskless checkpointing and present the basic
		  diskless checkpointing scheme along with several variants
		  for improved performance. The performance of the basic
		  scheme and its variants is evaluated on a high-performance
		  network of workstations and compared to traditional
		  disk-based checkpointing. We conclude that diskless
		  checkpointing is a desirable alternative to disk-based
		  checkpointing that can improve the performance of
		  distributed applications in the face of failures. (39
		  refs.)},
    copyright	= {(c)2004 IEE; Institute for Scientific Information, Inc.}
}

@Article{	  Plank98Diskless,
    author	= {J.S. Plank and Kai Li and M.A. Puening},
    title	= {Diskless checkpointing},
    journal	= {Parallel and Distributed Systems, IEEE Transactions on},
    month	= {oct},
    year	= {1998},
    volume	= {9},
    number	= {10},
    pages	= {972--986},
    keywords	= {disk-based checkpointing, diskless checkpointing,
		  distributed applications, distributed system,
		  high-performance network, long-running computation,
		  performance bottleneck, distributed processing, fault
		  tolerant computing, system recovery},
    doi		= {10.1109/71.730527},
    issn	= {1045-9219}
}

@Article{	  Plank99MemoryExclusion,
    author	= {J. S. Plank and Y. Chen and K. Li and M. Beck and G.
		  Kingsley},
    title	= {Memory Exclusion: Optimizing the Performance of
		  Checkpointing Systems},
    journal	= {Software -- Practice \& Experience},
    year	= {1999},
    volume	= {29},
    number	= {2},
    pages	= {125--142},
    where	= {http://www.cs.utk.edu/~plank/plank/papers/SPE99.html}
}

_markedentry = "[darnold]",
	owner = "darnold",
	timestamp = "2011.06.27",
	url = "http://www.7-zip.org/sdk.html"
}
@Article{	  Plimpton:95:Fast,
    author	= {Steven J. Plimpton},
    title	= {Fast Parallel Algorithms for Short-Range Molecular
		  Dynamics},
    journal	= {Journal Computation Physics},
    year	= {1995},
    volume	= {117},
    pages	= {1--19}
}

@InProceedings{	  Powell83Publishing,
    author	= {Michael L. Powell and David L. Presotto},
    title	= {PUBLISHING: A Reliable Broadcast Communication Mechanism},
    booktitle	= {9th ACM Symposium on Operating System Principles},
    month	= {October},
    year	= {1983},
    address	= {Bretton Woods, NH},
    pages	= {100--109},
    abstract	= {Publishing is a model and mechanism for crash recovery in
		  a distributed computing environment. Published
		  communication works for systems connected via a broadcast
		  medium by recording messages transmitted over the network.
		  The recovery mechanism can be completely transparent to the
		  failed process and all processes interacting with it.
		  Although published communication is intended for a
		  broadcast network such as a bus, a ring, or an Ethernet, it
		  can be used in other environments.},
    dates	= {10--13},
    file	= {Powell83Publishing.pdf:Powell83Publishing.pdf:PDF},
    owner	= {darnold},
    summary	= {notes/Powell83Publishing.txt},
    timestamp	= {2011.06.26}
}

_markedentry = "[darnold]",
	issn = "1063-6552",
	owner = "darnold",
	timestamp = "2011.06.27"
}
@InProceedings{	  Powell83ProcessMigration,
    author	= {Michael L. Powell and Barton P. Miller},
    title	= {Process Migration in DEMOS/MP},
    booktitle	= {Ninth ACM Symposium on Operating Systems Principle (SOSP
		  '83)},
    year	= {1983},
    address	= {Bretton Woods, New Hampshire},
    pages	= {110--119},
    publisher	= {ACM Press},
    abstract	= {Process migration has been added to the DEMOS/MP operating
		  system. A process can be moved during its execution, and
		  continue on another processor, with continuous access to
		  all its resources. Messages are correctly delivered to the
		  proeess's new location, and message paths are quickly
		  updated to take advantage of the process's new location. No
		  centralized algorithms are necessary to move a process. A
		  number of characteristics of DEMOS/NIP allowed process
		  migration to be implemented efficiently and with no changes
		  to system services. Among these characteristics are the
		  uniform and location independent communication interface,
		  and the fact that the kernel can participate in message
		  send and receive operations in the same manner as a normal
		  process.},
    file	= {Powell83ProcessMigration.pdf:Powell83ProcessMigration.pdf:PDF}
		  ,
    keywords	= {Process Migration},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Qu97MobileTCP,
    author	= {Xun Qu and Jeffery Xu Yu and Richard P. Brent},
    title	= {A Mobile TCP Socket},
    booktitle	= {International Conference on Software Engineering (SE
		  '97)},
    month	= {November},
    year	= {1997},
    address	= {San Francisco, CA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  quadrics,
    author	= {{Quadrics Supercomputers World, Ltd.}},
    title	= {{Quadrics Documentation Collection}},
    note	= {http://www.quadrics.com/onlinedocs/Linux/html/index.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Randell75FaultTolerance,
    author	= {Brian Randell},
    title	= {System Structure for Software Fault Tolerance},
    booktitle	= {International Conference on Reliable Software},
    year	= {1975},
    address	= {Los Angeles, CA},
    pages	= {437--449},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Randell78ReliabilityIssues,
    author	= {B. Randell and P. Lee and P. C. Treleaven},
    title	= {Reliability Issues in Computing System Design},
    journal	= {ACM Computing Surveys},
    year	= {1978},
    volume	= {10},
    number	= {2},
    pages	= {123--165},
    abstract	= {This paper surveys the various problems involved in
		  achieving very high reliability from complex computing
		  systems, and discusses the relationship between system
		  structuring techniques and techniques of fault tolerance.
		  Topics covered include: 1) protective redundancy in
		  hardware and software; 2) the use of atomic actions to
		  structure the activity of a system to limit information
		  flow; 3) error detection techniques; 4) strategies for
		  locating and dealing with faults and for assessing the
		  damage they have caused; and 5) forward and backward error
		  recovery techniques, based on the concepts of recovery
		  line, commitment, exception, and compensation. The ideas
		  described relate to techniques used to date in systems
		  intended for environments in which high reliability is
		  demanded. Three specific systems the JPL-STAR, the Bell
		  Laboratories ESS No. 1A processor, and the PLURIBUS are
		  described in some detail and compared.},
    doi		= {http://doi.acm.org/10.1145/356725.356729},
    file	= {Randell78ReliabilityIssues.pdf:Randell78ReliabilityIssues.pdf:PDF}
		  ,
    keywords	= {Reliability, Fault-tolerance},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  randell:fault-tolerance,
    author	= {B. Randell},
    title	= {Turing memorial lecture. Facing up to faults.},
    journal	= {Computer Journal},
    year	= {2000},
    volume	= {43},
    number	= {2},
    pages	= {95 -- 106},
    institution	= {Univ Newcastle Upon Tyne, Dept Comp Sci, Newcastle Upon
		  Tyne NE1 7RG, Tyne \& Wear, England; Univ Newcastle Upon
		  Tyne, Dept Comp Sci, Newcastle Upon Tyne NE1 7RG, Tyne \&
		  Wear, England},
    publisher	= {UK : Oxford University Press for British Comput. Soc,
		  2000},
    abstract	= {As individuals, organizations and indeed the world at
		  large have become more dependent on computer based systems,
		  so there has been an ever growing amount of research into
		  means for improving the dependability of these systems. In
		  particular, there has been much work on trying to gain an
		  increased understanding of the many and varied types of
		  faults that need to be prevented or tolerated in order to
		  reduce the probability and severity of system failures. The
		  author discusses the assumptions that are often made by
		  computing system designers regarding faults, surveys a
		  number of continuing issues related to fault tolerance, and
		  identifies some of the latest challenges facing researchers
		  in this arena. (30 refs.)},
    copyright	= {(c)2004 IEE; Institute for Scientific Information, Inc.},
    keywords	= {fault tolerance, turing lecture}
}

@InProceedings{	  Raynal:01:Quiescent,
    author	= {Raynal, Michel},
    title	= {Quiescent Uniform Reliable Broadcast as an Introduction to
		  Failure Detector Oracles},
    booktitle	= {PaCT '01: Proceedings of the 6th International Conference
		  on Parallel Computing Technologies},
    year	= {2001},
    pages	= {98--111},
    abstract	= {This paper is a short and informal introduction to failure
		  detector oracles for asynchronous distributed systems prone
		  to process crashes and fair lossy channels. A distributed
		  coordination problem (the implementation of Uniform
		  Reliable Broadcast with a quiescent protocol) is used as a
		  paradigm to visit two types of such oracles. One of them is
		  a ``guessing'' oracle in the sense that it provides a
		  process with information that the processes could only
		  approximate if they had to compute it. The other is a
		  ``hiding'' oracle in the sense that it allows to isolate
		  and encapsulate the part of a protocol that has not the
		  required behavioral properties. A quiescent uniform
		  reliable broadcast protocol is described. The guessing
		  oracle is used to ensure the ``uniformity'' requirement
		  stated in the problem specification. The hiding oracle is
		  used to ensure the additional ``quiescence'' property that
		  the protocol behavior has to satisfy.},
    isbn	= {3-540-42522-5},
    doi		= {http://dx.doi.org/10.1007/3-540-44743-1_10}
}

@InProceedings{	  Reed96PerformanceSteering,
    author	= {Daniel A. Reed and Christopher L. Elford and Tara M.
		  Madhyastha and Evgenia Smirni and Stephen E. Lamm},
    title	= {The Next Frontier: Closed Loop and Interactive Performance
		  Steering},
    booktitle	= {International Conference on Parallel Processing Workshop
		  on Challenges for Parallel Processing},
    month	= {August},
    year	= {1996},
    address	= {Bloomingdale, IL},
    pages	= {20--31},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  VanRenesse98Gossip,
    author	= {Robbert Van Renesse and Yaron Minsky and Mark Hayden},
    title	= {A Gossip-Style Failure Detection Service},
    booktitle	= {Middleware '98},
    year	= {1998},
    address	= {The Lake District, UK},
    pages	= {55--70},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  VanRenesse03Astrolabe,
    author	= {Robbert Van Renesse and Kenneth P. Birman and Werner
		  Vogels},
    title	= {Astrolabe: A robust and scalable technology for
		  distributed system monitoring, management, and data
		  mining},
    journal	= {ACM Transactions on Computer Systems},
    year	= {2003},
    address	= {New York, NY},
    volume	= {21},
    number	= {2},
    pages	= {164--206},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/762483.762485},
    issn	= {0734-2071},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Ribler98Autopilot,
    author	= {Randy L Ribler and Jeffrey S. Vetter and Huseyin Simitci
		  and Daniel A. Reed},
    title	= {Autopilot: Adaptive Control of Distributed Applications},
    booktitle	= {7th IEEE International Symposium on High Performance
		  Distributed Computing (HPDC 7)},
    year	= {1998},
    address	= {Chicago, IL},
    pages	= {172--179},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Riesen:10:redundant-position,
    author	= { Rolf Riesen and Kurt Ferreira and Jon Stearley},
    title	= { See Applications Run and Throughput Jump: The Case for
		  Redundant Computing in {HPC}},
    booktitle	= { To Appear, 1st International Workshop on Fault-Tolerance
		  for HPC at Extreme Scale (FTXS 2010) },
    month	= {June},
    year	= {2010},
    address	= {Chicago, IL}
}

@InProceedings{	  riesen-hotpar,
    author	= {Rolf Riesen and Kurt Ferreira and Jon Stearley},
    title	= {See Applications Run and Throughput Jump: The Case for
		  Redundant Computing in HPC},
    booktitle	= {Submitted to HotPAR 2010},
    year	= {2010},
    date-added	= {2010-02-18 12:36:25 -0700},
    date-modified = {2010-02-18 12:38:32 -0700}
}

@TechReport{    Riesen10Redundant,
  title={Redundant computing for exascale systems},
  author={Riesen, Rolf and Ferreira, Kurt and Stearley, Jon and Oldfield, Ron and Laros III, James H and Pedretti, Kevin and Brightwell, Ron and others},
  year={2010},
  institution={Technical report SAND2010-8709, Sandia National Laboratories}
}


@Article{	  Rochkind75SCCS,
    author	= {M.J. Rochkind},
    title	= {The Source Code Control System},
    journal	= {IEEE Transactions on Software Engineering},
    month	= {December},
    year	= {1975},
    volume	= {1},
    number	= {4},
    pages	= {364--70},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Roth02DeepStart,
    author	= {Philip C. Roth and Barton P. Miller},
    title	= {Deep Start: A Hybrid Strategy for Automated Performance
		  Problem Searches},
    booktitle	= {Euro-Par 2002},
    month	= {August},
    year	= {2002},
    address	= {Paderborn, Germany},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Roth03MRNet,
    author	= {Phillip C. Roth and Dorian C. Arnold and Barton P.
		  Miller},
    title	= {{MRNet}: A Software-Based Multicast/Reduction Network for
		  Scalable Tools},
    booktitle	= {2003 ACM/IEEE conference on Supercomputing (SC '03)},
    month	= {November},
    year	= {2003},
    address	= {Phoenix, AZ},
    pages	= {21},
    publisher	= {IEEE Computer Society},
    isbn	= {1-58113-695-1},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Roth06DPCandSGFA,
    author	= {Phillip C. Roth and Barton P. Miller},
    title	= {On-line Automated Performance Diagnosis on Thousands of
		  Processes},
    booktitle	= {ACM SIGPLAN Symposium on Principles and Practice of
		  Parallel Programming (PPoPP '06)},
    month	= {March},
    year	= {2006},
    address	= {New York, NY},
    date	= {29--31},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Russell80StateRestoration,
    author	= {David L. Russell},
    title	= {State Restoration in Systems of Communicating Processes},
    journal	= {IEEE Transactions on Software Engineering},
    year	= {1980},
    volume	= {6},
    number	= {2},
    pages	= {183--194},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Sabata96TRM,
    author	= {Bikash Sabata and Michael J. Brown and Barbara A. Denny},
    title	= {Transport Protocol for Reliable Multicast: TRM},
    booktitle	= {IASTED International Conference for Networks},
    month	= {January},
    year	= {1996},
    address	= {Orlando, FL},
    pages	= {143--145},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Sacerdoit03Ganglia,
    author	= {Federico D. Sacerdoti and Mason J. Katz and Matthew L.
		  Massie and David E. Culler},
    title	= {Wide Area Cluster Monitoring with Ganglia},
    booktitle	= {IEEE International Conference on Cluster Computing
		  (CLUSTER 2003)},
    month	= {September},
    year	= {2003},
    address	= {Hong Kong},
    pages	= {289--298},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Saia08SelfHealing,
    author	= {J. Saia and A. Trehan},
    title	= {Picking up the Pieces: Self-Healing in Reconfigurable
		  Networks},
    booktitle	= {22nd IEEE International Parallel and Distributed
		  Processing Symposium (IPDPS '08)},
    month	= {April},
    year	= {2008},
    address	= {Miami, FL},
    dates	= {14--18},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Saito:05:Optimistic,
    author	= {Saito, Yasushi and Shapiro, Marc},
    title	= {Optimistic Replication},
    journal	= {ACM Comput. Surv.},
    year	= {2005},
    address	= {New York, NY, USA},
    volume	= {37},
    number	= {1},
    pages	= {42--81},
    publisher	= {ACM},
    annote	= {Aimed more at distributed systems.},
    abstract	= {Data replication is a key technology in distributed
		  systems that enables higher availability and performance.
		  This article surveys optimistic replication algorithms.
		  They allow replica contents to diverge in the short term to
		  support concurrent work practices and tolerate failures in
		  low-quality communication links. The importance of such
		  techniques is increasing as collaboration through wide-area
		  and mobile networks becomes popular. Optimistic replication
		  deploys algorithms not seen in traditional ``pessimistic''
		  systems. Instead of synchronous replica coordination, an
		  optimistic algorithm propagates changes in the background,
		  discovers conflicts after they happen, and reaches
		  agreement on the final contents incrementally. We explore
		  the solution space for optimistic replication algorithms.
		  This article identifies key challenges facing optimistic
		  replication systems -- ordering operations, detecting and
		  resolving conflicts, propagating changes efficiently, and
		  bounding replica divergence -- and provides a comprehensive
		  survey of techniques developed for addressing these
		  challenges.},
    issn	= {0360-0300},
    doi		= {http://doi.acm.org/10.1145/1057977.1057980}
}

@Article{	  Saltzer84EndtoEnd,
    author	= {Jerome H. Saltzer and David P. Reed and David D. Clark},
    title	= {End-To-End Arguments in System Design},
    journal	= {ACM Transactions on Computer Systems},
    month	= {Nov.},
    year	= {1984},
    volume	= {2},
    number	= {4},
    pages	= {277--288},
    url		= {http://citeseer.ist.psu.edu/saltzer84endtoend.html},
    abstract	= {This paper presents a design principle that helps guide
		  placement of functions among the modules of a distributed
		  computer system. The principle, called the end-to-end
		  argument, suggests that functions placed at low levels of a
		  system may be redundant or of little value when compared
		  with the cost of providing them at that low level. Examples
		  discussed in the paper include bit error recovery, security
		  using encryption, duplicate message suppression, recovery
		  from system crashes, and delivery acknowledgement. Low
		  level mechanisms to support these functions are justified
		  only as performance enhancements.},
    keywords	= {system design},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Jose:04:On,
    author	= {Jose; Carlos Sancho and Fabrizio Petrini and Greg Johnson
		  and Juan Fernandez and Eitan Frachtenberg},
    title	= {On the Feasibility of Incremental Checkpointing for
		  Scientific Computing},
    journal	= {Parallel and Distributed Processing Symposium,
		  International},
    year	= {2004},
    address	= {Los Alamitos, CA, USA},
    volume	= {1},
    pages	= {58b},
    publisher	= {IEEE Computer Society},
    isbn	= {0-7695-2132-0},
    doi		= {http://doi.ieeecomputersociety.org/10.1109/IPDPS.2004.1302982}
		  
}

@Misc{		  SNL:10:LAMMPS,
    author	= {{Sandia National Laboratory}},
    title	= {{LAMMPS} Molecular Dynamics Simulator},
    month	= {Apr.~10},
    year	= {2010},
    howpublished = {\url{http://lammps.sandia.gov}},
    day		= {6}
}

@Misc{		  SNL:10:Mantevo,
    author	= {{Sandia National Laboratory}},
    title	= {Mantevo Project Home Page},
    month	= {Jan.~10},
    year	= {2014},
    howpublished = {\url{http://mantevo.org}},
    day		= {6}
}

@Article{	  sankaran:05:lam_mpi_check_restart,
    author	= {Sriram Sankaran and Jeffrey M. Squyres and Brian Barrett
		  and Andrew Lumsdaine and Jason Duell and Paul Hargrove and
		  Eric Roman},
    title	= {The {LAM/MPI} Checkpoint/Restart Framework:
		  System-Initiated Checkpointing},
    journal	= {International Journal of High Performance Computing
		  Applications},
    month	= {Winter},
    year	= {2005},
    volume	= {19},
    number	= {4},
    pages	= {479--493},
    keywords	= {MPI, checkpoint/restart, rollback-recovery}
}

@Article{	  Schlichting:83:Fail-stop,
    author	= {Schlichting, Richard D. and Schneider, Fred B.},
    title	= {Fail-stop processors: an approach to designing
		  fault-tolerant computing systems},
    journal	= {ACM Trans. Comput. Syst.},
    year	= {1983},
    volume	= {1},
    number	= {3},
    pages	= {222--238},
    annote	= {Describes the fail-stop model that is assumed by most
		  checkpoint/restart algorithms.},
    abstract	= {A methodology that facilitates the design of
		  fault-tolerant computing systems is presented. It is based
		  on the notion of a fail-stop processor. Such a processor
		  automatically halts in response to any internal failure and
		  does so before the effects of that failure become visible.
		  The problem of implementing processors that, with high
		  probability, behave like fail-stop processors is addressed.
		  Axiomatic program verification techniques are described for
		  use in developing provably correct programs for fail-stop
		  processors. The design of a process control system
		  illustrates the use of our methodology.},
    issn	= {0734-2071},
    doi		= {http://doi.acm.org/10.1145/357369.357371}
}

@Article{	  Schneider84FailstopProcessors,
    author	= {Fred B. Schneider},
    title	= {Byzantine Generals in Action: Implementing Fail-stop
		  Processors},
    journal	= {ACM Transactions Computer Systems},
    month	= {May},
    year	= {1984},
    volume	= {2},
    number	= {2},
    pages	= {145--154},
    abstract	= {A fail-stop processor halts instead of performing an
		  erroneous state transformation that might be visible to
		  other processors, can detect whether another fail-stop
		  processor has halted (due to a failure), and has a
		  predefined portion of its storage that will remain
		  unaffected by failures and accessible to any other
		  fail-stop processor. Fail-stop processors can simplify the
		  construction of fault-tolerant computing systems. In this
		  paper, the problem of approximating fail-stop processors is
		  discussed. Use of fail-stop processors is compared with the
		  state machine approach, another general paradigm for
		  constructing fault-tolerant systems.},
    file	= {Schneider84FailstopProcessors.pdf:Schneider84FailstopProcessors.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Schneider:90:Implementing,
    author	= {F. Schneider},
    title	= {Implementing Fault-Tolerant Services Using the State
		  Machine Approach: {A} Tutorial},
    journal	= {ACM Computing Surveys},
    year	= {1990},
    volume	= {22},
    number	= {4},
    pages	= {299--319},
    date-modified = {2007-02-22 11:20:09 -0700}
}

@Article{	  Schneider90FaultTolerance,
    author	= {Fred B. Schneider},
    title	= {Implementing Fault-tolerant Services using the State
		  Machine Approach: A Tutorial},
    journal	= {ACM Computing Surveys},
    year	= {1990},
    address	= {New York, NY, USA},
    volume	= {22},
    number	= {4},
    pages	= {299--319},
    publisher	= {ACM},
    doi		= {http://doi.acm.org/10.1145/98163.98167},
    issn	= {0360-0300},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InBook{	  Schneider93GoodModels,
    author	= {Fred B. Schneider},
    editor	= {Sape Mullender},
    title	= {Distributed Systems},
    year	= {1993},
    address	= {New York, NY},
    pages	= {17--26},
    edition	= {2nd},
    publisher	= {ACM Press/Addison-Wesley Publishing Co.},
    chapter	= {2},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Schroeder:2006:Large-scale,
    author	= {Bianca Schroeder and Garth A. Gibson},
    title	= {A Large-scale Study of Failures in High-performance
		  Computing Systems},
    booktitle	= {Dependable Systems and Networks (DSN 2006)},
    month	= {June},
    year	= {2006},
    address	= {Philadelphia, PA},
    dates	= {25--28},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Schroeder:06:large-scale,
    author	= {Bianca Schroeder and Garth A. Gibson},
    title	= {A large-scale study of failures in high-performance
		  computing systems},
    booktitle	= {International Conference on Dependable Systems and
		  Networks (DSN)},
    month	= jun,
    year	= {2006},
    abstract	= {Designing highly dependable systems requires a good
		  understanding of failure characteristics. Unfortunately
		  little raw data on failures in large IT installations is
		  publicly available, due to the confidential nature of this
		  data. This paper analyzes soon-to-be public failure data
		  covering systems at a large high-performance-computing
		  site. The data has been collected over the past 9 years at
		  Los Alamos National Laboratory and includes 23000 failures
		  recorded on more than 20 different systems, mostly large
		  clusters of SMP and NUMA nodes. We study the statistics of
		  the data, including the root cause of failures, the mean
		  time between failures, and the mean time to repair. We find
		  for example that average failure rates differ wildly across
		  systems, ranging from 20-1000 failures per year, and that
		  time between failures is modeled well by a Weibull
		  distribution with decreasing hazard rate. From one system
		  to another, mean repair time varies from less than an hour
		  to more than a day, and repair times are well modeled by a
		  lognormal distribution.},
    comment	= {Excellent paper that details a long-term study of system
		  failures at LANL.},
    keywords	= {Failure data, Lifetime data, Root cause, Repair time, High
		  performance computing}
}

@InProceedings{  Schroeder:09:dram,
    author = {Schroeder, Bianca and Pinheiro, Eduardo and Weber, Wolf-Dietrich},
    title  = {DRAM errors in the wild: a large-scale field study},
    booktitle={Proceedings of the eleventh international joint conference on 
        Measurement and modeling of computer systems},
    pages={193--204},
    year={2009},
    organization={ACM}
}

@InProceedings{	  Schroeder07CFDR,
    author	= {Bianca Schroeder and Garth Gibson},
    title	= {The Computer Failure Data Repository},
    booktitle	= {Workshop on Reliability Analysis of System Failure Data
		  (RAF'07)},
    month	= {March},
    year	= { 2007},
    address	= {Cambridge, UK},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Schroeder07UnderstandingFailures,
    author	= {Bianca Schroeder and Garth A. Gibson},
    title	= {Understanding Failures in Petascale Computers},
    journal	= {Journal of Physics Conference Series},
    year	= {2007},
    volume	= {78},
    number	= {1},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Schroeder:07:Understanding,
    author	= {Bianca Schroeder and Garth A Gibson},
    title	= {Understanding failures in petascale computers},
    journal	= {Journal of Physics: Conference Series},
    year	= {2007},
    volume	= {78},
    number	= {1},
    pages	= {012022}
}

@Article{	  Schulz05ScalableInstrumentation,
    author	= {Martin Schulz and Dong Ahn and Andrew Bernat and Bronis R.
		  de Supinski and Steven Y. Ko and Gregory Lee and Barry
		  Rountree},
    title	= {Scalable Dynamic Binary Instrumentation for Blue Gene/L},
    journal	= {ACM SIGARCH Computer Architecture News},
    year	= {2005},
    address	= {New York, NY},
    volume	= {33},
    number	= {5},
    pages	= {9--14},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/1127577.1127581},
    issn	= {0163-5964},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Seager03ASCIWhite,
    author	= {Mark Seager},
    title	= {Operational Machines: ASCI White},
    booktitle	= {7th Workshop on Distributed Supercomputing},
    month	= {March},
    year	= {2003},
    address	= {Durango, CO},
    url		= {http://www.cs.sandia.gov/SOS7/},
    note	= {Presentation.},
    dates	= {4--6},
    key		= {ASCIWhite},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Shatdal95ParallelAggregation,
    author	= {Ambuj Shatdal and Jeffrey F. Naughton},
    title	= {Adaptive Parallel Aggregation Algorithms},
    booktitle	= {1995 International Conference on Management of Data
		  (SIGMOD '95)},
    month	= {May},
    year	= {1995},
    address	= {San Jose, CA},
    volume	= {24},
    number	= {2},
    pages	= {104--114},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Shipman:09:Spider,
    author	= {Galen Shipman and Dave Dillow and Sarp Oral and Feiyi
		  Wang},
    title	= {The {Spider} Center Wide File System: From Concept to
		  Reality},
    booktitle	= {Proceedings of the 2009 Cray User Group (CUG) Conference},
    month	= {May},
    year	= {2009},
    address	= {Atlanta, GA}
}

@Article{	  Shoch82Worm,
    author	= {John F. Shoch and Jon A. Hupp},
    title	= {The "worm" Programs -- Early Experience with a Distributed
		  Computation},
    journal	= {Communications of the ACM},
    year	= {1982},
    address	= {New York, NY},
    volume	= {25},
    number	= {3},
    pages	= {172--180},
    publisher	= {ACM Press},
    abstract	= {The "worm" programs were an experiment in the development
		  of distributed computations: programs that span machine
		  boundaries and also replicate themselves in idle machines.
		  A "worm" is composed of multiple ~segments,~ each running
		  on a different machine. The underlying worm maintenance
		  mechanisms are responsible for maintaining the worm --
		  finding free machines when needed and replicating the
		  program for each additional segment. These techniques were
		  successfully used to support several real applications,
		  ranging from a simple multimachine test program to a more
		  sophisticated real-time animation system harnessing
		  multiple machines.},
    doi		= {http://doi.acm.org/10.1145/358453.358455},
    file	= {Shoch82Worm.pdf:Shoch82Worm.pdf:PDF},
    issn	= {0001-0782},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@PhDThesis{	  Silva97Checkpointing,
    author	= {Luis Moura Silva},
    title	= {Checkpointing mechanisms for Scientific Parallel
		  Applications},
    month	= {March},
    year	= {1997},
    address	= {Portugal},
    school	= {University of Coimbra},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  silva:diskless,
    author	= {L. M. Silva and J. G. Silva},
    title	= {An experimental study about diskless checkpointing.},
    booktitle	= {24th EUROMICRO Conference},
    month	= {August},
    year	= {1998},
    address	= {Vasteras, Sweden},
    pages	= {395 -- 402},
    institution	= {UNIV COIMBRA, DEPT INFORMAT ENGN, POLO 2, VILA FRANCA,
		  P-3030 COIMBRA, PORTUGAL},
    publisher	= {IEEE Computer Society Press},
    abstract	= {Checkpointing and rollback recovery is a very effective
		  technique to tolerate the occurrence of failures. Usually,
		  the checkpoint data is saved in some diskfiles. However, in
		  some situations the disk operation may result in a
		  considerable performance overhead. Alternative solutions
		  would make use of main memory to maintain the checkpoint
		  data. The paper presents two main memory check pointing
		  schemes that can be used in any parallel machine without
		  requiring any change to the hardware: one scheme saves the
		  checkpoints in the memory of other processors, while the
		  other is based on a parity approach. Both techniques have
		  been implemented and evaluated in a commercial parallel
		  machine. Some conclusions have been taken that clearly show
		  the superiority of one of those schemes. (18 refs.)},
    copyright	= {(c)2004 IEE; Institute for Scientific Information, Inc.},
    keywords	= {diskless checkpointing, fault tolerant computing, parity
		  approach, performance evaluation and testing}
}

@Article{	  silva:two-level-checkpointing,
    author	= {L. M. Silva and J. G. Silva},
    title	= {Using two-level stable storage for efficient
		  checkpointing.},
    journal	= {IEE Proceedings-Software},
    month	= {December},
    year	= {1998},
    volume	= {145},
    number	= {6},
    pages	= {198--202},
    publisher	= {UK : IEE, 1998},
    abstract	= {Checkpointing and rollback recovery is a very effective
		  technique to tolerate the occurrence of failures. Usually,
		  checkpoint data is saved on disk, however, in some
		  situations the time to write the data to disk can represent
		  a considerable performance overhead. Alternative solutions
		  would make use of main memory to maintain the checkpoint
		  data. The paper starts by presenting two main memory
		  checkpointing schemes: neighbour based and parity
		  checkpointing. Both schemes have been implemented and
		  evaluated in a commercial parallel machine. The results
		  show that neighbour based checkpointing presents a very low
		  performance overhead and assures a fast recovery for
		  partial failures. However, it is not able to tolerate
		  multiple and total failures of the system. To solve this
		  shortcoming the authors propose a two-level stable storage
		  integrating the use of neighbour based with disk based
		  checkpointing. This approach combines the advantages of the
		  two schemes: the efficiency of diskless checkpointing with
		  the high reliability of disk based checkpointing. (20
		  refs.)},
    copyright	= {(c)2004 IEE},
    keywords	= {diskless checkpointing, Fault tolerant computing,
		  neighbour based checkpointing, parity checkpointing}
}

@InCollection{Simon13Barriers,
  title={Barriers to Exascale Computing},
  author={Simon, Horst D},
  booktitle={High Performance Computing for Computational Science-VECPAR 2012},
  pages={1--3},
  year={2013},
  publisher={Springer}
}

@InProceedings{	  Snoeren00HostMobility,
    author	= {Alex C. Snoeren and Hari Balakrishnan},
    title	= {An End-to-End Approach to Host Mobility},
    booktitle	= {ACM MOBICOM},
    month	= {August},
    year	= {2000},
    address	= {Boston, MA},
    pages	= {155--166},
    abstract	= {We present the design and implementation of an end-to-end
		  architecture for Internet host mobility using dynamic
		  updates to the Domain Name System (DNS) to track host
		  location. Existing TCP connections are retained using
		  secure and efficient connection migration, enabling
		  established connections to seamlessly negotiate a change in
		  endpoint IP addresses without the need for a third party.
		  Our architecture is secure?name updates are effected via
		  the secure DNS update protocol, while TCP connection
		  migration uses a novel set of Migrate options?and provides
		  a pure end-system alternative to routing-based approaches
		  such as Mobile IP. Mobile IP was designed under the
		  principle that fixed Internet hosts and applications were
		  to remain unmodified and only the underlying IP substrate
		  should change. Our architecture requires no changes to the
		  unicast IP substrate, instead modifying transport protocols
		  and applications at the end hosts. We argue that this is
		  not a hindrance to deployment; rather, in a significant
		  number of cases, it allows for an easier deployment path
		  than Mobile IP, while simultaneously giving better
		  performance. We compare and contrast the strengths of
		  end-to-end and network-layer mobility schemes, and argue
		  that end-to-end schemes are better suited to many common
		  mobile applications. Our performance experiments show that
		  handoff times are governed by TCP migrate latencies, and
		  are on the order of a round-trip time of the communicating
		  peers.},
    file	= {Snoeren00HostMobility.pdf:Snoeren00HostMobility.pdf:PDF},
    keywords	= {Connection Mobility},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Snoeren01FineGrainedFailover,
    author	= {Alex C. Snoeren and David G. Anderson and Hari
		  Balakrishnan},
    title	= {Fine-Grained Failover Using Connection Migration},
    booktitle	= {3rd USENIX Symposium on Internet Technologies and Systems
		  (USITS)},
    month	= {March},
    year	= {2001},
    address	= {San Francisco, CA},
    pages	= {221--232},
    abstract	= {This paper presents a set of techniques for providing
		  fine-grained failover of long-running connections across a
		  distributed collection of replica servers, and is
		  especially useful for fault-tolerant and load-balanced
		  delivery of streaming media and telephony sessions. Our
		  system achieves connection-level failover across both
		  local- and wide-area server replication, without requiring
		  a frontend transport- or application-layer switch. Our
		  approach uses recently proposed end-to-end ?connection
		  migration? mechanisms for transport protocols such as TCP,
		  combined with a soft-state session synchronization protocol
		  between replica servers. The end result is a robust, fast,
		  and fine-grained connection failover mechanism that is
		  transparent to client applications, and largely transparent
		  to the server applications. We describe the details of our
		  design and Linux implementation, as well as experimental
		  data that suggests this approach is an attractive way to
		  engineer robust systems for distributing long-running
		  streams; connections suffer relatively small performance
		  degradation even when migration occurs every few seconds,
		  and the associated server overhead is small.},
    file	= {Snoeren01FineGrainedFailover.pdf:Snoeren01FineGrainedFailover.pdf:PDF}
		  ,
    keywords	= {Connection Mobility},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Sobeih04RemHoc,
    author	= {A. Sobeih and H. Baraka and A. Fahmy},
    title	= {ReMHoc: A Reliable Multicast Protocol for Wireless Mobile
		  Multihop Ad hoc Networks},
    booktitle	= {Consumer Communications and Networking Conference 2004
		  (CCNC 2004)},
    month	= {January},
    year	= {2004},
    pages	= {146--151},
    abstract	= {A reliable multicast protocol for wireless mobile multihop
		  ad hoc networks (ReMHoc) is proposed. ReMHoc ensures the
		  eventual delivery of the multicast data to all the
		  multicast group members. ReMHoc is receiver-initiated and
		  NACK-based, and it makes use of feedback suppression in
		  order to avoid negative acknowledgement (NACK) and
		  retransmission implosion. The loss recovery burden is
		  distributed over the multicast group members in order to
		  reduce recovery latency and end-to-end delay. Simulations
		  (using GloMoSim 2.0) have demonstrated the scalability of
		  ReMHoc.},
    date	= {5--8},
    file	= {Sobeih04ReMHoc.pdf:/afs/cs.wisc.edu/u/d/a/darnold/shared/research/Bibliography/pdfs/Sobeih04ReMHoc.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Sottile02Supermon,
    author	= {Matthew J. Sottile and Ronald G. Minnich},
    title	= {Supermon: A High-speed Cluster Monitoring System},
    booktitle	= {IEEE International Conference on Cluster Computing
		  (CLUSTER 2002)},
    month	= {September},
    year	= {2002},
    address	= {Chicago, IL},
    pages	= {39--46},
    file	= {Sottile02Supermon.pdf:Sottile02Supermon.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Sridhar08ScELA,
    author	= {Jaidev K. Sridhar and Matthew J. Koop and Jonathan L.
		  Perkins and Dhabaleswar K. Panda},
    title	= {{ScELA: Scalable and Extensible Launching Architecture for
		  Clusters}},
    booktitle	= {15th International Conference on High performance
		  Computing},
    year	= {2008},
    address	= {Berlin, Heidelberg},
    pages	= {323--335},
    publisher	= {Springer-Verlag},
    series	= {HiPC'08},
    url		= {http://portal.acm.org/citation.cfm?id=1791889.1791925},
    acmid	= {1791925},
    isbn	= {978-3-540-89893-1},
    location	= {Bangalore, India},
    numpages	= {13},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Stann03RMST,
    author	= {Fred Stann and John Heidemann},
    title	= {RMST: reliable data transport in sensor networks},
    booktitle	= {2003 IEEE International Workshop on Sensor Network
		  Protocols and Applications},
    month	= {May},
    year	= {2003},
    pages	= { 102--112},
    doi		= {10.1109/SNPA.2003.1203361},
    keywords	= {reliable overlay networks, sensor networks},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Stelling98GlobusHBM,
    author	= {Paul Stelling and Ian Foster and Carl Kesselman and Craig
		  Lee and Gregor von Laszewski},
    title	= {A Fault Detection Service for Wide Area Distributed
		  Computations},
    booktitle	= {7th IEEE International Symposium on High Performance
		  Distributed Computing},
    month	= {July},
    year	= {1998},
    address	= {Chicago, IL},
    pages	= {268--278},
    url		= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Stelling98GlobusHeartBeatMonitor.pdf}
		  ,
    abstract	= {The potential for faults in distributed computing systems
		  is a signicant complicating factor for application
		  developers. While a variety of techniques exist for
		  detecting and correcting faults, the implementation of
		  these techniques in a particular context can be difficult.
		  Hence, we propose a fault detection service designed to be
		  incorporated, in a modular fashion, into distributed
		  computing systems, tools, or applications. This service
		  uses well-known techniques based on unreliable fault
		  detectors to detect and report component failure, while
		  allowing the user to tradeoff timeliness of reporting
		  against false positive rates. We describe the architecture
		  of this service, report on experimental results that
		  quantify its cost and accuracy, and describe its use in two
		  applications, monitoring the status of system components of
		  the GUSTO computational grid testbed and as part of the
		  NetSolve network-enabled numerical solver.},
    file	= {Stelling98GlobusHBM.pdf:Stelling98GlobusHBM.pdf:PDF},
    keywords	= {Failure Detection},
    owner	= {darnold},
    summary	= {http://www.cs.wisc.edu/~darnold/Bibliography/FailureDetection/Stelling98GlobusHeartBeatMonitor.txt}
		  ,
    timestamp	= {2011.06.26}
}

@InProceedings{	  Stellner95PVMCheckpointing,
    author	= {Georg Stellner and Jim Pruyne},
    title	= {Resource Management and Checkpointing for PVM},
    booktitle	= {2nd European PVM User Group Meeting},
    year	= {1995},
    address	= {Lyon, France},
    url		= {citeseer.ist.psu.edu/stellner95resource.html},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Stellner96CoCheck,
    author	= {Georg Stellner},
    title	= {CoCheck: Checkpointing and Process Migration for {MPI}},
    booktitle	= {International Parallel Processing Symposium},
    month	= {April},
    year	= {1996},
    address	= {Honolulu, HI},
    pages	= {526--531},
    publisher	= {IEEE Computer Society},
    isbn	= {0-8186-7255-2},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Strengert04GPUcompression,
    author	= {Magnus Strengert and Marcelo Magall{\'o}n and Daniel
		  Weiskopf and Stefan Guthe and Thomas Ertl},
    title	= {Hierarchical Visualization and Compression of Large Volume
		  Datasets Using {GPU} Clusters},
    booktitle	= {In Eurographics Symposium on Parallel Graphics and
		  Visualization (EGPGV04) (2004},
    year	= {2004},
    pages	= {41--48}
}

@Article{	  Strohmaier05HPCTrends,
    author	= {Erich Strohmaier and Jack J. Dongarra and Hans W. Meuerd
		  and Horst D. Simone},
    title	= {Recent Trends in the Marketplace of High Performance
		  Computing},
    journal	= {Parallel Computing},
    month	= {March--April},
    year	= {2005},
    volume	= {31},
    number	= {3--4},
    pages	= {261--273},
    abstract	= {In this paper we analyze major recent trends and changes
		  in the High Performance Computing (HPC) market place. The
		  introduction of vector computers started the area of
		  ???Supercomputing???. The initial success of vector
		  computers in the seventies was driven by raw performance.
		  Massive parallel systems (MPP) became successful in the
		  early nineties due to their better price/performance
		  ratios, which was enabled by the attack of the
		  ???killer-micros???. The success of microprocessor based on
		  the shared memory concept (referred to as symmetric
		  multiprocessors (SMP)) even for the very high-end systems,
		  was the basis for the emerging cluster concepts in the
		  early 2000s. Within the first half of this decade clusters
		  of PC???s and workstations have become the prevalent
		  architecture for many HPC application areas on all ranges
		  of performance. However, the Earth Simulator vector system
		  demonstrated that many scientific applications could
		  benefit greatly from other computer architectures. At the
		  same time there is renewed broad interest in the scientific
		  HPC community for new hardware architectures and new
		  programming paradigms. The IBM BlueGene/L system is one
		  early example of a shifting design focus for large-scale
		  system. The DARPA HPCS program has the declared goal of
		  building a Petaflops computer system by the end of the
		  decade using novel computer architectures.},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Strom85OptimisticRecovery,
    author	= {Rob Strom and Shaula Yemini},
    title	= {Optimistic Recovery in Distributed Systems},
    journal	= {ACM Transactions on Computer Systems},
    year	= {1985},
    address	= {New York, NY},
    volume	= {3},
    number	= {3},
    pages	= {204--226},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/3959.3962},
    issn	= {0734-2071},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Sultan01MigratoryTCP,
    author	= {Florin Sultan and Kiran Srinivasan and Deepa Iyer and
		  Liviu Iftode},
    title	= {Migratory TCP: Highly Available Internet Services Using
		  Connection Migration},
    month	= {December},
    year	= {2001},
    number	= {DCS-TR-462},
    institution	= {Rutgers University},
    file	= {Sultan01MigratoryTCP.pdf:Sultan01MigratoryTCP.pdf:PDF},
    keywords	= {Connection Mobility},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Sultan02MigratoryTCP,
    author	= {Florin Sultan and Kiran Srinivasan and Deepa Iyer and
		  Liviu Iftode},
    title	= {Migratory TCP: Highly Available Internet Services using
		  Connection Migration},
    booktitle	= {22nd International Conference on Distributed Computing
		  Systems (ICDCS)},
    month	= {July},
    year	= {2002},
    file	= {Sultan02MigratoryTCP.pdf:Sultan02MigratoryTCP.pdf:PDF},
    keywords	= {Connection Mobility},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Tamir84ErrorRecovery,
    author	= {Yuval Tamir and Carlo H. Sequin},
    title	= {Error Recovery in Multicomputers Using Global
		  Checkpoints},
    booktitle	= {13th International Conference on Parallel Processing},
    month	= {August},
    year	= {1984},
    address	= {Bellaire, MI},
    pages	= {32--41},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Tang03RALMP,
    author	= {Ken Tang and Katia Obraczka and Sung-Ju Lee and Mario
		  Gerla},
    title	= {Reliable Adaptive Lightweight Multicast Protocol},
    booktitle	= {2003 International Conference on Communications (ICC
		  '03)},
    month	= {May},
    year	= {2003},
    address	= {Anchorage, AK},
    pages	= {1054--1058},
    dates	= {11-15},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  BGL,
    author	= {The BlueGene/L Team},
    title	= {{An Overview of the BlueGene/L Supercomputer}},
    booktitle	= {2002 ACM/IEEE conference on Supercomputing (Supercomputing
		  '02)},
    year	= {2002},
    pages	= {1--22},
    publisher	= {IEEE Computer Society Press},
    location	= {Baltimore, MD},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Thain02ErrorScope,
    author	= {Douglas Thain and Miron Livny},
    title	= {Error Scope on a Computational Grid: Theory and Practice},
    booktitle	= {11th IEEE Symposium on High Performance Distributed
		  Computing},
    month	= {July},
    year	= {2002},
    date	= {23-26},
    owner	= {darnold},
    summary	= {notes/Thain02ErrorScope.txt},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Theimer85PreemtableRemoteExecution,
    author	= {Marvin M. Theimer and Keith A. Lantz and David R.
		  Cheriton},
    title	= {Preemptable remote execution facilities for the v-system},
    booktitle	= {10th ACM Symposium on Operating Systems Principles},
    year	= {1985},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  prism,
    author	= {{Thinking Machines Corporation}},
    title	= {{Prism User's Guide}},
    month	= {December},
    year	= {1991},
    address	= {Cambridge, MA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Tichy85RCS,
    author	= {Walter F. Tichy},
    title	= {RCS -- A System for Version Control},
    journal	= {Software -- Practice \& Experience},
    year	= {1985},
    address	= {New York, NY},
    volume	= {15},
    number	= {7},
    pages	= {637--654},
    publisher	= {John Wiley \& Sons, Inc.},
    issn	= {0038-0644},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Tierney00GridMonitoring,
    author	= {Brian Tierney and Brian Crowley and Dan Gunter and Mason
		  Holding and Jason Lee and Mary Thompson},
    title	= {A Monitoring Sensor Management System for Grid
		  Environments},
    booktitle	= {9th IEEE High Performance Distributed Computing Conference
		  (HPDC 9)},
    month	= {August},
    year	= {2000},
    address	= {Pittsburgh, PA},
    pages	= {97--104},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@TechReport{	  Tierney02GridMonitoring,
    author	= {Brian Tierney and Ruth Aydt and Dan Gunter and Warren
		  Smith and Valerie Taylor and Rich Wolski and Martin Swany},
    title	= {A Grid Monitoring Architecture},
    month	= {August},
    year	= {2002},
    number	= {GWD-Perf-16-3},
    institution	= {Global Grid Forum},
    organization = {Global Grid Forum},
    url		= {http://www-didc.lbl.gov/GGF-PERF/GMA-WG/papers/GWD-Perf-16-3.pdf}
		  ,
    file	= {Tierney02GridMonitoring.pdf:Tierney02GridMonitoring.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}


@InProceedings{Tikotekar07Evaluation,
  title={Evaluation of fault-tolerant policies using simulation},
  author={Tikotekar, Anand and Vall{\'e}e, Geoffroy and Naughton, Thomas and Scott, Stephen L and Leangsuksun, Chokchai},
  booktitle={Cluster Computing, 2007 IEEE International Conference on},
  pages={303--311},
  year={2007},
  organization={IEEE}
}

@Article{	  Tong92RollbackRecovery,
    author	= {Zhijun Tong and Richard Y. Kain and W. T. Tsai},
    title	= {Rollback Recovery in Distributed Systems Using Loosely
		  Synchronized Clocks},
    journal	= {IEEE Transactions on Parallel and Distributed Systems},
    year	= {1992},
    address	= {Piscataway, NJ},
    volume	= {3},
    number	= {2},
    pages	= {246--251},
    publisher	= {IEEE Press},
    doi		= {http://dx.doi.org/10.1109/71.127264},
    issn	= {1045-9219},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Touch98XBone,
    author	= {Joseph D. Touch and Steve Hotz},
    title	= {The X-Bone},
    booktitle	= {3rd Global Internet Mini-Conference at Globecom '98},
    month	= {November},
    year	= {1998},
    address	= {Sydney, Australia},
    pages	= {59--68},
    note	= {pp. 44-52 of the mini-conference},
    dates	= {8-12},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Treleaven82DataDrivenDemandDriven,
    author	= {Philip C. Treleaven and David R. Brownbridge and Richard
		  P. Hopkins},
    title	= {Data-Driven and Demand-Driven Computer Architecture},
    journal	= {ACM Computing Surveys},
    year	= {1982},
    volume	= {14},
    number	= {1},
    pages	= {93--143},
    abstract	= {Novel data-driven and demand-driven computer architectures
		  are under development in a large number of laboratories in
		  the United States, Japan, and Europe. These computers are
		  not based on the tradlUonal von Neumann organization;
		  instead, they are attempts to identify the next generation
		  of computer. Basmally, m data-driven (e.g., data-flow)
		  computers the availability of operands triggers the
		  execution of the operation to be performed on them, whereas
		  in demand-driven (e.g, reduction) computers the reqmrement
		  for a result triggers the operation that will generate it.
		  Although there are these two distinct areas of research,
		  each laboratory has developed its own mdlvxdual model of
		  computation, stored program representation, and machine
		  organization. Across this spectrum of designs there m,
		  however, a significant sharing of concepts. The aim of this
		  palaer m to identify the concepts and relationships that
		  exist both within and between the two areas of research. It
		  does thin by examlmng data-driven and demand-driven
		  architecture at three levels, computation organizatmn,
		  (stored) program organization, and machine organLzation.
		  Finally, a survey of various novel computer architectures
		  under development is given.},
    doi		= {http://doi.acm.org/10.1145/356869.356873},
    file	= {Treleaven82DataDrivenDemandDriven.pdf:Treleaven82DataDrivenDemandDriven.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Truong04SCALEA-G,
    author	= {Hong L. Truong and Thomas Fahringer},
    title	= {SCALEA-G: A Unified Monitoring and Performance Analysis
		  System for the Grid},
    booktitle	= {2nd European Across Grids Conference},
    month	= {January},
    year	= {2004},
    address	= {Nicosia, Cyprus},
    file	= {Truong04SCALEA-G.pdf:Truong04SCALEA-G.pdf:PDF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Tsai05VocalInformationRetrieval,
    author	= {Wei-Ho Tsai and Hsin-Min Wang},
    title	= {On the Extraction of Vocal-related Information to
		  Facilitate the Management of Popular Music Collections},
    booktitle	= {5th Joint Conference on Digital Libraries (JCDL '05)},
    year	= {2005},
    address	= {Denver, CO},
    pages	= {197--206},
    doi		= {http://doi.acm.org/10.1145/1065385.1065432},
    isbn	= {1-58113-876-8},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  turner-reliability,
    author	= {J. C. Turner},
    title	= {Reliability and Operability of Systems of Components in
		  Series and in Parallel},
    journal	= {Electronics Reliability and Microminiaturization},
    year	= {1962},
    volume	= {1},
    pages	= {21-26},
    date-added	= {2010-02-17 16:49:37 -0700},
    date-modified = {2010-02-17 16:50:58 -0700}
}

@InProceedings{	  Uhlemann:06:JOSHUA,
    author	= {K. Uhlemann and C. Engelmann and S.L. Scott},
    title	= {JOSHUA: Symmetric Active/Active Replication for Highly
		  Available HPC Job and Resource Management},
    booktitle	= {Proceedings of the 2006 IEEE International Conference on
		  Cluster Computing},
    year	= {2006},
    address	= {Los Alamitos, CA, USA},
    publisher	= {IEEE Computer Society},
    issn	= {1552-5244},
    doi		= {http://doi.ieeecomputersociety.org/10.1109/CLUSTR.2006.311855}
		  
}

@InProceedings{	  Vaidya95TwoLevel,
    author	= {Vaidya, Nitin H.},
    title	= {A case for two-level distributed recovery schemes},
    booktitle	= {ACM SIGMETRICS Joint International Conference on
		  Measurement and Modeling of Computer Systems},
    year	= {1995},
    address	= {New York, NY, USA},
    pages	= {64--73},
    publisher	= {ACM},
    series	= {SIGMETRICS '95/PERFORMANCE '95},
    url		= {http://doi.acm.org/10.1145/223587.223596},
    isbn	= {0-89791-695-6},
    location	= {Ottawa, Ontario, Canada},
    numpages	= {10},
    doi		= {10.1145/223587.223596},
    acmid	= {223596}
}

@InProceedings{	  Vetter00Umpire,
    author	= {Jeffrey S. Vetter and Bronis R. de Supinski},
    title	= {{Dynamic Software Testing of MPI Applications with
		  Umpire}},
    booktitle	= {2000 ACM/IEEE Conference on Supercomputing (SC '00)},
    month	= {November},
    year	= {2000},
    address	= {Dallas, TX},
    isbn	= {0-7803-9802-5},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Vetter00MonitoringControl,
    author	= {Jeffrey S. Vetter and Daniel A. Reed},
    title	= {Real-time Performance Monitoring, Adaptive Control, and
		  Interactive Steering of Computational Grids},
    booktitle	= {International Journal of High Performance Computing
		  Applications},
    year	= {2000},
    volume	= {14},
    number	= {4},
    pages	= {357--366},
    file	= {Vetter00MonitoringControl.pdf:Vetter00MonitoringControl.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@article{   Vetter2005mpiP,
  title={mpip: Lightweight, scalable mpi profiling},
  author={Vetter, Jeffrey and Chambreau, Chris},
  journal={URL: http://www. llnl. gov/CASC/mpiP},
  year={2005}
}

@InProceedings{	  Vogels01EpidemicTechniques,
    author	= {Werner Vogels and Robbert van Renesse and Ken Birman},
    title	= {Using Epidemic Techniques for Building Ultra-Scalable
		  Reliable Communications Systems},
    booktitle	= {Workshop on New visions for Large-Scale Networks: Research
		  and Applications},
    month	= {March},
    year	= {2001},
    address	= {Vienna, VA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Waheed00GridMonitoring,
    author	= {Abdul Waheed and Warren Smith and Jude George and Jerry
		  Yan},
    title	= {An Infrastructure for Monitoring and Management in
		  Computational Grids},
    booktitle	= {5th Conference on Languages, Compilers, and Runtime
		  Systems for Scalable Computers},
    month	= {March},
    year	= {2000},
    address	= {Rochester, NY},
    note	= {Published as Lecture Notes in Computer Science 1915, S.
		  Dwarkadas (Ed.), Springer, Heidelberg, 2000, pp. 235-245},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Wan05PSFQ,
    author	= {Chieh-Yih Wan and Andrew T. Campbell and Lakshman
		  Krishnamurthy},
    title	= {Pump-Slowly, Fetch-Quickly (PSFQ): A Reliable Transport
		  Protocol for Sensor Networks},
    journal	= {IEEE Journal on Selected Areas in Communications},
    month	= {April},
    year	= {2005},
    volume	= {23},
    number	= {4},
    pages	= { 862--872},
    doi		= {10.1109/JSAC.2005.843554},
    issn	= {0733-8716},
    keywords	= { telecommunication network routing, transport protocols,
		  wireless sensor networks Berkeley motes, PSFQ, TinyOS
		  operating system, energy-efficient protocol, ns-2
		  simulator, pump-slowly fetch-quickly, reliable data
		  communications, reliable transport protocol, underlying
		  routing infrastructure, wireless sensor networks},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Wang93ReducingMessageLoggingOverhead,
    author	= {{Yi-min} Wang},
    title	= {Reducing Message Logging Overhead for Log-based Recovery},
    booktitle	= {IEEE International Symposium on Circuits and Systems
		  (ISCAS '93)},
    month	= {May},
    year	= {1993},
    address	= {Chicago, IL},
    volume	= {3},
    pages	= {1925--1928},
    dates	= {3-6},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Wang97ConsistentGlobalCheckpoints,
    author	= {{Yi-Min} Wang},
    title	= {Consistent Global Checkpoints that Contain a Given Set of
		  Local Checkpoints},
    journal	= {IEEE Transactions on Computers},
    year	= {1997},
    address	= {Washington, DC},
    volume	= {46},
    number	= {4},
    pages	= {456--468},
    publisher	= {IEEE Computer Society},
    doi		= {http://dx.doi.org/10.1109/12.588059},
    issn	= {0018-9340},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Wang98ModelingCommunicationPipeline,
    author	= {Randolph Y. Wang and Arvind Krishnamurthy and Richard P.
		  Martin and Thomas E. Anderson and David E. Culler},
    title	= {Modeling Communication Pipeline Latency},
    journal	= {ACM SIGMETRICS Performance Evaluation Review},
    month	= {June},
    year	= {1998},
    volume	= {26},
    number	= {1},
    pages	= {22--32},
    publisher	= {ACM Press},
    abstract	= {In this paper, we study how to minimize the latency of a
		  message through a network that consists of a number of
		  store-and-forward stages. This research is especially
		  relevant for today's low overhead communication systems
		  that employ dedicated processing elements for protocol
		  processing. We develop an abstract pipeline model that
		  reveals a crucial performance tradeoff involving the
		  effects of the overhead of the bottleneck stage and the
		  bandwidth of the remaining stages. We exploit this tradeoff
		  to develop a suite of fragmentation algorithms designed to
		  minimize message latency. We also provide an experimental
		  methodology that enables the construction of customized
		  pipeline algorithms that can adapt to the specific system
		  characteristics and application workloads. By applying this
		  methodology to the Myrinet-GAM system, we have improved its
		  latency by up to 51\%. Our theoretical framework is also
		  applicable to pipelined systems beyond the context of high
		  speed networks.},
    file	= {Wang98ModelingCommunicationPipeline.pdf:Wang98ModelingCommunicationPipeline.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Welch03GridSecurity,
    author	= {Von Welch and Frank Siebenlist and Ian Foster and John
		  Bresnahan and Karl Czajkowski and Jarek Gawor and Carl
		  Kesselman and Sam Meder and Laura Pearlman and Steven
		  Tuecke},
    title	= {Security for Grid Services},
    booktitle	= {12th IEEE International Symposium on High Performance
		  Distributed Computing (HPDC 12)},
    month	= {June},
    year	= {2003},
    address	= {Seattle, WA},
    pages	= {48--57},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Whetten95TotallyOrderedMulticast,
    author	= {Brian Whetten and Todd Montgomery and Simon M. Kaplan},
    title	= {A High Performance Totally Ordered Multicast Protocol},
    booktitle	= {Lecture Notes In Computer Science: Selected Papers from
		  the International Workshop on Theory and Practice in
		  Distributed Systems},
    year	= {1995},
    number	= {938},
    pages	= {33--57},
    publisher	= {Springer Verlag},
    isbn	= {3-540-60042-6},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Wilburn05cameraArray,
    author	= {Bennett Wilburn and Neel Joshi and Vaibhav Vaish and
		  Eino-Ville Talvala and Emilio Antunez and Adam Barth and
		  Andrew Adams and Mark Horowitz and Marc Levoy},
    title	= {High performance imaging using large camera arrays},
    journal	= {ACM Transactions on Graphics},
    year	= {2005},
    address	= {New York, NY, USA},
    volume	= {24},
    number	= {3},
    pages	= {765--776},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/1073204.1073259},
    issn	= {0730-0301},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Book{		  williams-prob,
    author	= {Richard Williams},
    title	= {Electrical Engineering Probability},
    year	= {1991},
    publisher	= {West},
    date-added	= {2010-02-17 15:37:47 -0700},
    date-modified = {2010-02-17 15:38:28 -0700}
}

@Article{	  Wolski99NWS,
    author	= {Rich Wolski and Neil Spring and Jim Hayes},
    title	= {The Network Weather Service: A Distributed Resource
		  Performance Forecasting Service for Metacomputing},
    journal	= {Future Generation Computing Systems},
    month	= {October},
    year	= {1999},
    volume	= {15},
    number	= {5-6},
    pages	= {757--768},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  wu-perf,
    author	= {Wu, Ming and Sun, Xian-He and Jin, Hui},
    title	= {Performance under failures of high-end computing},
    booktitle	= {SC '07: Proceedings of the 2007 ACM/IEEE conference on
		  Supercomputing},
    year	= {2007},
    address	= {New York, NY, USA},
    pages	= {1--11},
    publisher	= {ACM},
    date-added	= {2010-02-17 16:34:08 -0700},
    date-modified = {2010-02-17 16:34:38 -0700},
    doi		= {http://doi.acm.org/10.1145/1362622.1362687},
    isbn	= {978-1-59593-764-3},
    location	= {Reno, Nevada},
    bdsk-url-1	= {http://doi.acm.org/10.1145/1362622.1362687}
}

@InProceedings{	  Wuhib07RobustMonitoring,
    author	= {Fetahi Wuhib and Mads Dam and Rolf Stadler and Alexander
		  Clemm},
    title	= {Robust Monitoring of Network-wide Aggregates through
		  Gossiping},
    booktitle	= {10th IFIP/IEEE International Symposium on Integrated
		  Network Management. (IM '07) },
    year	= {2007},
    pages	= {226--235},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  Xiao04InformationExtraction,
    author	= {Luo Xiao and Dieter Wissmann and Michael Brown and Stephan
		  Jablonski},
    title	= {Information Extraction from the Web: System and
		  Techniques},
    journal	= {Applied Intelligence},
    year	= {2004},
    address	= {Hingham, MA},
    volume	= {21},
    number	= {2},
    pages	= {195--224},
    publisher	= {Kluwer Academic Publishers},
    doi		= {http://dx.doi.org/10.1023/B:APIN.0000033637.51909.04},
    issn	= {0924-669X},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Yalagandula04SDIMS,
    author	= {Praveen Yalagandula and Mike Dahlin},
    title	= {A scalable distributed information management system},
    booktitle	= {2004 Conference on Applications, Technologies,
		  Architectures, and Protocols for Computer Communications
		  (SIGCOMM '04)},
    month	= {August/September},
    year	= {2004},
    address	= {Portland, OR},
    pages	= {379--390},
    doi		= {http://doi.acm.org/10.1145/1015467.1015509},
    isbn	= {1-58113-862-8},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Yan95Aggregation,
    author	= {Weipeng Yan and Per-Ake Larson},
    title	= {Eager Aggregation and Lazy Aggregation},
    booktitle	= {21st International Conference on Very Large Data Bases},
    journal	= {21st International Conference on Very Large Data Bases,
		  Zurich, Switzerland},
    month	= {September},
    year	= {1995},
    pages	= {345--357},
    publisher	= {Morgan Kaufmann Publishers Inc.},
    dates	= {11-15},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Yang00RealizingFaultResilience,
    author	= {Chu-Sing Yang and Mon-Yen Luo},
    title	= {Realizing fault resilience in Web-server cluster},
    booktitle	= {Supercomputing '00: 2000 ACM/IEEE conference on
		  Supercomputing (CDROM)},
    year	= {2000},
    address	= {Washington, DC},
    pages	= {21},
    publisher	= {IEEE Computer Society},
    file	= {Yang00RealizingFaultResilience.pdf:Yang00RealizingFaultResilience.pdf:PDF}
		  ,
    isbn	= {0-7803-9802-5},
    location	= {Dallas, TX},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Yang04ProactiveReconstruction,
    author	= {Mengkun Yang and Zongming Fei},
    title	= {A Proactive Approach to Reconstructing Overlay Multicast
		  Trees},
    booktitle	= {INFOCOM 2004},
    month	= {March},
    year	= {2004},
    address	= {Hong Kong},
    date	= {7--11},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Yao03QueryProcessing,
    author	= {Yong Yao and J. E. Gehrke},
    title	= {Query Processing in Sensor Networks},
    booktitle	= {First Biennial Conference on Innovative Data Systems
		  Research (CIDR 2003)},
    month	= {January},
    year	= {2003},
    address	= {Asilomar, CA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Yavatkar95TMTP,
    author	= {Rajendra Yavatkar and James Griffoen and Madhu Sudan},
    title	= {A Reliable Dissemination Protocol for Interactive
		  Collaborative Applications},
    booktitle	= {3rd ACM International Conference on Multimedia},
    year	= {1995},
    address	= {San Francisco, CA},
    pages	= {333--344},
    publisher	= {ACM Press},
    doi		= {http://doi.acm.org/10.1145/217279.215288},
    isbn	= {0-89791-751-0},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Article{	  yu:fault-tolerant-MPI,
    author	= {Chen Yu and Du Zhi-Hui and Peng Liu and Li San-Li},
    title	= {OS kernel supported fault tolerant MPI.},
    booktitle	= {Second International Conference on Computer and
		  Information Technology (CIT'2001), 12-15 Sept. 2001,
		  Shanghai, China},
    journal	= {Journal of Shanghai University},
    year	= {2001},
    volume	= {5},
    number	= {SUP},
    pages	= {18 -- 21},
    publisher	= {China : Editorial Board of J. Shanghai Univ, 2001},
    abstract	= {Currently parallel cluster systems have a large number of
		  computing nodes, and have a high risk of individual node
		  failure. TH-MPI is a Linux kernel supported fault tolerant
		  MPI. It optimizes the checkpointing by using Linux kernel
		  module technology and diskless checkpointing. The results
		  show good performance of checkpointing in TH-MPI. (5
		  refs.)},
    copyright	= {(c)2004 IEE},
    keywords	= {Checkpointing; Diagnostic, testing, debugging and
		  evaluating systems (C6150G); Diskless checkpointing;
		  Distributed systems software (C6150N); Linux kernel module
		  technology; Linux kernel supported fault tolerant MPI;
		  Local area networks (C5620L); Message passing; Node
		  failure; Operating system kernels; Operating systems
		  (C6150J); Parallel cluster systems; Software fault
		  tolerance; System recovery; TH MPI; Unix; Workstation
		  clusters}
}

@InProceedings{	  Yuan06AutomatedDiagnosis,
    author	= {Chun Yuan and Ni Lao and Ji-Rong Wen and Jiwei Li and
		  Zheng Zhang and Yi-Min Wang and Wei-Ying Ma},
    title	= {{Automated Known Problem Diagnosis with Event Traces}},
    booktitle	= {EuroSys 2006},
    month	= {April},
    year	= {2006},
    address	= {Leuven, Belgium},
    dates	= {18--21},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Zandy99ProcessHijacking,
    author	= {Victor C. Zandy and Barton P. Miller and Miron Livny},
    title	= {Process Hijacking},
    booktitle	= {8th International Symposium on High Performance
		  Distributed Computing (HPDC '99)},
    month	= {August},
    year	= {1999},
    address	= {Redondo Beach, CA},
    pages	= {177--184},
    abstract	= {Process checkpointing is a basic mechanism required for
		  providing High Throughput Computing service on
		  distributively owned resources. We present a new process
		  checkpoint and migration technique, called process
		  hijacking, that uses dynamic program re-writing techniques
		  to add checkpointing capability to a running program.
		  Process hijacking makes it possible to checkpoint and
		  migrate proprietary applications that cannot be re-linked
		  with a checkpoint library, and it makes it possible to
		  dynamically hand off an ordinary running process to a
		  distributed resource management system such as Condor. We
		  discuss the problems of adding checkpointing capability to
		  a program already in execution: (1) loading new code into
		  the running process, and (2) replacing functions of the
		  process with calls to dynamically loaded functions. We use
		  the DynInst API process editing library, augmented with a
		  new call for replacing functions, to solve these problems.
		  We discuss problems associated with migrating a hijacked
		  process: (1) safely restoring the dynamically assembled
		  address space of the hijacked process from a checkpoint,
		  and (2) preserving the uncheckpointable operating system
		  state of the hijacked process for migration. We preserve
		  uncheckpointable operating system state by spawning a
		  shadow process from the hijacked process. We have used
		  process hijacking to migrate a variety of programs,
		  including a running, unmodified Java VM. We show that the
		  migration performance of hijacking is comparable to that of
		  Condor.},
    file	= {Zandy99ProcessHijacking.pdf:Zandy99ProcessHijacking.pdf:PDF}
		  ,
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Zandy02ReliableConnections,
    author	= {Victor C. Zandy and Barton P. Miller},
    title	= {Reliable Network Connections},
    booktitle	= {ACM MobiCom},
    month	= {September},
    year	= {2002},
    address	= {Atlanta, GA},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Zhang95PersistentConnections,
    author	= {Yongguang Zhang and Son K. Dao},
    title	= {A {"Persistent Connection"} Model for Mobile and
		  Distributed Systems},
    booktitle	= {4th International Conference on Computer Communications
		  and Networks (ICCCN)},
    month	= {September},
    year	= {1995},
    address	= {Las Vegas, NV},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Zhang02HostMulticast,
    author	= {Beichuan Zhang and S. Jamin and Lixia Zhang},
    title	= {Host Multicast: A Framework for Delivering Multicast to
		  End Users},
    booktitle	= {21st Annual Joint Conference of the IEEE Computer and
		  Communications Societies (INFOCOM 2002)},
    month	= {June},
    year	= {2002},
    pages	= {1366--1375},
    dates	= {23--27},
    doi		= {10.1109/INFCOM.2002.1019387},
    issn	= {0743-166X },
    keywords	= {Internet, multicast protocols, network topology, trees
		  (mathematics)Internet infrastructure, group membership,
		  host multicast tree protocol, inter-domain multicast
		  delivery, multicast protocol, multicast trees, network
		  topology, proxy gateways},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@InProceedings{	  zheng-hpc,
    author	= {Ziming Zheng and Zhiling Lan},
    title	= {Reliability-Aware Scalability Models for High Performance
		  Computing,},
    booktitle	= {Cluster'09: Proceedings of the IEEE conference on Cluster
		  Computing},
    year	= {2009},
    date-added	= {2010-02-17 16:39:24 -0700},
    date-modified = {2010-02-17 16:43:09 -0700}
}

@InProceedings{Zheng04Bigsim,
  title={Bigsim: A parallel simulator for performance prediction of extremely large parallel machines},
  author={Zheng, Gengbin and Kakulapati, Gunavardhan and Kal{\'e}, Laxmikant V},
  booktitle={Parallel and Distributed Processing Symposium, 2004. Proceedings. 18th International},
  pages={78},
  year={2004},
  organization={IEEE}
}

@Article{Zheng05Simulation,
  title={Simulation-based performance prediction for large parallel machines},
  author={Zheng, Gengbin and Wilmarth, Terry and Jagadishprasad, Praveen and Kal{\'e}, Laxmikant V},
  journal={International Journal of Parallel Programming},
  volume={33},
  number={2-3},
  pages={183--207},
  year={2005},
  publisher={Springer}
}


@InProceedings{	  Zhou99Failover,
    author	= {Yuanyuan Zhou and Peter M. Chen and Kai Li},
    title	= {Fast Cluster Failover using Virtual Memory-mapped
		  Communication},
    booktitle	= {13th International Conference on Supercomputing (ICS
		  '99)},
    year	= {1999},
    address	= {Rhodes, Greece},
    pages	= {373--382},
    publisher	= {ACM},
    doi		= {http://doi.acm.org/10.1145/305138.305215},
    isbn	= {1-58113-164-X},
    owner	= {darnold},
    paddress	= {New York, NY, USA},
    timestamp	= {2011.06.26}
}

@InProceedings{	  Zhuang05OverlayFailureDetection,
    author	= {Shelley Zhuang and Dennis Geels and Ion Stoica and Randy
		  H. Katz},
    title	= {On Failure Detection Algorithms in Overlay Networks},
    booktitle	= {INFOCOM 2005},
    month	= {March},
    year	= {2005},
    address	= {Miami, FL},
    file	= {Zhuang05OverlayFailureDetection.pdf:Zhuang05OverlayFailureDetection.pdf:PDF}
		  ,
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

_markedentry = "[darnold]",
	owner = "darnold",
	timestamp = "2011.06.27",
	howpublished = "\url{http://www.7-zip.org}"
}
@Misc{		  BigBrother,
    title	= {Big Brother System and Network Monitor},
    url		= {http://www.b4.com/},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  BlueGene,
    title	= {IBM System Blue Gene Solution},
    note	= {http://www-03.ibm.com/systems/deepcomputing/bluegene/},
    key		= {BlueGene},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  Clumon,
    title	= {Clumon},
    url		= {http://www.clumon.ncsa.uiuc.edu/},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  COBO,
    title	= {{PMGR\_COLLECTIVE}},
    url		= {http://sourceforge.net/projects/pmgrcollective/},
    note	= {http://sourceforge.net/projects/pmgrcollective/ (visited
		  May 2011)},
    key		= {PMGR\_COLLECTIVE},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  CoPilotPerformance,
    title	= {SGI: The Performance Co-Pilot},
    url		= {http://www.sgi.com/software/co-pilot/},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  CornellFailureDetectors,
    title	= {Cornell Research on Failure Detectors},
    url		= {http://www.cs.cornell.edu/home/sam/FDpapers.html},
    keywords	= {Failure Detection},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  fuse,
    title	= {FUSE: Filesystem in Userspace. },
    url		= {http://fuse.sourceforge.net/.}
}

@Misc{		  IBMLoadLeveler,
    title	= {{IBM Tivoli Workload Scheduler LoadLeveler}},
    url		= {http://www-03.ibm.com/systems/software/loadleveler/},
    note	= {http://www-03.ibm.com/systems/software/loadleveler
		  (visited May 2011)},
    key		= {IBM},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  OGSA,
    title	= {Open Grid Services Architecture},
    url		= {https://forge.gridforum.org/projects/ogsa-wg/},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  OpenPBS,
    title	= {OpenPBS},
    url		= {http://www.openpbs.org},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  PBS,
    title	= {{PBS Works}},
    url		= {http://www.pbsworks.com/ProductPBSWorks.aspx},
    note	= {http://www.pbsworks.com/ProductPBSWorks.aspx (visited May
		  2011)},
    key		= {PBS Works},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  PlatformLSF,
    title	= {{Platform LSF}},
    url		= {http://www.platform.com/workload-management/high-performance-computing}
		  ,
    note	= {http://www.platform.com/workload-management/high-performance-computing
		  (visited May 2011)},
    key		= {Platform LSF},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  SCriM,
    title	= {SCriM: Sensor Networks for Critical Monitoring},
    note	= {http://db.sis.pitt.edu/projects/SCriM/},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  Sequoia,
    title	= {{ASC Sequoia}},
    url		= {https://asc.llnl.gov/computing_resources/sequoia/},
    note	= {\url{https://asc.llnl.gov/computing_resources/sequoia}
		  (visited May 2011)},
    key		= {ASC Sequoia},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{          SSTmacro-website,
  title         = {SST: The Structural Simulation Toolkit},
  year          = {2011},
  howpublished = {\url{http://sst.sandia.gov/about_sstmacro.html}},
}

@Misc{		  Top500,
    title	= {{Top 500 Supercomputer Sites}},
    url		= {http://www.top500.org/},
    note	= {\url{http://www.top500.org/} (visited March 2012)},
    key		= {Top500},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  TotalView,
    title	= {{TotalView}},
    url		= {http://www.roguewave.com/products/totalview-family/totalview.aspx}
		  ,
    note	= {http://www.roguewave.com/products/totalview-family/totalview.aspx
		  (visited May 2011)},
    key		= {TotalView},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  UnixDomainSockets,
    title	= {Sockets for Local Interprocess Communication},
    note	= {Linux Programer's Manual},
    owner	= {darnold},
    timestamp	= {2011.06.26}
}

@Misc{		  wiki-birthday,
    title	= {http://en.wikipedia.org/wiki/{B}irthday{\_}problem},
    url		= {http://en.wikipedia.org/wiki/Birthday_problem},
    date-added	= {2010-02-17 15:04:51 -0700},
    date-modified = {2010-02-17 15:31:39 -0700},
    bdsk-url-1	= {http://en.wikipedia.org/wiki/Birthday_problem}
}

@Misc{		  wiki-hyper,
    title	= {http://en.wikipedia.org/wiki/{H}ypergeometric{\_}distribution}
		  ,
    url		= {http://en.wikipedia.org/wiki/Hypergeometric_distribution},
    date-added	= {2010-02-17 15:05:24 -0700},
    date-modified = {2010-02-17 15:30:54 -0700},
    key		= {wiki-hyper},
    read	= {No},
    bdsk-url-1	= {http://en.wikipedia.org/wiki/Hypergeometric_distribution}
}

@article{Culler:1993:LTR:173284.155333,
 author = {Culler, David and Karp, Richard and Patterson, David and Sahay, Abhijit and Schauser, Klaus Erik and Santos, Eunice and Subramonian, Ramesh and von Eicken, Thorsten},
 title = {LogP: towards a realistic model of parallel computation},
 journal = {SIGPLAN Not.},
 issue_date = {July 1993},
 volume = {28},
 number = {7},
 month = jul,
 year = {1993},
 issn = {0362-1340},
 pages = {1--12},
 numpages = {12},
 acmid = {155333},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {PRAM, complexity analysis, massively parallel processors, parallel algorithms, parallel models},
} 


@article{Bohrer:2004:MFS:1054907.1054910,
 author = {Bohrer, Patrick and Peterson, James and Elnozahy, Mootaz and Rajamony, Ram and Gheith, Ahmed and Rockhold, Ron and Lefurgy, Charles and Shafi, Hazim and Nakra, Tarun and Simpson, Rick and Speight, Evan and Sudeep, Kartik and Van Hensbergen, Eric and Zhang, Lixin},
 title = {Mambo: a full system simulator for the PowerPC architecture},
 journal = {SIGMETRICS Perform. Eval. Rev.},
 issue_date = {March 2004},
 volume = {31},
 number = {4},
 month = mar,
 year = {2004},
 issn = {0163-5999},
 pages = {8--12},
 numpages = {5},
 acmid = {1054910},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@article{Binkert:2011:GS:2024716.2024718,
 author = {Binkert, Nathan and Beckmann, Bradford and Black, Gabriel and Reinhardt, Steven K. and Saidi, Ali and Basu, Arkaprava and Hestness, Joel and Hower, Derek R. and Krishna, Tushar and Sardashti, Somayeh and Sen, Rathijit and Sewell, Korey and Shoaib, Muhammad and Vaish, Nilay and Hill, Mark D. and Wood, David A.},
 title = {The gem5 simulator},
 journal = {SIGARCH Comput. Archit. News},
 issue_date = {May 2011},
 volume = {39},
 number = {2},
 month = aug,
 year = {2011},
 issn = {0163-5964},
 pages = {1--7},
 numpages = {7},
 acmid = {2024718},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@article{Valiant:1990:BMP:79173.79181,
   author = {Valiant, Leslie G.},
    title = {A Bridging Model for Parallel Computation},
     journal = {Commun. ACM},
      issue_date = {Aug. 1990},
       volume = {33},
        number = {8},
         month = aug,
          year = {1990},
           issn = {0001-0782},
            pages = {103--111},
             numpages = {9},
              url = {http://doi.acm.org/10.1145/79173.79181},
               doi = {10.1145/79173.79181},
                acmid = {79181},
                 publisher = {ACM},
                  address = {New York, NY, USA},
} 

@article{Lamport:1978:TCO:359545.359563,
   author = {Lamport, Leslie},
    title = {Time, Clocks, and the Ordering of Events in a Distributed
      System},
     journal = {Commun. ACM},
      issue_date = {July 1978},
       volume = {21},
        number = {7},
         month = jul,
          year = {1978},
           issn = {0001-0782},
            pages = {558--565},
             numpages = {8},
              url = {http://doi.acm.org/10.1145/359545.359563},
               doi = {10.1145/359545.359563},
                acmid = {359563},
                 publisher = {ACM},
                  address = {New York, NY, USA},
                   keywords = {clock synchronization, computer networks,
                     distributed systems, multiprocess systems},
} 

@article{Hensgen:1988:TAB:54616.54617,
   author = {Hensgen, Debra and Finkel, Raphael and Manber, Udi},
    title = {Two Algorithms for Barrier Synchronization},
     journal = {Int. J. Parallel Program.},
      issue_date = {Feb. 1988},
       volume = {17},
        number = {1},
         month = feb,
          year = {1988},
           issn = {0885-7458},
            pages = {1--17},
             numpages = {17},
              url = {http://dx.doi.org/10.1007/BF01379320},
               doi = {10.1007/BF01379320},
                acmid = {54617},
                 publisher = {Kluwer Academic Publishers},
                  address = {Norwell, MA, USA},
} 


@article{thakur2005optimization,
    title={Optimization of collective communication operations in
      MPICH},
      author={Thakur, Rajeev and Rabenseifner, Rolf and Gropp, William},
        journal={International Journal of High Performance Computing
          Applications},
          volume={19},
            number={1},
              pages={49--66},
                year={2005},
                  publisher={SAGE Publications}
}

@inproceedings{bronevetsky2009communication,
  title={Communication-sensitive static dataflow for parallel message passing applications},
  author={Bronevetsky, Greg},
  booktitle={Proceedings of the 7th annual IEEE/ACM International Symposium on Code Generation and Optimization},
  pages={1--12},
  year={2009},
  organization={IEEE Computer Society}
}
